<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Square.Connect</name>
    </assembly>
    <members>
        <member name="T:Square.Connect.Api.IApplePayApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.IApplePayApi.RegisterDomain(Square.Connect.Model.RegisterDomainRequest)">
             <summary>
             RegisterDomain
             </summary>
             <remarks>
             Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Embedding the Square Payment Form](https://docs.connect.squareup.com/articles/adding-payment-form) guide.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>RegisterDomainResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IApplePayApi.RegisterDomainWithHttpInfo(Square.Connect.Model.RegisterDomainRequest)">
             <summary>
             RegisterDomain
             </summary>
             <remarks>
             Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Embedding the Square Payment Form](https://docs.connect.squareup.com/articles/adding-payment-form) guide.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of RegisterDomainResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IApplePayApi.RegisterDomainAsync(Square.Connect.Model.RegisterDomainRequest)">
             <summary>
             RegisterDomain
             </summary>
             <remarks>
             Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Embedding the Square Payment Form](https://docs.connect.squareup.com/articles/adding-payment-form) guide.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of RegisterDomainResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IApplePayApi.RegisterDomainAsyncWithHttpInfo(Square.Connect.Model.RegisterDomainRequest)">
             <summary>
             RegisterDomain
             </summary>
             <remarks>
             Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Embedding the Square Payment Form](https://docs.connect.squareup.com/articles/adding-payment-form) guide.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (RegisterDomainResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.ApplePayApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ApplePayApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.ApplePayApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.ApplePayApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.ApplePayApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.ApplePayApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.ApplePayApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.ApplePayApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.ApplePayApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ApplePayApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.ApplePayApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.ApplePayApi.RegisterDomain(Square.Connect.Model.RegisterDomainRequest)">
             <summary>
             RegisterDomain Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Embedding the Square Payment Form](https://docs.connect.squareup.com/articles/adding-payment-form) guide.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>RegisterDomainResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ApplePayApi.RegisterDomainWithHttpInfo(Square.Connect.Model.RegisterDomainRequest)">
             <summary>
             RegisterDomain Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Embedding the Square Payment Form](https://docs.connect.squareup.com/articles/adding-payment-form) guide.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of RegisterDomainResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ApplePayApi.RegisterDomainAsync(Square.Connect.Model.RegisterDomainRequest)">
             <summary>
             RegisterDomain Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Embedding the Square Payment Form](https://docs.connect.squareup.com/articles/adding-payment-form) guide.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of RegisterDomainResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ApplePayApi.RegisterDomainAsyncWithHttpInfo(Square.Connect.Model.RegisterDomainRequest)">
             <summary>
             RegisterDomain Activates a domain for use with Web Apple Pay and Square. A validation will be performed on this domain by Apple to ensure is it properly set up as an Apple Pay enabled domain.  This endpoint provides an easy way for platform developers to bulk activate Web Apple Pay with Square for merchants using their platform.  To learn more about Apple Pay on Web see the Apple Pay section in the [Embedding the Square Payment Form](https://docs.connect.squareup.com/articles/adding-payment-form) guide.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (RegisterDomainResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.ICatalogApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchDeleteCatalogObjects(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
             <summary>
             BatchDeleteCatalogObjects
             </summary>
             <remarks>
             Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>BatchDeleteCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchDeleteCatalogObjectsWithHttpInfo(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
             <summary>
             BatchDeleteCatalogObjects
             </summary>
             <remarks>
             Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of BatchDeleteCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchRetrieveCatalogObjects(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
             <summary>
             BatchRetrieveCatalogObjects
             </summary>
             <remarks>
             Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>BatchRetrieveCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchRetrieveCatalogObjectsWithHttpInfo(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
             <summary>
             BatchRetrieveCatalogObjects
             </summary>
             <remarks>
             Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of BatchRetrieveCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchUpsertCatalogObjects(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
             <summary>
             BatchUpsertCatalogObjects
             </summary>
             <remarks>
             Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>BatchUpsertCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchUpsertCatalogObjectsWithHttpInfo(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
             <summary>
             BatchUpsertCatalogObjects
             </summary>
             <remarks>
             Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of BatchUpsertCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.CatalogInfo">
             <summary>
             CatalogInfo
             </summary>
             <remarks>
             Returns information about the Square Catalog API, such as batch size limits for `BatchUpsertCatalogObjects`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>CatalogInfoResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.CatalogInfoWithHttpInfo">
             <summary>
             CatalogInfo
             </summary>
             <remarks>
             Returns information about the Square Catalog API, such as batch size limits for `BatchUpsertCatalogObjects`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>ApiResponse of CatalogInfoResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.DeleteCatalogObject(System.String)">
             <summary>
             DeleteCatalogObject
             </summary>
             <remarks>
             Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="objectId">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
             <returns>DeleteCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.DeleteCatalogObjectWithHttpInfo(System.String)">
             <summary>
             DeleteCatalogObject
             </summary>
             <remarks>
             Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="objectId">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
             <returns>ApiResponse of DeleteCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.ListCatalog(System.String,System.String)">
             <summary>
             ListCatalog
             </summary>
             <remarks>
             Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The types parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example `ITEM,ITEM_VARIATION,CATEGORY`.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`. (optional)</param>
             <returns>ListCatalogResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.ListCatalogWithHttpInfo(System.String,System.String)">
             <summary>
             ListCatalog
             </summary>
             <remarks>
             Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The types parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example `ITEM,ITEM_VARIATION,CATEGORY`.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`. (optional)</param>
             <returns>ApiResponse of ListCatalogResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.RetrieveCatalogObject(System.String,System.Nullable{System.Boolean})">
             <summary>
             RetrieveCatalogObject
             </summary>
             <remarks>
             Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="objectId">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
             <param name="includeRelatedObjects">If `true`, the response will include additional objects that are related to the requested object, as follows:  If the `object` field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the response. If the `object` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of the response.  Default value: `false` (optional)</param>
             <returns>RetrieveCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.RetrieveCatalogObjectWithHttpInfo(System.String,System.Nullable{System.Boolean})">
             <summary>
             RetrieveCatalogObject
             </summary>
             <remarks>
             Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="objectId">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
             <param name="includeRelatedObjects">If `true`, the response will include additional objects that are related to the requested object, as follows:  If the `object` field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the response. If the `object` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of the response.  Default value: `false` (optional)</param>
             <returns>ApiResponse of RetrieveCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.SearchCatalogObjects(Square.Connect.Model.SearchCatalogObjectsRequest)">
             <summary>
             SearchCatalogObjects
             </summary>
             <remarks>
             Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>SearchCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.SearchCatalogObjectsWithHttpInfo(Square.Connect.Model.SearchCatalogObjectsRequest)">
             <summary>
             SearchCatalogObjects
             </summary>
             <remarks>
             Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of SearchCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpdateItemModifierLists(Square.Connect.Model.UpdateItemModifierListsRequest)">
             <summary>
             UpdateItemModifierLists
             </summary>
             <remarks>
             Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>UpdateItemModifierListsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpdateItemModifierListsWithHttpInfo(Square.Connect.Model.UpdateItemModifierListsRequest)">
             <summary>
             UpdateItemModifierLists
             </summary>
             <remarks>
             Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of UpdateItemModifierListsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpdateItemTaxes(Square.Connect.Model.UpdateItemTaxesRequest)">
             <summary>
             UpdateItemTaxes
             </summary>
             <remarks>
             Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>UpdateItemTaxesResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpdateItemTaxesWithHttpInfo(Square.Connect.Model.UpdateItemTaxesRequest)">
             <summary>
             UpdateItemTaxes
             </summary>
             <remarks>
             Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of UpdateItemTaxesResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpsertCatalogObject(Square.Connect.Model.UpsertCatalogObjectRequest)">
             <summary>
             UpsertCatalogObject
             </summary>
             <remarks>
             Creates or updates the target [CatalogObject](#type-catalogobject).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>UpsertCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpsertCatalogObjectWithHttpInfo(Square.Connect.Model.UpsertCatalogObjectRequest)">
             <summary>
             UpsertCatalogObject
             </summary>
             <remarks>
             Creates or updates the target [CatalogObject](#type-catalogobject).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of UpsertCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchDeleteCatalogObjectsAsync(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
             <summary>
             BatchDeleteCatalogObjects
             </summary>
             <remarks>
             Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of BatchDeleteCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchDeleteCatalogObjectsAsyncWithHttpInfo(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
             <summary>
             BatchDeleteCatalogObjects
             </summary>
             <remarks>
             Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (BatchDeleteCatalogObjectsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchRetrieveCatalogObjectsAsync(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
             <summary>
             BatchRetrieveCatalogObjects
             </summary>
             <remarks>
             Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of BatchRetrieveCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchRetrieveCatalogObjectsAsyncWithHttpInfo(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
             <summary>
             BatchRetrieveCatalogObjects
             </summary>
             <remarks>
             Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (BatchRetrieveCatalogObjectsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchUpsertCatalogObjectsAsync(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
             <summary>
             BatchUpsertCatalogObjects
             </summary>
             <remarks>
             Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of BatchUpsertCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.BatchUpsertCatalogObjectsAsyncWithHttpInfo(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
             <summary>
             BatchUpsertCatalogObjects
             </summary>
             <remarks>
             Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (BatchUpsertCatalogObjectsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.CatalogInfoAsync">
             <summary>
             CatalogInfo
             </summary>
             <remarks>
             Returns information about the Square Catalog API, such as batch size limits for `BatchUpsertCatalogObjects`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>Task of CatalogInfoResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.CatalogInfoAsyncWithHttpInfo">
             <summary>
             CatalogInfo
             </summary>
             <remarks>
             Returns information about the Square Catalog API, such as batch size limits for `BatchUpsertCatalogObjects`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>Task of ApiResponse (CatalogInfoResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.DeleteCatalogObjectAsync(System.String)">
             <summary>
             DeleteCatalogObject
             </summary>
             <remarks>
             Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="objectId">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
             <returns>Task of DeleteCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.DeleteCatalogObjectAsyncWithHttpInfo(System.String)">
             <summary>
             DeleteCatalogObject
             </summary>
             <remarks>
             Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="objectId">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
             <returns>Task of ApiResponse (DeleteCatalogObjectResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.ListCatalogAsync(System.String,System.String)">
             <summary>
             ListCatalog
             </summary>
             <remarks>
             Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The types parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example `ITEM,ITEM_VARIATION,CATEGORY`.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`. (optional)</param>
             <returns>Task of ListCatalogResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.ListCatalogAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             ListCatalog
             </summary>
             <remarks>
             Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The types parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example `ITEM,ITEM_VARIATION,CATEGORY`.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`. (optional)</param>
             <returns>Task of ApiResponse (ListCatalogResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.RetrieveCatalogObjectAsync(System.String,System.Nullable{System.Boolean})">
             <summary>
             RetrieveCatalogObject
             </summary>
             <remarks>
             Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="objectId">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
             <param name="includeRelatedObjects">If `true`, the response will include additional objects that are related to the requested object, as follows:  If the `object` field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the response. If the `object` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of the response.  Default value: `false` (optional)</param>
             <returns>Task of RetrieveCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.RetrieveCatalogObjectAsyncWithHttpInfo(System.String,System.Nullable{System.Boolean})">
             <summary>
             RetrieveCatalogObject
             </summary>
             <remarks>
             Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="objectId">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
             <param name="includeRelatedObjects">If `true`, the response will include additional objects that are related to the requested object, as follows:  If the `object` field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the response. If the `object` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of the response.  Default value: `false` (optional)</param>
             <returns>Task of ApiResponse (RetrieveCatalogObjectResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.SearchCatalogObjectsAsync(Square.Connect.Model.SearchCatalogObjectsRequest)">
             <summary>
             SearchCatalogObjects
             </summary>
             <remarks>
             Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of SearchCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.SearchCatalogObjectsAsyncWithHttpInfo(Square.Connect.Model.SearchCatalogObjectsRequest)">
             <summary>
             SearchCatalogObjects
             </summary>
             <remarks>
             Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (SearchCatalogObjectsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpdateItemModifierListsAsync(Square.Connect.Model.UpdateItemModifierListsRequest)">
             <summary>
             UpdateItemModifierLists
             </summary>
             <remarks>
             Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of UpdateItemModifierListsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpdateItemModifierListsAsyncWithHttpInfo(Square.Connect.Model.UpdateItemModifierListsRequest)">
             <summary>
             UpdateItemModifierLists
             </summary>
             <remarks>
             Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (UpdateItemModifierListsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpdateItemTaxesAsync(Square.Connect.Model.UpdateItemTaxesRequest)">
             <summary>
             UpdateItemTaxes
             </summary>
             <remarks>
             Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of UpdateItemTaxesResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpdateItemTaxesAsyncWithHttpInfo(Square.Connect.Model.UpdateItemTaxesRequest)">
             <summary>
             UpdateItemTaxes
             </summary>
             <remarks>
             Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (UpdateItemTaxesResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpsertCatalogObjectAsync(Square.Connect.Model.UpsertCatalogObjectRequest)">
             <summary>
             UpsertCatalogObject
             </summary>
             <remarks>
             Creates or updates the target [CatalogObject](#type-catalogobject).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of UpsertCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICatalogApi.UpsertCatalogObjectAsyncWithHttpInfo(Square.Connect.Model.UpsertCatalogObjectRequest)">
             <summary>
             UpsertCatalogObject
             </summary>
             <remarks>
             Creates or updates the target [CatalogObject](#type-catalogobject).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (UpsertCatalogObjectResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.CatalogApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.CatalogApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.CatalogApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.CatalogApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.CatalogApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchDeleteCatalogObjects(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
             <summary>
             BatchDeleteCatalogObjects Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>BatchDeleteCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchDeleteCatalogObjectsWithHttpInfo(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
             <summary>
             BatchDeleteCatalogObjects Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of BatchDeleteCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchDeleteCatalogObjectsAsync(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
             <summary>
             BatchDeleteCatalogObjects Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of BatchDeleteCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchDeleteCatalogObjectsAsyncWithHttpInfo(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
             <summary>
             BatchDeleteCatalogObjects Deletes a set of [CatalogItem](#type-catalogitem)s based on the provided list of target IDs and returns a set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a CatalogItem will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.  `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted IDs can be deleted. The response will only include IDs that were actually deleted.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (BatchDeleteCatalogObjectsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchRetrieveCatalogObjects(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
             <summary>
             BatchRetrieveCatalogObjects Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>BatchRetrieveCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchRetrieveCatalogObjectsWithHttpInfo(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
             <summary>
             BatchRetrieveCatalogObjects Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of BatchRetrieveCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchRetrieveCatalogObjectsAsync(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
             <summary>
             BatchRetrieveCatalogObjects Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of BatchRetrieveCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchRetrieveCatalogObjectsAsyncWithHttpInfo(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
             <summary>
             BatchRetrieveCatalogObjects Returns a set of objects based on the provided ID. Each [CatalogItem](#type-catalogitem) returned in the set includes all of its child information including: all of its [CatalogItemVariation](#type-catalogitemvariation) objects, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (BatchRetrieveCatalogObjectsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchUpsertCatalogObjects(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
             <summary>
             BatchUpsertCatalogObjects Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>BatchUpsertCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchUpsertCatalogObjectsWithHttpInfo(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
             <summary>
             BatchUpsertCatalogObjects Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of BatchUpsertCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchUpsertCatalogObjectsAsync(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
             <summary>
             BatchUpsertCatalogObjects Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of BatchUpsertCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.BatchUpsertCatalogObjectsAsyncWithHttpInfo(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
             <summary>
             BatchUpsertCatalogObjects Creates or updates up to 10,000 target objects based on the provided list of objects. The target objects are grouped into batches and each batch is inserted/updated in an all-or-nothing manner. If an object within a batch is malformed in some way, or violates a database constraint, the entire batch containing that item will be disregarded. However, other batches in the same request may still succeed. Each batch may contain up to 1,000 objects, and batches will be processed in order as long as the total object count for the request (items, variations, modifier lists, discounts, and taxes) is no more than 10,000.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (BatchUpsertCatalogObjectsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.CatalogInfo">
             <summary>
             CatalogInfo Returns information about the Square Catalog API, such as batch size limits for `BatchUpsertCatalogObjects`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>CatalogInfoResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.CatalogInfoWithHttpInfo">
             <summary>
             CatalogInfo Returns information about the Square Catalog API, such as batch size limits for `BatchUpsertCatalogObjects`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>ApiResponse of CatalogInfoResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.CatalogInfoAsync">
             <summary>
             CatalogInfo Returns information about the Square Catalog API, such as batch size limits for `BatchUpsertCatalogObjects`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>Task of CatalogInfoResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.CatalogInfoAsyncWithHttpInfo">
             <summary>
             CatalogInfo Returns information about the Square Catalog API, such as batch size limits for `BatchUpsertCatalogObjects`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>Task of ApiResponse (CatalogInfoResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.DeleteCatalogObject(System.String)">
             <summary>
             DeleteCatalogObject Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="objectId">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
             <returns>DeleteCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.DeleteCatalogObjectWithHttpInfo(System.String)">
             <summary>
             DeleteCatalogObject Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="objectId">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
             <returns>ApiResponse of DeleteCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.DeleteCatalogObjectAsync(System.String)">
             <summary>
             DeleteCatalogObject Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="objectId">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
             <returns>Task of DeleteCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.DeleteCatalogObjectAsyncWithHttpInfo(System.String)">
             <summary>
             DeleteCatalogObject Deletes a single [CatalogObject](#type-catalogobject) based on the provided ID and returns the set of successfully deleted IDs in the response. Deletion is a cascading event such that all children of the targeted object are also deleted. For example, deleting a [CatalogItem](#type-catalogitem) will also delete all of its [CatalogItemVariation](#type-catalogitemvariation) children.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="objectId">The ID of the [CatalogObject](#type-catalogobject) to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</param>
             <returns>Task of ApiResponse (DeleteCatalogObjectResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.ListCatalog(System.String,System.String)">
             <summary>
             ListCatalog Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The types parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example `ITEM,ITEM_VARIATION,CATEGORY`.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`. (optional)</param>
             <returns>ListCatalogResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.ListCatalogWithHttpInfo(System.String,System.String)">
             <summary>
             ListCatalog Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The types parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example `ITEM,ITEM_VARIATION,CATEGORY`.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`. (optional)</param>
             <returns>ApiResponse of ListCatalogResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.ListCatalogAsync(System.String,System.String)">
             <summary>
             ListCatalog Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The types parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example `ITEM,ITEM_VARIATION,CATEGORY`.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`. (optional)</param>
             <returns>Task of ListCatalogResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.ListCatalogAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             ListCatalog Returns a list of [CatalogObject](#type-catalogobject)s that includes all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem) and [CatalogTax](#type-catalogtax) objects) in the catalog. The types parameter is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types: `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <param name="types">An optional case-insensitive, comma-separated list of object types to retrieve, for example `ITEM,ITEM_VARIATION,CATEGORY`.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`. (optional)</param>
             <returns>Task of ApiResponse (ListCatalogResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.RetrieveCatalogObject(System.String,System.Nullable{System.Boolean})">
             <summary>
             RetrieveCatalogObject Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="objectId">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
             <param name="includeRelatedObjects">If `true`, the response will include additional objects that are related to the requested object, as follows:  If the `object` field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the response. If the `object` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of the response.  Default value: `false` (optional)</param>
             <returns>RetrieveCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.RetrieveCatalogObjectWithHttpInfo(System.String,System.Nullable{System.Boolean})">
             <summary>
             RetrieveCatalogObject Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="objectId">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
             <param name="includeRelatedObjects">If `true`, the response will include additional objects that are related to the requested object, as follows:  If the `object` field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the response. If the `object` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of the response.  Default value: `false` (optional)</param>
             <returns>ApiResponse of RetrieveCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.RetrieveCatalogObjectAsync(System.String,System.Nullable{System.Boolean})">
             <summary>
             RetrieveCatalogObject Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="objectId">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
             <param name="includeRelatedObjects">If `true`, the response will include additional objects that are related to the requested object, as follows:  If the `object` field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the response. If the `object` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of the response.  Default value: `false` (optional)</param>
             <returns>Task of RetrieveCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.RetrieveCatalogObjectAsyncWithHttpInfo(System.String,System.Nullable{System.Boolean})">
             <summary>
             RetrieveCatalogObject Returns a single [CatalogItem](#type-catalogitem) as a [CatalogObject](#type-catalogobject) based on the provided ID. The returned object includes all of the relevant [CatalogItem](#type-catalogitem) information including: [CatalogItemVariation](#type-catalogitemvariation) children, references to its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of any [CatalogTax](#type-catalogtax) objects that apply to it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="objectId">The object ID of any type of [CatalogObject](#type-catalogobject)s to be retrieved.</param>
             <param name="includeRelatedObjects">If `true`, the response will include additional objects that are related to the requested object, as follows:  If the `object` field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the response. If the `object` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of the response.  Default value: `false` (optional)</param>
             <returns>Task of ApiResponse (RetrieveCatalogObjectResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.SearchCatalogObjects(Square.Connect.Model.SearchCatalogObjectsRequest)">
             <summary>
             SearchCatalogObjects Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>SearchCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.SearchCatalogObjectsWithHttpInfo(Square.Connect.Model.SearchCatalogObjectsRequest)">
             <summary>
             SearchCatalogObjects Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of SearchCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.SearchCatalogObjectsAsync(Square.Connect.Model.SearchCatalogObjectsRequest)">
             <summary>
             SearchCatalogObjects Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of SearchCatalogObjectsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.SearchCatalogObjectsAsyncWithHttpInfo(Square.Connect.Model.SearchCatalogObjectsRequest)">
             <summary>
             SearchCatalogObjects Queries the targeted catalog using a variety of query types: [CatalogQuerySortedAttribute](#type-catalogquerysortedattribute), [CatalogQueryExact](#type-catalogqueryexact), [CatalogQueryRange](#type-catalogqueryrange), [CatalogQueryText](#type-catalogquerytext), [CatalogQueryItemsForTax](#type-catalogqueryitemsfortax), and [CatalogQueryItemsForModifierList](#type-catalogqueryitemsformodifierlist).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (SearchCatalogObjectsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpdateItemModifierLists(Square.Connect.Model.UpdateItemModifierListsRequest)">
             <summary>
             UpdateItemModifierLists Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>UpdateItemModifierListsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpdateItemModifierListsWithHttpInfo(Square.Connect.Model.UpdateItemModifierListsRequest)">
             <summary>
             UpdateItemModifierLists Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of UpdateItemModifierListsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpdateItemModifierListsAsync(Square.Connect.Model.UpdateItemModifierListsRequest)">
             <summary>
             UpdateItemModifierLists Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of UpdateItemModifierListsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpdateItemModifierListsAsyncWithHttpInfo(Square.Connect.Model.UpdateItemModifierListsRequest)">
             <summary>
             UpdateItemModifierLists Updates the [CatalogModifierList](#type-catalogmodifierlist) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (UpdateItemModifierListsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpdateItemTaxes(Square.Connect.Model.UpdateItemTaxesRequest)">
             <summary>
             UpdateItemTaxes Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>UpdateItemTaxesResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpdateItemTaxesWithHttpInfo(Square.Connect.Model.UpdateItemTaxesRequest)">
             <summary>
             UpdateItemTaxes Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of UpdateItemTaxesResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpdateItemTaxesAsync(Square.Connect.Model.UpdateItemTaxesRequest)">
             <summary>
             UpdateItemTaxes Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of UpdateItemTaxesResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpdateItemTaxesAsyncWithHttpInfo(Square.Connect.Model.UpdateItemTaxesRequest)">
             <summary>
             UpdateItemTaxes Updates the [CatalogTax](#type-catalogtax) objects that apply to the targeted [CatalogItem](#type-catalogitem) without having to perform an upsert on the entire item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (UpdateItemTaxesResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpsertCatalogObject(Square.Connect.Model.UpsertCatalogObjectRequest)">
             <summary>
             UpsertCatalogObject Creates or updates the target [CatalogObject](#type-catalogobject).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>UpsertCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpsertCatalogObjectWithHttpInfo(Square.Connect.Model.UpsertCatalogObjectRequest)">
             <summary>
             UpsertCatalogObject Creates or updates the target [CatalogObject](#type-catalogobject).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of UpsertCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpsertCatalogObjectAsync(Square.Connect.Model.UpsertCatalogObjectRequest)">
             <summary>
             UpsertCatalogObject Creates or updates the target [CatalogObject](#type-catalogobject).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of UpsertCatalogObjectResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CatalogApi.UpsertCatalogObjectAsyncWithHttpInfo(Square.Connect.Model.UpsertCatalogObjectRequest)">
             <summary>
             UpsertCatalogObject Creates or updates the target [CatalogObject](#type-catalogobject).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (UpsertCatalogObjectResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.ICheckoutApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ICheckoutApi.CreateCheckout(System.String,Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             CreateCheckout
             </summary>
             <remarks>
             Creates a [Checkout](#type-checkout) response that links a `checkoutId` and `checkout_page_url` that customers can be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the business location to associate the checkout with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateCheckoutResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICheckoutApi.CreateCheckoutWithHttpInfo(System.String,Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             CreateCheckout
             </summary>
             <remarks>
             Creates a [Checkout](#type-checkout) response that links a `checkoutId` and `checkout_page_url` that customers can be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the business location to associate the checkout with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateCheckoutResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICheckoutApi.CreateCheckoutAsync(System.String,Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             CreateCheckout
             </summary>
             <remarks>
             Creates a [Checkout](#type-checkout) response that links a `checkoutId` and `checkout_page_url` that customers can be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the business location to associate the checkout with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateCheckoutResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICheckoutApi.CreateCheckoutAsyncWithHttpInfo(System.String,Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             CreateCheckout
             </summary>
             <remarks>
             Creates a [Checkout](#type-checkout) response that links a `checkoutId` and `checkout_page_url` that customers can be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the business location to associate the checkout with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateCheckoutResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.CheckoutApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.CheckoutApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.CheckoutApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.CheckoutApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.CheckoutApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.CreateCheckout(System.String,Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             CreateCheckout Creates a [Checkout](#type-checkout) response that links a `checkoutId` and `checkout_page_url` that customers can be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the business location to associate the checkout with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateCheckoutResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.CreateCheckoutWithHttpInfo(System.String,Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             CreateCheckout Creates a [Checkout](#type-checkout) response that links a `checkoutId` and `checkout_page_url` that customers can be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the business location to associate the checkout with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateCheckoutResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.CreateCheckoutAsync(System.String,Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             CreateCheckout Creates a [Checkout](#type-checkout) response that links a `checkoutId` and `checkout_page_url` that customers can be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the business location to associate the checkout with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateCheckoutResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CheckoutApi.CreateCheckoutAsyncWithHttpInfo(System.String,Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             CreateCheckout Creates a [Checkout](#type-checkout) response that links a `checkoutId` and `checkout_page_url` that customers can be directed to in order to provide their payment information using a payment processing workflow hosted on connect.squareup.com.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the business location to associate the checkout with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateCheckoutResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.ICustomersApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.CreateCustomer(Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer
             </summary>
             <remarks>
             Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.CreateCustomerWithHttpInfo(Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer
             </summary>
             <remarks>
             Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.CreateCustomerCard(System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard
             </summary>
             <remarks>
             Adds a card on file to an existing customer. In the United States Square takes care of automatically updating any cards on file that might have expired since you first attached them to a customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to link the card on file to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.CreateCustomerCardWithHttpInfo(System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard
             </summary>
             <remarks>
             Adds a card on file to an existing customer. In the United States Square takes care of automatically updating any cards on file that might have expired since you first attached them to a customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to link the card on file to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.DeleteCustomer(System.String)">
             <summary>
             DeleteCustomer
             </summary>
             <remarks>
             Deletes a customer from a business, along with any linked cards on file.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to delete.</param>
             <returns>DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.DeleteCustomerWithHttpInfo(System.String)">
             <summary>
             DeleteCustomer
             </summary>
             <remarks>
             Deletes a customer from a business, along with any linked cards on file.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to delete.</param>
             <returns>ApiResponse of DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.DeleteCustomerCard(System.String,System.String)">
             <summary>
             DeleteCustomerCard
             </summary>
             <remarks>
             Removes a card on file from a customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer that the card on file belongs to.</param>
             <param name="cardId">The ID of the card on file to delete.</param>
             <returns>DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.DeleteCustomerCardWithHttpInfo(System.String,System.String)">
             <summary>
             DeleteCustomerCard
             </summary>
             <remarks>
             Removes a card on file from a customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer that the card on file belongs to.</param>
             <param name="cardId">The ID of the card on file to delete.</param>
             <returns>ApiResponse of DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.ListCustomers(System.String)">
             <summary>
             ListCustomers
             </summary>
             <remarks>
             Lists a business's customers.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.ListCustomersWithHttpInfo(System.String)">
             <summary>
             ListCustomers
             </summary>
             <remarks>
             Lists a business's customers.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ApiResponse of ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.RetrieveCustomer(System.String)">
             <summary>
             RetrieveCustomer
             </summary>
             <remarks>
             Returns details for a single customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to retrieve.</param>
             <returns>RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.RetrieveCustomerWithHttpInfo(System.String)">
             <summary>
             RetrieveCustomer
             </summary>
             <remarks>
             Returns details for a single customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to retrieve.</param>
             <returns>ApiResponse of RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.UpdateCustomer(System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer
             </summary>
             <remarks>
             Updates the details of an existing customer. The ID of the customer may change if the customer has been merged into another customer.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.UpdateCustomerWithHttpInfo(System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer
             </summary>
             <remarks>
             Updates the details of an existing customer. The ID of the customer may change if the customer has been merged into another customer.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.CreateCustomerAsync(Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer
             </summary>
             <remarks>
             Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.CreateCustomerAsyncWithHttpInfo(Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer
             </summary>
             <remarks>
             Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.CreateCustomerCardAsync(System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard
             </summary>
             <remarks>
             Adds a card on file to an existing customer. In the United States Square takes care of automatically updating any cards on file that might have expired since you first attached them to a customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to link the card on file to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.CreateCustomerCardAsyncWithHttpInfo(System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard
             </summary>
             <remarks>
             Adds a card on file to an existing customer. In the United States Square takes care of automatically updating any cards on file that might have expired since you first attached them to a customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to link the card on file to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateCustomerCardResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.DeleteCustomerAsync(System.String)">
             <summary>
             DeleteCustomer
             </summary>
             <remarks>
             Deletes a customer from a business, along with any linked cards on file.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to delete.</param>
             <returns>Task of DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.DeleteCustomerAsyncWithHttpInfo(System.String)">
             <summary>
             DeleteCustomer
             </summary>
             <remarks>
             Deletes a customer from a business, along with any linked cards on file.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to delete.</param>
             <returns>Task of ApiResponse (DeleteCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.DeleteCustomerCardAsync(System.String,System.String)">
             <summary>
             DeleteCustomerCard
             </summary>
             <remarks>
             Removes a card on file from a customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer that the card on file belongs to.</param>
             <param name="cardId">The ID of the card on file to delete.</param>
             <returns>Task of DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.DeleteCustomerCardAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             DeleteCustomerCard
             </summary>
             <remarks>
             Removes a card on file from a customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer that the card on file belongs to.</param>
             <param name="cardId">The ID of the card on file to delete.</param>
             <returns>Task of ApiResponse (DeleteCustomerCardResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.ListCustomersAsync(System.String)">
             <summary>
             ListCustomers
             </summary>
             <remarks>
             Lists a business's customers.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.ListCustomersAsyncWithHttpInfo(System.String)">
             <summary>
             ListCustomers
             </summary>
             <remarks>
             Lists a business's customers.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ApiResponse (ListCustomersResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.RetrieveCustomerAsync(System.String)">
             <summary>
             RetrieveCustomer
             </summary>
             <remarks>
             Returns details for a single customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to retrieve.</param>
             <returns>Task of RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.RetrieveCustomerAsyncWithHttpInfo(System.String)">
             <summary>
             RetrieveCustomer
             </summary>
             <remarks>
             Returns details for a single customer.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to retrieve.</param>
             <returns>Task of ApiResponse (RetrieveCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.UpdateCustomerAsync(System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer
             </summary>
             <remarks>
             Updates the details of an existing customer. The ID of the customer may change if the customer has been merged into another customer.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ICustomersApi.UpdateCustomerAsyncWithHttpInfo(System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer
             </summary>
             <remarks>
             Updates the details of an existing customer. The ID of the customer may change if the customer has been merged into another customer.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (UpdateCustomerResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.CustomersApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.CustomersApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.CustomersApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.CustomersApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.CustomersApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.CreateCustomer(Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.CreateCustomerWithHttpInfo(Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.CreateCustomerAsync(Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.CreateCustomerAsyncWithHttpInfo(Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             CreateCustomer Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - `given_name` - `family_name` - `company_name` - `email_address` - `phone_number`  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.CreateCustomerCard(System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard Adds a card on file to an existing customer. In the United States Square takes care of automatically updating any cards on file that might have expired since you first attached them to a customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to link the card on file to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.CreateCustomerCardWithHttpInfo(System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard Adds a card on file to an existing customer. In the United States Square takes care of automatically updating any cards on file that might have expired since you first attached them to a customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to link the card on file to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.CreateCustomerCardAsync(System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard Adds a card on file to an existing customer. In the United States Square takes care of automatically updating any cards on file that might have expired since you first attached them to a customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to link the card on file to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.CreateCustomerCardAsyncWithHttpInfo(System.String,Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             CreateCustomerCard Adds a card on file to an existing customer. In the United States Square takes care of automatically updating any cards on file that might have expired since you first attached them to a customer.  As with charges, calls to `CreateCustomerCard` are idempotent. Multiple calls with the same card nonce return the same card record that was created with the provided nonce during the _first_ call.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to link the card on file to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateCustomerCardResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.DeleteCustomer(System.String)">
             <summary>
             DeleteCustomer Deletes a customer from a business, along with any linked cards on file.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to delete.</param>
             <returns>DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.DeleteCustomerWithHttpInfo(System.String)">
             <summary>
             DeleteCustomer Deletes a customer from a business, along with any linked cards on file.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to delete.</param>
             <returns>ApiResponse of DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.DeleteCustomerAsync(System.String)">
             <summary>
             DeleteCustomer Deletes a customer from a business, along with any linked cards on file.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to delete.</param>
             <returns>Task of DeleteCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.DeleteCustomerAsyncWithHttpInfo(System.String)">
             <summary>
             DeleteCustomer Deletes a customer from a business, along with any linked cards on file.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to delete.</param>
             <returns>Task of ApiResponse (DeleteCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.DeleteCustomerCard(System.String,System.String)">
             <summary>
             DeleteCustomerCard Removes a card on file from a customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer that the card on file belongs to.</param>
             <param name="cardId">The ID of the card on file to delete.</param>
             <returns>DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.DeleteCustomerCardWithHttpInfo(System.String,System.String)">
             <summary>
             DeleteCustomerCard Removes a card on file from a customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer that the card on file belongs to.</param>
             <param name="cardId">The ID of the card on file to delete.</param>
             <returns>ApiResponse of DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.DeleteCustomerCardAsync(System.String,System.String)">
             <summary>
             DeleteCustomerCard Removes a card on file from a customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer that the card on file belongs to.</param>
             <param name="cardId">The ID of the card on file to delete.</param>
             <returns>Task of DeleteCustomerCardResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.DeleteCustomerCardAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             DeleteCustomerCard Removes a card on file from a customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer that the card on file belongs to.</param>
             <param name="cardId">The ID of the card on file to delete.</param>
             <returns>Task of ApiResponse (DeleteCustomerCardResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.ListCustomers(System.String)">
             <summary>
             ListCustomers Lists a business's customers.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.ListCustomersWithHttpInfo(System.String)">
             <summary>
             ListCustomers Lists a business's customers.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ApiResponse of ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.ListCustomersAsync(System.String)">
             <summary>
             ListCustomers Lists a business's customers.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ListCustomersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.ListCustomersAsyncWithHttpInfo(System.String)">
             <summary>
             ListCustomers Lists a business's customers.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ApiResponse (ListCustomersResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.RetrieveCustomer(System.String)">
             <summary>
             RetrieveCustomer Returns details for a single customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to retrieve.</param>
             <returns>RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.RetrieveCustomerWithHttpInfo(System.String)">
             <summary>
             RetrieveCustomer Returns details for a single customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to retrieve.</param>
             <returns>ApiResponse of RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.RetrieveCustomerAsync(System.String)">
             <summary>
             RetrieveCustomer Returns details for a single customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to retrieve.</param>
             <returns>Task of RetrieveCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.RetrieveCustomerAsyncWithHttpInfo(System.String)">
             <summary>
             RetrieveCustomer Returns details for a single customer.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to retrieve.</param>
             <returns>Task of ApiResponse (RetrieveCustomerResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.UpdateCustomer(System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer Updates the details of an existing customer. The ID of the customer may change if the customer has been merged into another customer.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.UpdateCustomerWithHttpInfo(System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer Updates the details of an existing customer. The ID of the customer may change if the customer has been merged into another customer.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.UpdateCustomerAsync(System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer Updates the details of an existing customer. The ID of the customer may change if the customer has been merged into another customer.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of UpdateCustomerResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.CustomersApi.UpdateCustomerAsyncWithHttpInfo(System.String,Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             UpdateCustomer Updates the details of an existing customer. The ID of the customer may change if the customer has been merged into another customer.  You cannot edit a customer's cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="customerId">The ID of the customer to update.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (UpdateCustomerResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.ILocationsApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ILocationsApi.ListLocations">
             <summary>
             ListLocations
             </summary>
             <remarks>
             Provides the details for all of a business's locations.  Most other Connect API endpoints have a required `location_id` path parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ILocationsApi.ListLocationsWithHttpInfo">
             <summary>
             ListLocations
             </summary>
             <remarks>
             Provides the details for all of a business's locations.  Most other Connect API endpoints have a required `location_id` path parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>ApiResponse of ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ILocationsApi.ListLocationsAsync">
             <summary>
             ListLocations
             </summary>
             <remarks>
             Provides the details for all of a business's locations.  Most other Connect API endpoints have a required `location_id` path parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>Task of ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ILocationsApi.ListLocationsAsyncWithHttpInfo">
             <summary>
             ListLocations
             </summary>
             <remarks>
             Provides the details for all of a business's locations.  Most other Connect API endpoints have a required `location_id` path parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>Task of ApiResponse (ListLocationsResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.LocationsApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.LocationsApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.LocationsApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.LocationsApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.LocationsApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.LocationsApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.LocationsApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.LocationsApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.LocationsApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.LocationsApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.LocationsApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.LocationsApi.ListLocations">
             <summary>
             ListLocations Provides the details for all of a business's locations.  Most other Connect API endpoints have a required `location_id` path parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.LocationsApi.ListLocationsWithHttpInfo">
             <summary>
             ListLocations Provides the details for all of a business's locations.  Most other Connect API endpoints have a required `location_id` path parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>ApiResponse of ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.LocationsApi.ListLocationsAsync">
             <summary>
             ListLocations Provides the details for all of a business's locations.  Most other Connect API endpoints have a required `location_id` path parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>Task of ListLocationsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.LocationsApi.ListLocationsAsyncWithHttpInfo">
             <summary>
             ListLocations Provides the details for all of a business's locations.  Most other Connect API endpoints have a required `location_id` path parameter. The `id` field of the [`Location`](#type-location) objects returned by this endpoint correspond to that `location_id` parameter.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>Task of ApiResponse (ListLocationsResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.IOrdersApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.IOrdersApi.BatchRetrieveOrders(System.String,Square.Connect.Model.BatchRetrieveOrdersRequest)">
             <summary>
             BatchRetrieveOrders
             </summary>
             <remarks>
             Retrieves a set of [Order](#type-order)s by their IDs. Only orders that have been successfully charged are included in the response.  If any of the order IDs in the request do not exist, or are associated with uncharged orders, then those orders will not be included in the set of orders in the response.  Note that in the future, uncharged orders may be returned by this endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the orders' associated location.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>BatchRetrieveOrdersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IOrdersApi.BatchRetrieveOrdersWithHttpInfo(System.String,Square.Connect.Model.BatchRetrieveOrdersRequest)">
             <summary>
             BatchRetrieveOrders
             </summary>
             <remarks>
             Retrieves a set of [Order](#type-order)s by their IDs. Only orders that have been successfully charged are included in the response.  If any of the order IDs in the request do not exist, or are associated with uncharged orders, then those orders will not be included in the set of orders in the response.  Note that in the future, uncharged orders may be returned by this endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the orders' associated location.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of BatchRetrieveOrdersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IOrdersApi.CreateOrder(System.String,Square.Connect.Model.CreateOrderRequest)">
             <summary>
             CreateOrder
             </summary>
             <remarks>
             Creates an [Order](#type-order) that can then be referenced as `order_id` in a request to the [Charge](#endpoint-charge) endpoint. Orders specify products for purchase, along with discounts, taxes, and other settings to apply to the purchase.  To associate a created order with a request to the Charge endpoint, provide the order's `id` in the `order_id` field of your request.  You cannot modify an order after you create it. If you need to modify an order, instead create a new order with modified details.  To learn more about the Orders API, see the [Orders API Overview](https://docs.connect.squareup.com/articles/orders-api-overview).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the business location to associate the order with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateOrderResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IOrdersApi.CreateOrderWithHttpInfo(System.String,Square.Connect.Model.CreateOrderRequest)">
             <summary>
             CreateOrder
             </summary>
             <remarks>
             Creates an [Order](#type-order) that can then be referenced as `order_id` in a request to the [Charge](#endpoint-charge) endpoint. Orders specify products for purchase, along with discounts, taxes, and other settings to apply to the purchase.  To associate a created order with a request to the Charge endpoint, provide the order's `id` in the `order_id` field of your request.  You cannot modify an order after you create it. If you need to modify an order, instead create a new order with modified details.  To learn more about the Orders API, see the [Orders API Overview](https://docs.connect.squareup.com/articles/orders-api-overview).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the business location to associate the order with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateOrderResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IOrdersApi.BatchRetrieveOrdersAsync(System.String,Square.Connect.Model.BatchRetrieveOrdersRequest)">
             <summary>
             BatchRetrieveOrders
             </summary>
             <remarks>
             Retrieves a set of [Order](#type-order)s by their IDs. Only orders that have been successfully charged are included in the response.  If any of the order IDs in the request do not exist, or are associated with uncharged orders, then those orders will not be included in the set of orders in the response.  Note that in the future, uncharged orders may be returned by this endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the orders' associated location.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of BatchRetrieveOrdersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IOrdersApi.BatchRetrieveOrdersAsyncWithHttpInfo(System.String,Square.Connect.Model.BatchRetrieveOrdersRequest)">
             <summary>
             BatchRetrieveOrders
             </summary>
             <remarks>
             Retrieves a set of [Order](#type-order)s by their IDs. Only orders that have been successfully charged are included in the response.  If any of the order IDs in the request do not exist, or are associated with uncharged orders, then those orders will not be included in the set of orders in the response.  Note that in the future, uncharged orders may be returned by this endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the orders' associated location.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (BatchRetrieveOrdersResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.IOrdersApi.CreateOrderAsync(System.String,Square.Connect.Model.CreateOrderRequest)">
             <summary>
             CreateOrder
             </summary>
             <remarks>
             Creates an [Order](#type-order) that can then be referenced as `order_id` in a request to the [Charge](#endpoint-charge) endpoint. Orders specify products for purchase, along with discounts, taxes, and other settings to apply to the purchase.  To associate a created order with a request to the Charge endpoint, provide the order's `id` in the `order_id` field of your request.  You cannot modify an order after you create it. If you need to modify an order, instead create a new order with modified details.  To learn more about the Orders API, see the [Orders API Overview](https://docs.connect.squareup.com/articles/orders-api-overview).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the business location to associate the order with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateOrderResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IOrdersApi.CreateOrderAsyncWithHttpInfo(System.String,Square.Connect.Model.CreateOrderRequest)">
             <summary>
             CreateOrder
             </summary>
             <remarks>
             Creates an [Order](#type-order) that can then be referenced as `order_id` in a request to the [Charge](#endpoint-charge) endpoint. Orders specify products for purchase, along with discounts, taxes, and other settings to apply to the purchase.  To associate a created order with a request to the Charge endpoint, provide the order's `id` in the `order_id` field of your request.  You cannot modify an order after you create it. If you need to modify an order, instead create a new order with modified details.  To learn more about the Orders API, see the [Orders API Overview](https://docs.connect.squareup.com/articles/orders-api-overview).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the business location to associate the order with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateOrderResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.OrdersApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.OrdersApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.OrdersApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.OrdersApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.OrdersApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.OrdersApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.OrdersApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.OrdersApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.OrdersApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.OrdersApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.OrdersApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.OrdersApi.BatchRetrieveOrders(System.String,Square.Connect.Model.BatchRetrieveOrdersRequest)">
             <summary>
             BatchRetrieveOrders Retrieves a set of [Order](#type-order)s by their IDs. Only orders that have been successfully charged are included in the response.  If any of the order IDs in the request do not exist, or are associated with uncharged orders, then those orders will not be included in the set of orders in the response.  Note that in the future, uncharged orders may be returned by this endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the orders' associated location.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>BatchRetrieveOrdersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.OrdersApi.BatchRetrieveOrdersWithHttpInfo(System.String,Square.Connect.Model.BatchRetrieveOrdersRequest)">
             <summary>
             BatchRetrieveOrders Retrieves a set of [Order](#type-order)s by their IDs. Only orders that have been successfully charged are included in the response.  If any of the order IDs in the request do not exist, or are associated with uncharged orders, then those orders will not be included in the set of orders in the response.  Note that in the future, uncharged orders may be returned by this endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the orders' associated location.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of BatchRetrieveOrdersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.OrdersApi.BatchRetrieveOrdersAsync(System.String,Square.Connect.Model.BatchRetrieveOrdersRequest)">
             <summary>
             BatchRetrieveOrders Retrieves a set of [Order](#type-order)s by their IDs. Only orders that have been successfully charged are included in the response.  If any of the order IDs in the request do not exist, or are associated with uncharged orders, then those orders will not be included in the set of orders in the response.  Note that in the future, uncharged orders may be returned by this endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the orders' associated location.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of BatchRetrieveOrdersResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.OrdersApi.BatchRetrieveOrdersAsyncWithHttpInfo(System.String,Square.Connect.Model.BatchRetrieveOrdersRequest)">
             <summary>
             BatchRetrieveOrders Retrieves a set of [Order](#type-order)s by their IDs. Only orders that have been successfully charged are included in the response.  If any of the order IDs in the request do not exist, or are associated with uncharged orders, then those orders will not be included in the set of orders in the response.  Note that in the future, uncharged orders may be returned by this endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the orders' associated location.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (BatchRetrieveOrdersResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.OrdersApi.CreateOrder(System.String,Square.Connect.Model.CreateOrderRequest)">
             <summary>
             CreateOrder Creates an [Order](#type-order) that can then be referenced as `order_id` in a request to the [Charge](#endpoint-charge) endpoint. Orders specify products for purchase, along with discounts, taxes, and other settings to apply to the purchase.  To associate a created order with a request to the Charge endpoint, provide the order's `id` in the `order_id` field of your request.  You cannot modify an order after you create it. If you need to modify an order, instead create a new order with modified details.  To learn more about the Orders API, see the [Orders API Overview](https://docs.connect.squareup.com/articles/orders-api-overview).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the business location to associate the order with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateOrderResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.OrdersApi.CreateOrderWithHttpInfo(System.String,Square.Connect.Model.CreateOrderRequest)">
             <summary>
             CreateOrder Creates an [Order](#type-order) that can then be referenced as `order_id` in a request to the [Charge](#endpoint-charge) endpoint. Orders specify products for purchase, along with discounts, taxes, and other settings to apply to the purchase.  To associate a created order with a request to the Charge endpoint, provide the order's `id` in the `order_id` field of your request.  You cannot modify an order after you create it. If you need to modify an order, instead create a new order with modified details.  To learn more about the Orders API, see the [Orders API Overview](https://docs.connect.squareup.com/articles/orders-api-overview).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the business location to associate the order with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateOrderResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.OrdersApi.CreateOrderAsync(System.String,Square.Connect.Model.CreateOrderRequest)">
             <summary>
             CreateOrder Creates an [Order](#type-order) that can then be referenced as `order_id` in a request to the [Charge](#endpoint-charge) endpoint. Orders specify products for purchase, along with discounts, taxes, and other settings to apply to the purchase.  To associate a created order with a request to the Charge endpoint, provide the order's `id` in the `order_id` field of your request.  You cannot modify an order after you create it. If you need to modify an order, instead create a new order with modified details.  To learn more about the Orders API, see the [Orders API Overview](https://docs.connect.squareup.com/articles/orders-api-overview).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the business location to associate the order with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateOrderResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.OrdersApi.CreateOrderAsyncWithHttpInfo(System.String,Square.Connect.Model.CreateOrderRequest)">
             <summary>
             CreateOrder Creates an [Order](#type-order) that can then be referenced as `order_id` in a request to the [Charge](#endpoint-charge) endpoint. Orders specify products for purchase, along with discounts, taxes, and other settings to apply to the purchase.  To associate a created order with a request to the Charge endpoint, provide the order's `id` in the `order_id` field of your request.  You cannot modify an order after you create it. If you need to modify an order, instead create a new order with modified details.  To learn more about the Orders API, see the [Orders API Overview](https://docs.connect.squareup.com/articles/orders-api-overview).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the business location to associate the order with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateOrderResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.IReportingApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.IReportingApi.ListAdditionalRecipientReceivableRefunds(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListAdditionalRecipientReceivableRefunds
             </summary>
             <remarks>
             Returns a list of refunded transactions (across all possible originating locations) relating to monies credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list AdditionalRecipientReceivableRefunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ListAdditionalRecipientReceivableRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IReportingApi.ListAdditionalRecipientReceivableRefundsWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListAdditionalRecipientReceivableRefunds
             </summary>
             <remarks>
             Returns a list of refunded transactions (across all possible originating locations) relating to monies credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list AdditionalRecipientReceivableRefunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ApiResponse of ListAdditionalRecipientReceivableRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IReportingApi.ListAdditionalRecipientReceivables(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListAdditionalRecipientReceivables
             </summary>
             <remarks>
             Returns a list of receivables (across all possible sending locations) representing monies credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list AdditionalRecipientReceivables for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ListAdditionalRecipientReceivablesResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IReportingApi.ListAdditionalRecipientReceivablesWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListAdditionalRecipientReceivables
             </summary>
             <remarks>
             Returns a list of receivables (across all possible sending locations) representing monies credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list AdditionalRecipientReceivables for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ApiResponse of ListAdditionalRecipientReceivablesResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IReportingApi.ListAdditionalRecipientReceivableRefundsAsync(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListAdditionalRecipientReceivableRefunds
             </summary>
             <remarks>
             Returns a list of refunded transactions (across all possible originating locations) relating to monies credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list AdditionalRecipientReceivableRefunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ListAdditionalRecipientReceivableRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IReportingApi.ListAdditionalRecipientReceivableRefundsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListAdditionalRecipientReceivableRefunds
             </summary>
             <remarks>
             Returns a list of refunded transactions (across all possible originating locations) relating to monies credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list AdditionalRecipientReceivableRefunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ApiResponse (ListAdditionalRecipientReceivableRefundsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.IReportingApi.ListAdditionalRecipientReceivablesAsync(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListAdditionalRecipientReceivables
             </summary>
             <remarks>
             Returns a list of receivables (across all possible sending locations) representing monies credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list AdditionalRecipientReceivables for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ListAdditionalRecipientReceivablesResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.IReportingApi.ListAdditionalRecipientReceivablesAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListAdditionalRecipientReceivables
             </summary>
             <remarks>
             Returns a list of receivables (across all possible sending locations) representing monies credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list AdditionalRecipientReceivables for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ApiResponse (ListAdditionalRecipientReceivablesResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.ReportingApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ReportingApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.ReportingApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.ReportingApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.ReportingApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.ReportingApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.ReportingApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.ReportingApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.ReportingApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ReportingApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.ReportingApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.ReportingApi.ListAdditionalRecipientReceivableRefunds(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListAdditionalRecipientReceivableRefunds Returns a list of refunded transactions (across all possible originating locations) relating to monies credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list AdditionalRecipientReceivableRefunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ListAdditionalRecipientReceivableRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ReportingApi.ListAdditionalRecipientReceivableRefundsWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListAdditionalRecipientReceivableRefunds Returns a list of refunded transactions (across all possible originating locations) relating to monies credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list AdditionalRecipientReceivableRefunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ApiResponse of ListAdditionalRecipientReceivableRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ReportingApi.ListAdditionalRecipientReceivableRefundsAsync(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListAdditionalRecipientReceivableRefunds Returns a list of refunded transactions (across all possible originating locations) relating to monies credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list AdditionalRecipientReceivableRefunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ListAdditionalRecipientReceivableRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ReportingApi.ListAdditionalRecipientReceivableRefundsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListAdditionalRecipientReceivableRefunds Returns a list of refunded transactions (across all possible originating locations) relating to monies credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list AdditionalRecipientReceivableRefunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ApiResponse (ListAdditionalRecipientReceivableRefundsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ReportingApi.ListAdditionalRecipientReceivables(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListAdditionalRecipientReceivables Returns a list of receivables (across all possible sending locations) representing monies credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list AdditionalRecipientReceivables for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ListAdditionalRecipientReceivablesResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ReportingApi.ListAdditionalRecipientReceivablesWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListAdditionalRecipientReceivables Returns a list of receivables (across all possible sending locations) representing monies credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list AdditionalRecipientReceivables for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ApiResponse of ListAdditionalRecipientReceivablesResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ReportingApi.ListAdditionalRecipientReceivablesAsync(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListAdditionalRecipientReceivables Returns a list of receivables (across all possible sending locations) representing monies credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list AdditionalRecipientReceivables for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ListAdditionalRecipientReceivablesResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ReportingApi.ListAdditionalRecipientReceivablesAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListAdditionalRecipientReceivables Returns a list of receivables (across all possible sending locations) representing monies credited to the provided location ID by another Square account using the `additional_recipients` field in a transaction.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list AdditionalRecipientReceivables for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ApiResponse (ListAdditionalRecipientReceivablesResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.ITransactionsApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.CaptureTransaction(System.String,System.String)">
             <summary>
             CaptureTransaction
             </summary>
             <remarks>
             Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.CaptureTransactionWithHttpInfo(System.String,System.String)">
             <summary>
             CaptureTransaction
             </summary>
             <remarks>
             Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>ApiResponse of CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.Charge(System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge
             </summary>
             <remarks>
             Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to associate the created transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ChargeWithHttpInfo(System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge
             </summary>
             <remarks>
             Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to associate the created transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.CreateRefund(System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund
             </summary>
             <remarks>
             Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.CreateRefundWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund
             </summary>
             <remarks>
             Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ListRefunds(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds
             </summary>
             <remarks>
             Lists refunds for one of a business's locations.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ListRefundsWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds
             </summary>
             <remarks>
             Lists refunds for one of a business's locations.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ApiResponse of ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ListTransactions(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions
             </summary>
             <remarks>
             Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ListTransactionsWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions
             </summary>
             <remarks>
             Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ApiResponse of ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.RetrieveTransaction(System.String,System.String)">
             <summary>
             RetrieveTransaction
             </summary>
             <remarks>
             Retrieves details for a single transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the transaction's associated location.</param>
             <param name="transactionId">The ID of the transaction to retrieve.</param>
             <returns>RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.RetrieveTransactionWithHttpInfo(System.String,System.String)">
             <summary>
             RetrieveTransaction
             </summary>
             <remarks>
             Retrieves details for a single transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the transaction's associated location.</param>
             <param name="transactionId">The ID of the transaction to retrieve.</param>
             <returns>ApiResponse of RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.VoidTransaction(System.String,System.String)">
             <summary>
             VoidTransaction
             </summary>
             <remarks>
             Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.VoidTransactionWithHttpInfo(System.String,System.String)">
             <summary>
             VoidTransaction
             </summary>
             <remarks>
             Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>ApiResponse of VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.CaptureTransactionAsync(System.String,System.String)">
             <summary>
             CaptureTransaction
             </summary>
             <remarks>
             Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.CaptureTransactionAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             CaptureTransaction
             </summary>
             <remarks>
             Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of ApiResponse (CaptureTransactionResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ChargeAsync(System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge
             </summary>
             <remarks>
             Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to associate the created transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ChargeAsyncWithHttpInfo(System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge
             </summary>
             <remarks>
             Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to associate the created transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (ChargeResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.CreateRefundAsync(System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund
             </summary>
             <remarks>
             Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.CreateRefundAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund
             </summary>
             <remarks>
             Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateRefundResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ListRefundsAsync(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds
             </summary>
             <remarks>
             Lists refunds for one of a business's locations.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ListRefundsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds
             </summary>
             <remarks>
             Lists refunds for one of a business's locations.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ApiResponse (ListRefundsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ListTransactionsAsync(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions
             </summary>
             <remarks>
             Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.ListTransactionsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions
             </summary>
             <remarks>
             Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ApiResponse (ListTransactionsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.RetrieveTransactionAsync(System.String,System.String)">
             <summary>
             RetrieveTransaction
             </summary>
             <remarks>
             Retrieves details for a single transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the transaction's associated location.</param>
             <param name="transactionId">The ID of the transaction to retrieve.</param>
             <returns>Task of RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.RetrieveTransactionAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             RetrieveTransaction
             </summary>
             <remarks>
             Retrieves details for a single transaction.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the transaction's associated location.</param>
             <param name="transactionId">The ID of the transaction to retrieve.</param>
             <returns>Task of ApiResponse (RetrieveTransactionResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.VoidTransactionAsync(System.String,System.String)">
             <summary>
             VoidTransaction
             </summary>
             <remarks>
             Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.ITransactionsApi.VoidTransactionAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             VoidTransaction
             </summary>
             <remarks>
             Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of ApiResponse (VoidTransactionResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.TransactionsApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.TransactionsApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.TransactionsApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.TransactionsApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.TransactionsApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.CaptureTransaction(System.String,System.String)">
             <summary>
             CaptureTransaction Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.CaptureTransactionWithHttpInfo(System.String,System.String)">
             <summary>
             CaptureTransaction Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>ApiResponse of CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.CaptureTransactionAsync(System.String,System.String)">
             <summary>
             CaptureTransaction Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of CaptureTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.CaptureTransactionAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             CaptureTransaction Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of ApiResponse (CaptureTransactionResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.Charge(System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to associate the created transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ChargeWithHttpInfo(System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to associate the created transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ChargeAsync(System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to associate the created transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ChargeResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ChargeAsyncWithHttpInfo(System.String,Square.Connect.Model.ChargeRequest)">
             <summary>
             Charge Charges a card represented by a card nonce or a customer's card on file.  Your request to this endpoint must include _either_:  - A value for the `card_nonce` parameter (to charge a card nonce generated with the `SqPaymentForm`) - Values for the `customer_card_id` and `customer_id` parameters (to charge a customer's card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - `buyer_email_address` - At least one of `billing_address` or `shipping_address`  When this response is returned, the amount of Square's processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money` field of each [Tender included](#type-tender) in the transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to associate the created transaction with.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (ChargeResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.CreateRefund(System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.CreateRefundWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.CreateRefundAsync(System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of CreateRefundResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.CreateRefundAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.CreateRefundRequest)">
             <summary>
             CreateRefund Initiates a refund for a previously charged tender.  You must issue a refund within 120 days of the associated payment. See [this article](https://squareup.com/help/us/en/article/5060) for more information on refund behavior.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the original transaction's associated location.</param>
             <param name="transactionId">The ID of the original transaction that includes the tender to refund.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (CreateRefundResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ListRefunds(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds Lists refunds for one of a business's locations.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ListRefundsWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds Lists refunds for one of a business's locations.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ApiResponse of ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ListRefundsAsync(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds Lists refunds for one of a business's locations.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ListRefundsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ListRefundsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListRefunds Lists refunds for one of a business's locations.  Refunds with a `status` of `PENDING` are not currently included in this endpoint's response.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ApiResponse (ListRefundsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ListTransactions(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ListTransactionsWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>ApiResponse of ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ListTransactionsAsync(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ListTransactionsResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.ListTransactionsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             ListTransactions Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list transactions for.</param>
             <param name="beginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time. (optional)</param>
             <param name="sortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC` (optional)</param>
             <param name="cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information. (optional)</param>
             <returns>Task of ApiResponse (ListTransactionsResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.RetrieveTransaction(System.String,System.String)">
             <summary>
             RetrieveTransaction Retrieves details for a single transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the transaction's associated location.</param>
             <param name="transactionId">The ID of the transaction to retrieve.</param>
             <returns>RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.RetrieveTransactionWithHttpInfo(System.String,System.String)">
             <summary>
             RetrieveTransaction Retrieves details for a single transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the transaction's associated location.</param>
             <param name="transactionId">The ID of the transaction to retrieve.</param>
             <returns>ApiResponse of RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.RetrieveTransactionAsync(System.String,System.String)">
             <summary>
             RetrieveTransaction Retrieves details for a single transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the transaction's associated location.</param>
             <param name="transactionId">The ID of the transaction to retrieve.</param>
             <returns>Task of RetrieveTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.RetrieveTransactionAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             RetrieveTransaction Retrieves details for a single transaction.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the transaction's associated location.</param>
             <param name="transactionId">The ID of the transaction to retrieve.</param>
             <returns>Task of ApiResponse (RetrieveTransactionResponse)</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.VoidTransaction(System.String,System.String)">
             <summary>
             VoidTransaction Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.VoidTransactionWithHttpInfo(System.String,System.String)">
             <summary>
             VoidTransaction Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>ApiResponse of VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.VoidTransactionAsync(System.String,System.String)">
             <summary>
             VoidTransaction Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of VoidTransactionResponse</returns>
            </member>
        <member name="M:Square.Connect.Api.TransactionsApi.VoidTransactionAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             VoidTransaction Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a `delay_capture` value of `true`.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId"></param>
             <param name="transactionId"></param>
             <returns>Task of ApiResponse (VoidTransactionResponse)</returns>
            </member>
        <member name="T:Square.Connect.Api.IV1EmployeesApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateEmployee(Square.Connect.Model.V1Employee)">
             <summary>
             Creates an employee for a business.
             </summary>
             <remarks>
             Creates an employee for a business.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateEmployeeWithHttpInfo(Square.Connect.Model.V1Employee)">
             <summary>
             Creates an employee for a business.
             </summary>
             <remarks>
             Creates an employee for a business.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateEmployeeRole(Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Creates an employee role you can then assign to employees.
             </summary>
             <remarks>
             Creates an employee role you can then assign to employees.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
             <returns>V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateEmployeeRoleWithHttpInfo(Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Creates an employee role you can then assign to employees.
             </summary>
             <remarks>
             Creates an employee role you can then assign to employees.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
             <returns>ApiResponse of V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateTimecard(Square.Connect.Model.V1Timecard)">
             <summary>
             Creates a timecard for an employee. Each timecard corresponds to a single shift.
             </summary>
             <remarks>
             Creates a timecard for an employee. Each timecard corresponds to a single shift.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateTimecardWithHttpInfo(Square.Connect.Model.V1Timecard)">
             <summary>
             Creates a timecard for an employee. Each timecard corresponds to a single shift.
             </summary>
             <remarks>
             Creates a timecard for an employee. Each timecard corresponds to a single shift.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.DeleteTimecard(System.String)">
             <summary>
             Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
             </summary>
             <remarks>
             Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The ID of the timecard to delete.</param>
             <returns>Object</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.DeleteTimecardWithHttpInfo(System.String)">
             <summary>
             Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
             </summary>
             <remarks>
             Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The ID of the timecard to delete.</param>
             <returns>ApiResponse of Object</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListCashDrawerShifts(System.String,System.String,System.String,System.String)">
             <summary>
             Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
             </summary>
             <remarks>
             Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
             <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
             <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
             <returns>List&lt;V1CashDrawerShift&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListCashDrawerShiftsWithHttpInfo(System.String,System.String,System.String,System.String)">
             <summary>
             Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
             </summary>
             <remarks>
             Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
             <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
             <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
             <returns>ApiResponse of List&lt;V1CashDrawerShift&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListEmployeeRoles(System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employee roles.
             </summary>
             <remarks>
             Provides summary information for all of a business's employee roles.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC  (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1EmployeeRole&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListEmployeeRolesWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employee roles.
             </summary>
             <remarks>
             Provides summary information for all of a business's employee roles.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC  (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1EmployeeRole&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListEmployees(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employees.
             </summary>
             <remarks>
             Provides summary information for all of a business's employees.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC  (optional)</param>
             <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
             <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
             <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1Employee&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListEmployeesWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employees.
             </summary>
             <remarks>
             Provides summary information for all of a business's employees.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC  (optional)</param>
             <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
             <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
             <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1Employee&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListTimecardEvents(System.String)">
             <summary>
             Provides summary information for all events associated with a particular timecard.
             </summary>
             <remarks>
             Provides summary information for all events associated with a particular timecard.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The ID of the timecard to list events for.</param>
             <returns>List&lt;V1TimecardEvent&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListTimecardEventsWithHttpInfo(System.String)">
             <summary>
             Provides summary information for all events associated with a particular timecard.
             </summary>
             <remarks>
             Provides summary information for all events associated with a particular timecard.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The ID of the timecard to list events for.</param>
             <returns>ApiResponse of List&lt;V1TimecardEvent&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListTimecards(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employee timecards.
             </summary>
             <remarks>
             Provides summary information for all of a business's employee timecards.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
             <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
             <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don't provide this parameter, both valid and deleted timecards are returned. (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1Timecard&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListTimecardsWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employee timecards.
             </summary>
             <remarks>
             Provides summary information for all of a business's employee timecards.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
             <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
             <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don't provide this parameter, both valid and deleted timecards are returned. (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1Timecard&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveCashDrawerShift(System.String,System.String)">
             <summary>
             Provides the details for a single cash drawer shift, including all events that occurred during the shift.
             </summary>
             <remarks>
             Provides the details for a single cash drawer shift, including all events that occurred during the shift.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
             <param name="shiftId">The shift's ID.</param>
             <returns>V1CashDrawerShift</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveCashDrawerShiftWithHttpInfo(System.String,System.String)">
             <summary>
             Provides the details for a single cash drawer shift, including all events that occurred during the shift.
             </summary>
             <remarks>
             Provides the details for a single cash drawer shift, including all events that occurred during the shift.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
             <param name="shiftId">The shift's ID.</param>
             <returns>ApiResponse of V1CashDrawerShift</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveEmployee(System.String)">
             <summary>
             Provides the details for a single employee.
             </summary>
             <remarks>
             Provides the details for a single employee.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeId">The employee's ID.</param>
             <returns>V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveEmployeeWithHttpInfo(System.String)">
             <summary>
             Provides the details for a single employee.
             </summary>
             <remarks>
             Provides the details for a single employee.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeId">The employee's ID.</param>
             <returns>ApiResponse of V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveEmployeeRole(System.String)">
             <summary>
             Provides the details for a single employee role.
             </summary>
             <remarks>
             Provides the details for a single employee role.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="roleId">The role's ID.</param>
             <returns>V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveEmployeeRoleWithHttpInfo(System.String)">
             <summary>
             Provides the details for a single employee role.
             </summary>
             <remarks>
             Provides the details for a single employee role.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="roleId">The role's ID.</param>
             <returns>ApiResponse of V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveTimecard(System.String)">
             <summary>
             Provides the details for a single timecard.
             </summary>
             <remarks>
             Provides the details for a single timecard.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The timecard's ID.</param>
             <returns>V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveTimecardWithHttpInfo(System.String)">
             <summary>
             Provides the details for a single timecard.
             </summary>
             <remarks>
             Provides the details for a single timecard.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The timecard's ID.</param>
             <returns>ApiResponse of V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateEmployee(System.String,Square.Connect.Model.V1Employee)">
             <summary>
             V1 UpdateEmployee
             </summary>
             <remarks>
             
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeId">The ID of the role to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateEmployeeWithHttpInfo(System.String,Square.Connect.Model.V1Employee)">
             <summary>
             V1 UpdateEmployee
             </summary>
             <remarks>
             
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeId">The ID of the role to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateEmployeeRole(System.String,Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Modifies the details of an employee role.
             </summary>
             <remarks>
             Modifies the details of an employee role.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="roleId">The ID of the role to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateEmployeeRoleWithHttpInfo(System.String,Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Modifies the details of an employee role.
             </summary>
             <remarks>
             Modifies the details of an employee role.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="roleId">The ID of the role to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateTimecard(System.String,Square.Connect.Model.V1Timecard)">
             <summary>
             Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint.
             </summary>
             <remarks>
             Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">TThe ID of the timecard to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateTimecardWithHttpInfo(System.String,Square.Connect.Model.V1Timecard)">
             <summary>
             Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint.
             </summary>
             <remarks>
             Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">TThe ID of the timecard to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateEmployeeAsync(Square.Connect.Model.V1Employee)">
             <summary>
             Creates an employee for a business.
             </summary>
             <remarks>
             Creates an employee for a business.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateEmployeeAsyncWithHttpInfo(Square.Connect.Model.V1Employee)">
             <summary>
             Creates an employee for a business.
             </summary>
             <remarks>
             Creates an employee for a business.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Employee)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateEmployeeRoleAsync(Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Creates an employee role you can then assign to employees.
             </summary>
             <remarks>
             Creates an employee role you can then assign to employees.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
             <returns>Task of V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateEmployeeRoleAsyncWithHttpInfo(Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Creates an employee role you can then assign to employees.
             </summary>
             <remarks>
             Creates an employee role you can then assign to employees.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
             <returns>Task of ApiResponse (V1EmployeeRole)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateTimecardAsync(Square.Connect.Model.V1Timecard)">
             <summary>
             Creates a timecard for an employee. Each timecard corresponds to a single shift.
             </summary>
             <remarks>
             Creates a timecard for an employee. Each timecard corresponds to a single shift.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.CreateTimecardAsyncWithHttpInfo(Square.Connect.Model.V1Timecard)">
             <summary>
             Creates a timecard for an employee. Each timecard corresponds to a single shift.
             </summary>
             <remarks>
             Creates a timecard for an employee. Each timecard corresponds to a single shift.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Timecard)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.DeleteTimecardAsync(System.String)">
             <summary>
             Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
             </summary>
             <remarks>
             Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The ID of the timecard to delete.</param>
             <returns>Task of Object</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.DeleteTimecardAsyncWithHttpInfo(System.String)">
             <summary>
             Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
             </summary>
             <remarks>
             Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The ID of the timecard to delete.</param>
             <returns>Task of ApiResponse (Object)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListCashDrawerShiftsAsync(System.String,System.String,System.String,System.String)">
             <summary>
             Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
             </summary>
             <remarks>
             Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
             <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
             <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
             <returns>Task of List&lt;V1CashDrawerShift&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListCashDrawerShiftsAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
             <summary>
             Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
             </summary>
             <remarks>
             Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
             <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
             <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1CashDrawerShift&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListEmployeeRolesAsync(System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employee roles.
             </summary>
             <remarks>
             Provides summary information for all of a business's employee roles.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC  (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1EmployeeRole&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListEmployeeRolesAsyncWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employee roles.
             </summary>
             <remarks>
             Provides summary information for all of a business's employee roles.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC  (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1EmployeeRole&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListEmployeesAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employees.
             </summary>
             <remarks>
             Provides summary information for all of a business's employees.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC  (optional)</param>
             <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
             <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
             <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1Employee&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListEmployeesAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employees.
             </summary>
             <remarks>
             Provides summary information for all of a business's employees.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC  (optional)</param>
             <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
             <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
             <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1Employee&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListTimecardEventsAsync(System.String)">
             <summary>
             Provides summary information for all events associated with a particular timecard.
             </summary>
             <remarks>
             Provides summary information for all events associated with a particular timecard.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The ID of the timecard to list events for.</param>
             <returns>Task of List&lt;V1TimecardEvent&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListTimecardEventsAsyncWithHttpInfo(System.String)">
             <summary>
             Provides summary information for all events associated with a particular timecard.
             </summary>
             <remarks>
             Provides summary information for all events associated with a particular timecard.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The ID of the timecard to list events for.</param>
             <returns>Task of ApiResponse (List&lt;V1TimecardEvent&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListTimecardsAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employee timecards.
             </summary>
             <remarks>
             Provides summary information for all of a business's employee timecards.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
             <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
             <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don't provide this parameter, both valid and deleted timecards are returned. (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1Timecard&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.ListTimecardsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employee timecards.
             </summary>
             <remarks>
             Provides summary information for all of a business's employee timecards.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
             <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
             <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don't provide this parameter, both valid and deleted timecards are returned. (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1Timecard&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveCashDrawerShiftAsync(System.String,System.String)">
             <summary>
             Provides the details for a single cash drawer shift, including all events that occurred during the shift.
             </summary>
             <remarks>
             Provides the details for a single cash drawer shift, including all events that occurred during the shift.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
             <param name="shiftId">The shift's ID.</param>
             <returns>Task of V1CashDrawerShift</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveCashDrawerShiftAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Provides the details for a single cash drawer shift, including all events that occurred during the shift.
             </summary>
             <remarks>
             Provides the details for a single cash drawer shift, including all events that occurred during the shift.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
             <param name="shiftId">The shift's ID.</param>
             <returns>Task of ApiResponse (V1CashDrawerShift)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveEmployeeAsync(System.String)">
             <summary>
             Provides the details for a single employee.
             </summary>
             <remarks>
             Provides the details for a single employee.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeId">The employee's ID.</param>
             <returns>Task of V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveEmployeeAsyncWithHttpInfo(System.String)">
             <summary>
             Provides the details for a single employee.
             </summary>
             <remarks>
             Provides the details for a single employee.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeId">The employee's ID.</param>
             <returns>Task of ApiResponse (V1Employee)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveEmployeeRoleAsync(System.String)">
             <summary>
             Provides the details for a single employee role.
             </summary>
             <remarks>
             Provides the details for a single employee role.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="roleId">The role's ID.</param>
             <returns>Task of V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveEmployeeRoleAsyncWithHttpInfo(System.String)">
             <summary>
             Provides the details for a single employee role.
             </summary>
             <remarks>
             Provides the details for a single employee role.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="roleId">The role's ID.</param>
             <returns>Task of ApiResponse (V1EmployeeRole)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveTimecardAsync(System.String)">
             <summary>
             Provides the details for a single timecard.
             </summary>
             <remarks>
             Provides the details for a single timecard.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The timecard's ID.</param>
             <returns>Task of V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.RetrieveTimecardAsyncWithHttpInfo(System.String)">
             <summary>
             Provides the details for a single timecard.
             </summary>
             <remarks>
             Provides the details for a single timecard.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The timecard's ID.</param>
             <returns>Task of ApiResponse (V1Timecard)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateEmployeeAsync(System.String,Square.Connect.Model.V1Employee)">
             <summary>
             V1 UpdateEmployee
             </summary>
             <remarks>
             
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeId">The ID of the role to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateEmployeeAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Employee)">
             <summary>
             V1 UpdateEmployee
             </summary>
             <remarks>
             
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeId">The ID of the role to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Employee)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateEmployeeRoleAsync(System.String,Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Modifies the details of an employee role.
             </summary>
             <remarks>
             Modifies the details of an employee role.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="roleId">The ID of the role to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateEmployeeRoleAsyncWithHttpInfo(System.String,Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Modifies the details of an employee role.
             </summary>
             <remarks>
             Modifies the details of an employee role.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="roleId">The ID of the role to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1EmployeeRole)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateTimecardAsync(System.String,Square.Connect.Model.V1Timecard)">
             <summary>
             Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint.
             </summary>
             <remarks>
             Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">TThe ID of the timecard to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1EmployeesApi.UpdateTimecardAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Timecard)">
             <summary>
             Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint.
             </summary>
             <remarks>
             Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">TThe ID of the timecard to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Timecard)</returns>
            </member>
        <member name="T:Square.Connect.Api.V1EmployeesApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.V1EmployeesApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.V1EmployeesApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.V1EmployeesApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.V1EmployeesApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateEmployee(Square.Connect.Model.V1Employee)">
             <summary>
             Creates an employee for a business. Creates an employee for a business.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateEmployeeWithHttpInfo(Square.Connect.Model.V1Employee)">
             <summary>
             Creates an employee for a business. Creates an employee for a business.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateEmployeeAsync(Square.Connect.Model.V1Employee)">
             <summary>
             Creates an employee for a business. Creates an employee for a business.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateEmployeeAsyncWithHttpInfo(Square.Connect.Model.V1Employee)">
             <summary>
             Creates an employee for a business. Creates an employee for a business.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Employee)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateEmployeeRole(Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Creates an employee role you can then assign to employees. Creates an employee role you can then assign to employees.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
             <returns>V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateEmployeeRoleWithHttpInfo(Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Creates an employee role you can then assign to employees. Creates an employee role you can then assign to employees.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
             <returns>ApiResponse of V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateEmployeeRoleAsync(Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Creates an employee role you can then assign to employees. Creates an employee role you can then assign to employees.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
             <returns>Task of V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateEmployeeRoleAsyncWithHttpInfo(Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Creates an employee role you can then assign to employees. Creates an employee role you can then assign to employees.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeRole">An EmployeeRole object with a name and permissions, and an optional owner flag.</param>
             <returns>Task of ApiResponse (V1EmployeeRole)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateTimecard(Square.Connect.Model.V1Timecard)">
             <summary>
             Creates a timecard for an employee. Each timecard corresponds to a single shift. Creates a timecard for an employee. Each timecard corresponds to a single shift.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateTimecardWithHttpInfo(Square.Connect.Model.V1Timecard)">
             <summary>
             Creates a timecard for an employee. Each timecard corresponds to a single shift. Creates a timecard for an employee. Each timecard corresponds to a single shift.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateTimecardAsync(Square.Connect.Model.V1Timecard)">
             <summary>
             Creates a timecard for an employee. Each timecard corresponds to a single shift. Creates a timecard for an employee. Each timecard corresponds to a single shift.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.CreateTimecardAsyncWithHttpInfo(Square.Connect.Model.V1Timecard)">
             <summary>
             Creates a timecard for an employee. Each timecard corresponds to a single shift. Creates a timecard for an employee. Each timecard corresponds to a single shift.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Timecard)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.DeleteTimecard(System.String)">
             <summary>
             Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information. Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The ID of the timecard to delete.</param>
             <returns>Object</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.DeleteTimecardWithHttpInfo(System.String)">
             <summary>
             Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information. Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The ID of the timecard to delete.</param>
             <returns>ApiResponse of Object</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.DeleteTimecardAsync(System.String)">
             <summary>
             Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information. Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The ID of the timecard to delete.</param>
             <returns>Task of Object</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.DeleteTimecardAsyncWithHttpInfo(System.String)">
             <summary>
             Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information. Deletes a timecard. Deleted timecards are still accessible from Connect API endpoints, but the value of their deleted field is set to true. See Handling deleted timecards for more information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The ID of the timecard to delete.</param>
             <returns>Task of ApiResponse (Object)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListCashDrawerShifts(System.String,System.String,System.String,System.String)">
             <summary>
             Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days. Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
             <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
             <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
             <returns>List&lt;V1CashDrawerShift&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListCashDrawerShiftsWithHttpInfo(System.String,System.String,System.String,System.String)">
             <summary>
             Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days. Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
             <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
             <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
             <returns>ApiResponse of List&lt;V1CashDrawerShift&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListCashDrawerShiftsAsync(System.String,System.String,System.String,System.String)">
             <summary>
             Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days. Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
             <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
             <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
             <returns>Task of List&lt;V1CashDrawerShift&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListCashDrawerShiftsAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
             <summary>
             Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days. Provides the details for all of a location's cash drawer shifts during a date range. The date range you specify cannot exceed 90 days.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
             <param name="order">The order in which cash drawer shifts are listed in the response, based on their created_at field. Default value: ASC (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time minus 90 days. (optional)</param>
             <param name="endTime">The beginning of the requested reporting period, in ISO 8601 format. Default value: The current time. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1CashDrawerShift&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListEmployeeRoles(System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employee roles. Provides summary information for all of a business's employee roles.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC  (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1EmployeeRole&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListEmployeeRolesWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employee roles. Provides summary information for all of a business's employee roles.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC  (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1EmployeeRole&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListEmployeeRolesAsync(System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employee roles. Provides summary information for all of a business's employee roles.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC  (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1EmployeeRole&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListEmployeeRolesAsyncWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employee roles. Provides summary information for all of a business's employee roles.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which employees are listed in the response, based on their created_at field.Default value: ASC  (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1EmployeeRole&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListEmployees(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employees. Provides summary information for all of a business's employees.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC  (optional)</param>
             <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
             <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
             <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1Employee&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListEmployeesWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employees. Provides summary information for all of a business's employees.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC  (optional)</param>
             <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
             <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
             <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1Employee&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListEmployeesAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employees. Provides summary information for all of a business's employees.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC  (optional)</param>
             <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
             <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
             <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1Employee&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListEmployeesAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employees. Provides summary information for all of a business's employees.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which employees are listed in the response, based on their created_at field.      Default value: ASC  (optional)</param>
             <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format (optional)</param>
             <param name="endUpdatedAt">If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginCreatedAt">If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endCreatedAt">If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="status">If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). (optional)</param>
             <param name="externalId">If provided, the endpoint returns only employee entities with the specified external_id. (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1Employee&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListTimecardEvents(System.String)">
             <summary>
             Provides summary information for all events associated with a particular timecard. Provides summary information for all events associated with a particular timecard.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The ID of the timecard to list events for.</param>
             <returns>List&lt;V1TimecardEvent&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListTimecardEventsWithHttpInfo(System.String)">
             <summary>
             Provides summary information for all events associated with a particular timecard. Provides summary information for all events associated with a particular timecard.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The ID of the timecard to list events for.</param>
             <returns>ApiResponse of List&lt;V1TimecardEvent&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListTimecardEventsAsync(System.String)">
             <summary>
             Provides summary information for all events associated with a particular timecard. Provides summary information for all events associated with a particular timecard.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The ID of the timecard to list events for.</param>
             <returns>Task of List&lt;V1TimecardEvent&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListTimecardEventsAsyncWithHttpInfo(System.String)">
             <summary>
             Provides summary information for all events associated with a particular timecard. Provides summary information for all events associated with a particular timecard.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The ID of the timecard to list events for.</param>
             <returns>Task of ApiResponse (List&lt;V1TimecardEvent&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListTimecards(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employee timecards. Provides summary information for all of a business's employee timecards.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
             <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
             <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don't provide this parameter, both valid and deleted timecards are returned. (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1Timecard&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListTimecardsWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employee timecards. Provides summary information for all of a business's employee timecards.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
             <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
             <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don't provide this parameter, both valid and deleted timecards are returned. (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1Timecard&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListTimecardsAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employee timecards. Provides summary information for all of a business's employee timecards.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
             <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
             <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don't provide this parameter, both valid and deleted timecards are returned. (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1Timecard&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.ListTimecardsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all of a business's employee timecards. Provides summary information for all of a business's employee timecards.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="order">The order in which timecards are listed in the response, based on their created_at field. (optional)</param>
             <param name="employeeId">If provided, the endpoint returns only timecards for the employee with the specified ID. (optional)</param>
             <param name="beginClockinTime">If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endClockinTime">If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginClockoutTime">If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endClockoutTime">If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="beginUpdatedAt">If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="endUpdatedAt">If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format. (optional)</param>
             <param name="deleted">If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don't provide this parameter, both valid and deleted timecards are returned. (optional)</param>
             <param name="limit">The maximum integer number of employee entities to return in a single response. Default 100, maximum 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1Timecard&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveCashDrawerShift(System.String,System.String)">
             <summary>
             Provides the details for a single cash drawer shift, including all events that occurred during the shift. Provides the details for a single cash drawer shift, including all events that occurred during the shift.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
             <param name="shiftId">The shift's ID.</param>
             <returns>V1CashDrawerShift</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveCashDrawerShiftWithHttpInfo(System.String,System.String)">
             <summary>
             Provides the details for a single cash drawer shift, including all events that occurred during the shift. Provides the details for a single cash drawer shift, including all events that occurred during the shift.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
             <param name="shiftId">The shift's ID.</param>
             <returns>ApiResponse of V1CashDrawerShift</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveCashDrawerShiftAsync(System.String,System.String)">
             <summary>
             Provides the details for a single cash drawer shift, including all events that occurred during the shift. Provides the details for a single cash drawer shift, including all events that occurred during the shift.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
             <param name="shiftId">The shift's ID.</param>
             <returns>Task of V1CashDrawerShift</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveCashDrawerShiftAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Provides the details for a single cash drawer shift, including all events that occurred during the shift. Provides the details for a single cash drawer shift, including all events that occurred during the shift.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list cash drawer shifts for.</param>
             <param name="shiftId">The shift's ID.</param>
             <returns>Task of ApiResponse (V1CashDrawerShift)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveEmployee(System.String)">
             <summary>
             Provides the details for a single employee. Provides the details for a single employee.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeId">The employee's ID.</param>
             <returns>V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveEmployeeWithHttpInfo(System.String)">
             <summary>
             Provides the details for a single employee. Provides the details for a single employee.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeId">The employee's ID.</param>
             <returns>ApiResponse of V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveEmployeeAsync(System.String)">
             <summary>
             Provides the details for a single employee. Provides the details for a single employee.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeId">The employee's ID.</param>
             <returns>Task of V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveEmployeeAsyncWithHttpInfo(System.String)">
             <summary>
             Provides the details for a single employee. Provides the details for a single employee.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeId">The employee's ID.</param>
             <returns>Task of ApiResponse (V1Employee)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveEmployeeRole(System.String)">
             <summary>
             Provides the details for a single employee role. Provides the details for a single employee role.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="roleId">The role's ID.</param>
             <returns>V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveEmployeeRoleWithHttpInfo(System.String)">
             <summary>
             Provides the details for a single employee role. Provides the details for a single employee role.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="roleId">The role's ID.</param>
             <returns>ApiResponse of V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveEmployeeRoleAsync(System.String)">
             <summary>
             Provides the details for a single employee role. Provides the details for a single employee role.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="roleId">The role's ID.</param>
             <returns>Task of V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveEmployeeRoleAsyncWithHttpInfo(System.String)">
             <summary>
             Provides the details for a single employee role. Provides the details for a single employee role.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="roleId">The role's ID.</param>
             <returns>Task of ApiResponse (V1EmployeeRole)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveTimecard(System.String)">
             <summary>
             Provides the details for a single timecard. Provides the details for a single timecard.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The timecard's ID.</param>
             <returns>V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveTimecardWithHttpInfo(System.String)">
             <summary>
             Provides the details for a single timecard. Provides the details for a single timecard.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The timecard's ID.</param>
             <returns>ApiResponse of V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveTimecardAsync(System.String)">
             <summary>
             Provides the details for a single timecard. Provides the details for a single timecard.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The timecard's ID.</param>
             <returns>Task of V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.RetrieveTimecardAsyncWithHttpInfo(System.String)">
             <summary>
             Provides the details for a single timecard. Provides the details for a single timecard.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">The timecard's ID.</param>
             <returns>Task of ApiResponse (V1Timecard)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateEmployee(System.String,Square.Connect.Model.V1Employee)">
             <summary>
             V1 UpdateEmployee 
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeId">The ID of the role to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateEmployeeWithHttpInfo(System.String,Square.Connect.Model.V1Employee)">
             <summary>
             V1 UpdateEmployee 
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeId">The ID of the role to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateEmployeeAsync(System.String,Square.Connect.Model.V1Employee)">
             <summary>
             V1 UpdateEmployee 
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeId">The ID of the role to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Employee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateEmployeeAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Employee)">
             <summary>
             V1 UpdateEmployee 
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="employeeId">The ID of the role to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Employee)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateEmployeeRole(System.String,Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Modifies the details of an employee role. Modifies the details of an employee role.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="roleId">The ID of the role to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateEmployeeRoleWithHttpInfo(System.String,Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Modifies the details of an employee role. Modifies the details of an employee role.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="roleId">The ID of the role to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateEmployeeRoleAsync(System.String,Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Modifies the details of an employee role. Modifies the details of an employee role.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="roleId">The ID of the role to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1EmployeeRole</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateEmployeeRoleAsyncWithHttpInfo(System.String,Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Modifies the details of an employee role. Modifies the details of an employee role.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="roleId">The ID of the role to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1EmployeeRole)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateTimecard(System.String,Square.Connect.Model.V1Timecard)">
             <summary>
             Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint. Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">TThe ID of the timecard to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateTimecardWithHttpInfo(System.String,Square.Connect.Model.V1Timecard)">
             <summary>
             Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint. Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">TThe ID of the timecard to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateTimecardAsync(System.String,Square.Connect.Model.V1Timecard)">
             <summary>
             Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint. Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">TThe ID of the timecard to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Timecard</returns>
            </member>
        <member name="M:Square.Connect.Api.V1EmployeesApi.UpdateTimecardAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Timecard)">
             <summary>
             Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint. Modifies a timecard's details. This creates an API_EDIT event for the timecard. You can view a timecard's event history with the List Timecard Events endpoint.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="timecardId">TThe ID of the timecard to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Timecard)</returns>
            </member>
        <member name="T:Square.Connect.Api.IV1ItemsApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.AdjustInventory(System.String,System.String,Square.Connect.Model.V1AdjustInventoryRequest)">
             <summary>
             Adjusts an item variation's current available inventory.
             </summary>
             <remarks>
             Adjusts an item variation's current available inventory.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="variationId">The ID of the variation to adjust inventory information for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1InventoryEntry</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.AdjustInventoryWithHttpInfo(System.String,System.String,Square.Connect.Model.V1AdjustInventoryRequest)">
             <summary>
             Adjusts an item variation's current available inventory.
             </summary>
             <remarks>
             Adjusts an item variation's current available inventory.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="variationId">The ID of the variation to adjust inventory information for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1InventoryEntry</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ApplyFee(System.String,System.String,System.String)">
             <summary>
             Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
             </summary>
             <remarks>
             Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="itemId">The ID of the item to add the fee to.</param>
             <param name="feeId">The ID of the fee to apply.</param>
             <returns>V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ApplyFeeWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
             </summary>
             <remarks>
             Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="itemId">The ID of the item to add the fee to.</param>
             <param name="feeId">The ID of the fee to apply.</param>
             <returns>ApiResponse of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ApplyModifierList(System.String,System.String,System.String)">
             <summary>
             Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
             </summary>
             <remarks>
             Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to apply.</param>
             <param name="itemId">The ID of the item to add the modifier list to.</param>
             <returns>V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ApplyModifierListWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
             </summary>
             <remarks>
             Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to apply.</param>
             <param name="itemId">The ID of the item to add the modifier list to.</param>
             <returns>ApiResponse of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateCategory(System.String,Square.Connect.Model.V1Category)">
             <summary>
             Creates an item category.
             </summary>
             <remarks>
             Creates an item category.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateCategoryWithHttpInfo(System.String,Square.Connect.Model.V1Category)">
             <summary>
             Creates an item category.
             </summary>
             <remarks>
             Creates an item category.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateDiscount(System.String,Square.Connect.Model.V1Discount)">
             <summary>
             Creates a discount.
             </summary>
             <remarks>
             Creates a discount.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateDiscountWithHttpInfo(System.String,Square.Connect.Model.V1Discount)">
             <summary>
             Creates a discount.
             </summary>
             <remarks>
             Creates a discount.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateFee(System.String,Square.Connect.Model.V1Fee)">
             <summary>
             Creates a fee (tax).
             </summary>
             <remarks>
             Creates a fee (tax).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create a fee for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateFeeWithHttpInfo(System.String,Square.Connect.Model.V1Fee)">
             <summary>
             Creates a fee (tax).
             </summary>
             <remarks>
             Creates a fee (tax).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create a fee for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateItem(System.String,Square.Connect.Model.V1Item)">
             <summary>
             Creates an item and at least one variation for it.
             </summary>
             <remarks>
             Creates an item and at least one variation for it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateItemWithHttpInfo(System.String,Square.Connect.Model.V1Item)">
             <summary>
             Creates an item and at least one variation for it.
             </summary>
             <remarks>
             Creates an item and at least one variation for it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateModifierList(System.String,Square.Connect.Model.V1ModifierList)">
             <summary>
             Creates an item modifier list and at least one modifier option for it.
             </summary>
             <remarks>
             Creates an item modifier list and at least one modifier option for it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create a modifier list for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateModifierListWithHttpInfo(System.String,Square.Connect.Model.V1ModifierList)">
             <summary>
             Creates an item modifier list and at least one modifier option for it.
             </summary>
             <remarks>
             Creates an item modifier list and at least one modifier option for it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create a modifier list for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateModifierOption(System.String,System.String,Square.Connect.Model.V1ModifierOption)">
             <summary>
             Creates an item modifier option and adds it to a modifier list.
             </summary>
             <remarks>
             Creates an item modifier option and adds it to a modifier list.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateModifierOptionWithHttpInfo(System.String,System.String,Square.Connect.Model.V1ModifierOption)">
             <summary>
             Creates an item modifier option and adds it to a modifier list.
             </summary>
             <remarks>
             Creates an item modifier option and adds it to a modifier list.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreatePage(System.String,Square.Connect.Model.V1Page)">
             <summary>
             Creates a Favorites page in Square Register.
             </summary>
             <remarks>
             Creates a Favorites page in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreatePageWithHttpInfo(System.String,Square.Connect.Model.V1Page)">
             <summary>
             Creates a Favorites page in Square Register.
             </summary>
             <remarks>
             Creates a Favorites page in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateVariation(System.String,System.String,Square.Connect.Model.V1Variation)">
             <summary>
             Creates an item variation for an existing item.
             </summary>
             <remarks>
             Creates an item variation for an existing item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The item's ID.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateVariationWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Variation)">
             <summary>
             Creates an item variation for an existing item.
             </summary>
             <remarks>
             Creates an item variation for an existing item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The item's ID.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteCategory(System.String,System.String)">
             <summary>
             Deletes an existing item category.
             </summary>
             <remarks>
             Deletes an existing item category.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="categoryId">The ID of the category to delete.</param>
             <returns>V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteCategoryWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing item category.
             </summary>
             <remarks>
             Deletes an existing item category.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="categoryId">The ID of the category to delete.</param>
             <returns>ApiResponse of V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteDiscount(System.String,System.String)">
             <summary>
             Deletes an existing discount.
             </summary>
             <remarks>
             Deletes an existing discount.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="discountId">The ID of the discount to delete.</param>
             <returns>V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteDiscountWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing discount.
             </summary>
             <remarks>
             Deletes an existing discount.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="discountId">The ID of the discount to delete.</param>
             <returns>ApiResponse of V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteFee(System.String,System.String)">
             <summary>
             Deletes an existing fee (tax).
             </summary>
             <remarks>
             Deletes an existing fee (tax).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="feeId">The ID of the fee to delete.</param>
             <returns>V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteFeeWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing fee (tax).
             </summary>
             <remarks>
             Deletes an existing fee (tax).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="feeId">The ID of the fee to delete.</param>
             <returns>ApiResponse of V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteItem(System.String,System.String)">
             <summary>
             Deletes an existing item and all item variations associated with it.
             </summary>
             <remarks>
             Deletes an existing item and all item variations associated with it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <returns>V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteItemWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing item and all item variations associated with it.
             </summary>
             <remarks>
             Deletes an existing item and all item variations associated with it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <returns>ApiResponse of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteModifierList(System.String,System.String)">
             <summary>
             Deletes an existing item modifier list and all modifier options associated with it.
             </summary>
             <remarks>
             Deletes an existing item modifier list and all modifier options associated with it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to delete.</param>
             <returns>V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteModifierListWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing item modifier list and all modifier options associated with it.
             </summary>
             <remarks>
             Deletes an existing item modifier list and all modifier options associated with it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to delete.</param>
             <returns>ApiResponse of V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteModifierOption(System.String,System.String,System.String)">
             <summary>
             Deletes an existing item modifier option from a modifier list.
             </summary>
             <remarks>
             Deletes an existing item modifier option from a modifier list.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to delete.</param>
             <param name="modifierOptionId">The ID of the modifier list to edit.</param>
             <returns>V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteModifierOptionWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Deletes an existing item modifier option from a modifier list.
             </summary>
             <remarks>
             Deletes an existing item modifier option from a modifier list.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to delete.</param>
             <param name="modifierOptionId">The ID of the modifier list to edit.</param>
             <returns>ApiResponse of V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeletePage(System.String,System.String)">
             <summary>
             Deletes an existing Favorites page and all of its cells.
             </summary>
             <remarks>
             Deletes an existing Favorites page and all of its cells.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page to delete.</param>
             <returns>V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeletePageWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing Favorites page and all of its cells.
             </summary>
             <remarks>
             Deletes an existing Favorites page and all of its cells.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page to delete.</param>
             <returns>ApiResponse of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeletePageCell(System.String,System.String,System.String,System.String)">
             <summary>
             Deletes a cell from a Favorites page in Square Register.
             </summary>
             <remarks>
             Deletes a cell from a Favorites page in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page to delete.</param>
             <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
             <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
             <returns>V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeletePageCellWithHttpInfo(System.String,System.String,System.String,System.String)">
             <summary>
             Deletes a cell from a Favorites page in Square Register.
             </summary>
             <remarks>
             Deletes a cell from a Favorites page in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page to delete.</param>
             <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
             <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
             <returns>ApiResponse of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteVariation(System.String,System.String,System.String)">
             <summary>
             Deletes an existing item variation from an item.
             </summary>
             <remarks>
             Deletes an existing item variation from an item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to delete.</param>
             <param name="variationId">The ID of the variation to delete.</param>
             <returns>V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteVariationWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Deletes an existing item variation from an item.
             </summary>
             <remarks>
             Deletes an existing item variation from an item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to delete.</param>
             <param name="variationId">The ID of the variation to delete.</param>
             <returns>ApiResponse of V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListCategories(System.String)">
             <summary>
             Lists all of a location's item categories.
             </summary>
             <remarks>
             Lists all of a location's item categories.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list categories for.</param>
             <returns>List&lt;V1Category&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListCategoriesWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's item categories.
             </summary>
             <remarks>
             Lists all of a location's item categories.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list categories for.</param>
             <returns>ApiResponse of List&lt;V1Category&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListDiscounts(System.String)">
             <summary>
             Lists all of a location's discounts.
             </summary>
             <remarks>
             Lists all of a location's discounts.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list categories for.</param>
             <returns>List&lt;V1Discount&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListDiscountsWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's discounts.
             </summary>
             <remarks>
             Lists all of a location's discounts.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list categories for.</param>
             <returns>ApiResponse of List&lt;V1Discount&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListFees(System.String)">
             <summary>
             Lists all of a location's fees (taxes).
             </summary>
             <remarks>
             Lists all of a location's fees (taxes).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list fees for.</param>
             <returns>List&lt;V1Fee&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListFeesWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's fees (taxes).
             </summary>
             <remarks>
             Lists all of a location's fees (taxes).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list fees for.</param>
             <returns>ApiResponse of List&lt;V1Fee&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListInventory(System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides inventory information for all of a merchant's inventory-enabled item variations.
             </summary>
             <remarks>
             Provides inventory information for all of a merchant's inventory-enabled item variations.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1InventoryEntry&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListInventoryWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides inventory information for all of a merchant's inventory-enabled item variations.
             </summary>
             <remarks>
             Provides inventory information for all of a merchant's inventory-enabled item variations.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1InventoryEntry&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListItems(System.String,System.String)">
             <summary>
             Provides summary information for all of a location's items.
             </summary>
             <remarks>
             Provides summary information for all of a location's items.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list items for.</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1Item&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListItemsWithHttpInfo(System.String,System.String)">
             <summary>
             Provides summary information for all of a location's items.
             </summary>
             <remarks>
             Provides summary information for all of a location's items.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list items for.</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1Item&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListModifierLists(System.String)">
             <summary>
             Lists all of a location's modifier lists.
             </summary>
             <remarks>
             Lists all of a location's modifier lists.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list modifier lists for.</param>
             <returns>List&lt;V1ModifierList&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListModifierListsWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's modifier lists.
             </summary>
             <remarks>
             Lists all of a location's modifier lists.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list modifier lists for.</param>
             <returns>ApiResponse of List&lt;V1ModifierList&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListPages(System.String)">
             <summary>
             Lists all of a location's Favorites pages in Square Register.
             </summary>
             <remarks>
             Lists all of a location's Favorites pages in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list Favorites pages for.</param>
             <returns>List&lt;V1Page&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListPagesWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's Favorites pages in Square Register.
             </summary>
             <remarks>
             Lists all of a location's Favorites pages in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list Favorites pages for.</param>
             <returns>ApiResponse of List&lt;V1Page&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RemoveFee(System.String,System.String,System.String)">
             <summary>
             Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
             </summary>
             <remarks>
             Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="itemId">The ID of the item to add the fee to.</param>
             <param name="feeId">The ID of the fee to apply.</param>
             <returns>V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RemoveFeeWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
             </summary>
             <remarks>
             Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="itemId">The ID of the item to add the fee to.</param>
             <param name="feeId">The ID of the fee to apply.</param>
             <returns>ApiResponse of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RemoveModifierList(System.String,System.String,System.String)">
             <summary>
             Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
             </summary>
             <remarks>
             Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to remove.</param>
             <param name="itemId">The ID of the item to remove the modifier list from.</param>
             <returns>V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RemoveModifierListWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
             </summary>
             <remarks>
             Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to remove.</param>
             <param name="itemId">The ID of the item to remove the modifier list from.</param>
             <returns>ApiResponse of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RetrieveItem(System.String,System.String)">
             <summary>
             Provides the details for a single item, including associated modifier lists and fees.
             </summary>
             <remarks>
             Provides the details for a single item, including associated modifier lists and fees.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The item's ID.</param>
             <returns>V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RetrieveItemWithHttpInfo(System.String,System.String)">
             <summary>
             Provides the details for a single item, including associated modifier lists and fees.
             </summary>
             <remarks>
             Provides the details for a single item, including associated modifier lists and fees.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The item's ID.</param>
             <returns>ApiResponse of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RetrieveModifierList(System.String,System.String)">
             <summary>
             Provides the details for a single modifier list.
             </summary>
             <remarks>
             Provides the details for a single modifier list.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The modifier list's ID.</param>
             <returns>V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RetrieveModifierListWithHttpInfo(System.String,System.String)">
             <summary>
             Provides the details for a single modifier list.
             </summary>
             <remarks>
             Provides the details for a single modifier list.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The modifier list's ID.</param>
             <returns>ApiResponse of V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateCategory(System.String,System.String,Square.Connect.Model.V1Category)">
             <summary>
             Modifies the details of an existing item category.
             </summary>
             <remarks>
             Modifies the details of an existing item category.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the category's associated location.</param>
             <param name="categoryId">The ID of the category to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateCategoryWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Category)">
             <summary>
             Modifies the details of an existing item category.
             </summary>
             <remarks>
             Modifies the details of an existing item category.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the category's associated location.</param>
             <param name="categoryId">The ID of the category to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateDiscount(System.String,System.String,Square.Connect.Model.V1Discount)">
             <summary>
             Modifies the details of an existing discount.
             </summary>
             <remarks>
             Modifies the details of an existing discount.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the category's associated location.</param>
             <param name="discountId">The ID of the discount to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateDiscountWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Discount)">
             <summary>
             Modifies the details of an existing discount.
             </summary>
             <remarks>
             Modifies the details of an existing discount.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the category's associated location.</param>
             <param name="discountId">The ID of the discount to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateFee(System.String,System.String,Square.Connect.Model.V1Fee)">
             <summary>
             Modifies the details of an existing fee (tax).
             </summary>
             <remarks>
             Modifies the details of an existing fee (tax).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="feeId">The ID of the fee to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateFeeWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Fee)">
             <summary>
             Modifies the details of an existing fee (tax).
             </summary>
             <remarks>
             Modifies the details of an existing fee (tax).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="feeId">The ID of the fee to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateItem(System.String,System.String,Square.Connect.Model.V1Item)">
             <summary>
             Modifies the core details of an existing item.
             </summary>
             <remarks>
             Modifies the core details of an existing item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateItemWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Item)">
             <summary>
             Modifies the core details of an existing item.
             </summary>
             <remarks>
             Modifies the core details of an existing item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateModifierList(System.String,System.String,Square.Connect.Model.V1UpdateModifierListRequest)">
             <summary>
             Modifies the details of an existing item modifier list.
             </summary>
             <remarks>
             Modifies the details of an existing item modifier list.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateModifierListWithHttpInfo(System.String,System.String,Square.Connect.Model.V1UpdateModifierListRequest)">
             <summary>
             Modifies the details of an existing item modifier list.
             </summary>
             <remarks>
             Modifies the details of an existing item modifier list.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateModifierOption(System.String,System.String,System.String,Square.Connect.Model.V1ModifierOption)">
             <summary>
             Modifies the details of an existing item modifier option.
             </summary>
             <remarks>
             Modifies the details of an existing item modifier option.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="modifierOptionId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateModifierOptionWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.V1ModifierOption)">
             <summary>
             Modifies the details of an existing item modifier option.
             </summary>
             <remarks>
             Modifies the details of an existing item modifier option.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="modifierOptionId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdatePage(System.String,System.String,Square.Connect.Model.V1Page)">
             <summary>
             Modifies the details of a Favorites page in Square Register.
             </summary>
             <remarks>
             Modifies the details of a Favorites page in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location</param>
             <param name="pageId">The ID of the page to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdatePageWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Page)">
             <summary>
             Modifies the details of a Favorites page in Square Register.
             </summary>
             <remarks>
             Modifies the details of a Favorites page in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location</param>
             <param name="pageId">The ID of the page to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdatePageCell(System.String,System.String,Square.Connect.Model.V1PageCell)">
             <summary>
             Modifies a cell of a Favorites page in Square Register.
             </summary>
             <remarks>
             Modifies a cell of a Favorites page in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page the cell belongs to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdatePageCellWithHttpInfo(System.String,System.String,Square.Connect.Model.V1PageCell)">
             <summary>
             Modifies a cell of a Favorites page in Square Register.
             </summary>
             <remarks>
             Modifies a cell of a Favorites page in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page the cell belongs to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateVariation(System.String,System.String,System.String,Square.Connect.Model.V1Variation)">
             <summary>
             Modifies the details of an existing item variation.
             </summary>
             <remarks>
             Modifies the details of an existing item variation.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <param name="variationId">The ID of the variation to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateVariationWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.V1Variation)">
             <summary>
             Modifies the details of an existing item variation.
             </summary>
             <remarks>
             Modifies the details of an existing item variation.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <param name="variationId">The ID of the variation to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.AdjustInventoryAsync(System.String,System.String,Square.Connect.Model.V1AdjustInventoryRequest)">
             <summary>
             Adjusts an item variation's current available inventory.
             </summary>
             <remarks>
             Adjusts an item variation's current available inventory.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="variationId">The ID of the variation to adjust inventory information for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1InventoryEntry</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.AdjustInventoryAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1AdjustInventoryRequest)">
             <summary>
             Adjusts an item variation's current available inventory.
             </summary>
             <remarks>
             Adjusts an item variation's current available inventory.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="variationId">The ID of the variation to adjust inventory information for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1InventoryEntry)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ApplyFeeAsync(System.String,System.String,System.String)">
             <summary>
             Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
             </summary>
             <remarks>
             Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="itemId">The ID of the item to add the fee to.</param>
             <param name="feeId">The ID of the fee to apply.</param>
             <returns>Task of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ApplyFeeAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
             </summary>
             <remarks>
             Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="itemId">The ID of the item to add the fee to.</param>
             <param name="feeId">The ID of the fee to apply.</param>
             <returns>Task of ApiResponse (V1Item)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ApplyModifierListAsync(System.String,System.String,System.String)">
             <summary>
             Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
             </summary>
             <remarks>
             Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to apply.</param>
             <param name="itemId">The ID of the item to add the modifier list to.</param>
             <returns>Task of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ApplyModifierListAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
             </summary>
             <remarks>
             Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to apply.</param>
             <param name="itemId">The ID of the item to add the modifier list to.</param>
             <returns>Task of ApiResponse (V1Item)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateCategoryAsync(System.String,Square.Connect.Model.V1Category)">
             <summary>
             Creates an item category.
             </summary>
             <remarks>
             Creates an item category.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateCategoryAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Category)">
             <summary>
             Creates an item category.
             </summary>
             <remarks>
             Creates an item category.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Category)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateDiscountAsync(System.String,Square.Connect.Model.V1Discount)">
             <summary>
             Creates a discount.
             </summary>
             <remarks>
             Creates a discount.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateDiscountAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Discount)">
             <summary>
             Creates a discount.
             </summary>
             <remarks>
             Creates a discount.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Discount)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateFeeAsync(System.String,Square.Connect.Model.V1Fee)">
             <summary>
             Creates a fee (tax).
             </summary>
             <remarks>
             Creates a fee (tax).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create a fee for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateFeeAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Fee)">
             <summary>
             Creates a fee (tax).
             </summary>
             <remarks>
             Creates a fee (tax).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create a fee for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Fee)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateItemAsync(System.String,Square.Connect.Model.V1Item)">
             <summary>
             Creates an item and at least one variation for it.
             </summary>
             <remarks>
             Creates an item and at least one variation for it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateItemAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Item)">
             <summary>
             Creates an item and at least one variation for it.
             </summary>
             <remarks>
             Creates an item and at least one variation for it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Item)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateModifierListAsync(System.String,Square.Connect.Model.V1ModifierList)">
             <summary>
             Creates an item modifier list and at least one modifier option for it.
             </summary>
             <remarks>
             Creates an item modifier list and at least one modifier option for it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create a modifier list for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateModifierListAsyncWithHttpInfo(System.String,Square.Connect.Model.V1ModifierList)">
             <summary>
             Creates an item modifier list and at least one modifier option for it.
             </summary>
             <remarks>
             Creates an item modifier list and at least one modifier option for it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create a modifier list for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1ModifierList)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateModifierOptionAsync(System.String,System.String,Square.Connect.Model.V1ModifierOption)">
             <summary>
             Creates an item modifier option and adds it to a modifier list.
             </summary>
             <remarks>
             Creates an item modifier option and adds it to a modifier list.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateModifierOptionAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1ModifierOption)">
             <summary>
             Creates an item modifier option and adds it to a modifier list.
             </summary>
             <remarks>
             Creates an item modifier option and adds it to a modifier list.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1ModifierOption)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreatePageAsync(System.String,Square.Connect.Model.V1Page)">
             <summary>
             Creates a Favorites page in Square Register.
             </summary>
             <remarks>
             Creates a Favorites page in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreatePageAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Page)">
             <summary>
             Creates a Favorites page in Square Register.
             </summary>
             <remarks>
             Creates a Favorites page in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Page)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateVariationAsync(System.String,System.String,Square.Connect.Model.V1Variation)">
             <summary>
             Creates an item variation for an existing item.
             </summary>
             <remarks>
             Creates an item variation for an existing item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The item's ID.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.CreateVariationAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Variation)">
             <summary>
             Creates an item variation for an existing item.
             </summary>
             <remarks>
             Creates an item variation for an existing item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The item's ID.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Variation)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteCategoryAsync(System.String,System.String)">
             <summary>
             Deletes an existing item category.
             </summary>
             <remarks>
             Deletes an existing item category.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="categoryId">The ID of the category to delete.</param>
             <returns>Task of V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteCategoryAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing item category.
             </summary>
             <remarks>
             Deletes an existing item category.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="categoryId">The ID of the category to delete.</param>
             <returns>Task of ApiResponse (V1Category)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteDiscountAsync(System.String,System.String)">
             <summary>
             Deletes an existing discount.
             </summary>
             <remarks>
             Deletes an existing discount.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="discountId">The ID of the discount to delete.</param>
             <returns>Task of V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteDiscountAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing discount.
             </summary>
             <remarks>
             Deletes an existing discount.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="discountId">The ID of the discount to delete.</param>
             <returns>Task of ApiResponse (V1Discount)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteFeeAsync(System.String,System.String)">
             <summary>
             Deletes an existing fee (tax).
             </summary>
             <remarks>
             Deletes an existing fee (tax).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="feeId">The ID of the fee to delete.</param>
             <returns>Task of V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteFeeAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing fee (tax).
             </summary>
             <remarks>
             Deletes an existing fee (tax).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="feeId">The ID of the fee to delete.</param>
             <returns>Task of ApiResponse (V1Fee)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteItemAsync(System.String,System.String)">
             <summary>
             Deletes an existing item and all item variations associated with it.
             </summary>
             <remarks>
             Deletes an existing item and all item variations associated with it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <returns>Task of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteItemAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing item and all item variations associated with it.
             </summary>
             <remarks>
             Deletes an existing item and all item variations associated with it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <returns>Task of ApiResponse (V1Item)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteModifierListAsync(System.String,System.String)">
             <summary>
             Deletes an existing item modifier list and all modifier options associated with it.
             </summary>
             <remarks>
             Deletes an existing item modifier list and all modifier options associated with it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to delete.</param>
             <returns>Task of V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteModifierListAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing item modifier list and all modifier options associated with it.
             </summary>
             <remarks>
             Deletes an existing item modifier list and all modifier options associated with it.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to delete.</param>
             <returns>Task of ApiResponse (V1ModifierList)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteModifierOptionAsync(System.String,System.String,System.String)">
             <summary>
             Deletes an existing item modifier option from a modifier list.
             </summary>
             <remarks>
             Deletes an existing item modifier option from a modifier list.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to delete.</param>
             <param name="modifierOptionId">The ID of the modifier list to edit.</param>
             <returns>Task of V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteModifierOptionAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Deletes an existing item modifier option from a modifier list.
             </summary>
             <remarks>
             Deletes an existing item modifier option from a modifier list.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to delete.</param>
             <param name="modifierOptionId">The ID of the modifier list to edit.</param>
             <returns>Task of ApiResponse (V1ModifierOption)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeletePageAsync(System.String,System.String)">
             <summary>
             Deletes an existing Favorites page and all of its cells.
             </summary>
             <remarks>
             Deletes an existing Favorites page and all of its cells.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page to delete.</param>
             <returns>Task of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeletePageAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing Favorites page and all of its cells.
             </summary>
             <remarks>
             Deletes an existing Favorites page and all of its cells.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page to delete.</param>
             <returns>Task of ApiResponse (V1Page)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeletePageCellAsync(System.String,System.String,System.String,System.String)">
             <summary>
             Deletes a cell from a Favorites page in Square Register.
             </summary>
             <remarks>
             Deletes a cell from a Favorites page in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page to delete.</param>
             <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
             <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
             <returns>Task of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeletePageCellAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
             <summary>
             Deletes a cell from a Favorites page in Square Register.
             </summary>
             <remarks>
             Deletes a cell from a Favorites page in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page to delete.</param>
             <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
             <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
             <returns>Task of ApiResponse (V1Page)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteVariationAsync(System.String,System.String,System.String)">
             <summary>
             Deletes an existing item variation from an item.
             </summary>
             <remarks>
             Deletes an existing item variation from an item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to delete.</param>
             <param name="variationId">The ID of the variation to delete.</param>
             <returns>Task of V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.DeleteVariationAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Deletes an existing item variation from an item.
             </summary>
             <remarks>
             Deletes an existing item variation from an item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to delete.</param>
             <param name="variationId">The ID of the variation to delete.</param>
             <returns>Task of ApiResponse (V1Variation)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListCategoriesAsync(System.String)">
             <summary>
             Lists all of a location's item categories.
             </summary>
             <remarks>
             Lists all of a location's item categories.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list categories for.</param>
             <returns>Task of List&lt;V1Category&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListCategoriesAsyncWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's item categories.
             </summary>
             <remarks>
             Lists all of a location's item categories.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list categories for.</param>
             <returns>Task of ApiResponse (List&lt;V1Category&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListDiscountsAsync(System.String)">
             <summary>
             Lists all of a location's discounts.
             </summary>
             <remarks>
             Lists all of a location's discounts.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list categories for.</param>
             <returns>Task of List&lt;V1Discount&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListDiscountsAsyncWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's discounts.
             </summary>
             <remarks>
             Lists all of a location's discounts.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list categories for.</param>
             <returns>Task of ApiResponse (List&lt;V1Discount&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListFeesAsync(System.String)">
             <summary>
             Lists all of a location's fees (taxes).
             </summary>
             <remarks>
             Lists all of a location's fees (taxes).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list fees for.</param>
             <returns>Task of List&lt;V1Fee&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListFeesAsyncWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's fees (taxes).
             </summary>
             <remarks>
             Lists all of a location's fees (taxes).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list fees for.</param>
             <returns>Task of ApiResponse (List&lt;V1Fee&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListInventoryAsync(System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides inventory information for all of a merchant's inventory-enabled item variations.
             </summary>
             <remarks>
             Provides inventory information for all of a merchant's inventory-enabled item variations.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1InventoryEntry&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListInventoryAsyncWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides inventory information for all of a merchant's inventory-enabled item variations.
             </summary>
             <remarks>
             Provides inventory information for all of a merchant's inventory-enabled item variations.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1InventoryEntry&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListItemsAsync(System.String,System.String)">
             <summary>
             Provides summary information for all of a location's items.
             </summary>
             <remarks>
             Provides summary information for all of a location's items.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list items for.</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1Item&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListItemsAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Provides summary information for all of a location's items.
             </summary>
             <remarks>
             Provides summary information for all of a location's items.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list items for.</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1Item&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListModifierListsAsync(System.String)">
             <summary>
             Lists all of a location's modifier lists.
             </summary>
             <remarks>
             Lists all of a location's modifier lists.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list modifier lists for.</param>
             <returns>Task of List&lt;V1ModifierList&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListModifierListsAsyncWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's modifier lists.
             </summary>
             <remarks>
             Lists all of a location's modifier lists.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list modifier lists for.</param>
             <returns>Task of ApiResponse (List&lt;V1ModifierList&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListPagesAsync(System.String)">
             <summary>
             Lists all of a location's Favorites pages in Square Register.
             </summary>
             <remarks>
             Lists all of a location's Favorites pages in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list Favorites pages for.</param>
             <returns>Task of List&lt;V1Page&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.ListPagesAsyncWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's Favorites pages in Square Register.
             </summary>
             <remarks>
             Lists all of a location's Favorites pages in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list Favorites pages for.</param>
             <returns>Task of ApiResponse (List&lt;V1Page&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RemoveFeeAsync(System.String,System.String,System.String)">
             <summary>
             Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
             </summary>
             <remarks>
             Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="itemId">The ID of the item to add the fee to.</param>
             <param name="feeId">The ID of the fee to apply.</param>
             <returns>Task of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RemoveFeeAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
             </summary>
             <remarks>
             Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="itemId">The ID of the item to add the fee to.</param>
             <param name="feeId">The ID of the fee to apply.</param>
             <returns>Task of ApiResponse (V1Item)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RemoveModifierListAsync(System.String,System.String,System.String)">
             <summary>
             Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
             </summary>
             <remarks>
             Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to remove.</param>
             <param name="itemId">The ID of the item to remove the modifier list from.</param>
             <returns>Task of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RemoveModifierListAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
             </summary>
             <remarks>
             Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to remove.</param>
             <param name="itemId">The ID of the item to remove the modifier list from.</param>
             <returns>Task of ApiResponse (V1Item)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RetrieveItemAsync(System.String,System.String)">
             <summary>
             Provides the details for a single item, including associated modifier lists and fees.
             </summary>
             <remarks>
             Provides the details for a single item, including associated modifier lists and fees.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The item's ID.</param>
             <returns>Task of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RetrieveItemAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Provides the details for a single item, including associated modifier lists and fees.
             </summary>
             <remarks>
             Provides the details for a single item, including associated modifier lists and fees.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The item's ID.</param>
             <returns>Task of ApiResponse (V1Item)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RetrieveModifierListAsync(System.String,System.String)">
             <summary>
             Provides the details for a single modifier list.
             </summary>
             <remarks>
             Provides the details for a single modifier list.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The modifier list's ID.</param>
             <returns>Task of V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.RetrieveModifierListAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Provides the details for a single modifier list.
             </summary>
             <remarks>
             Provides the details for a single modifier list.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The modifier list's ID.</param>
             <returns>Task of ApiResponse (V1ModifierList)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateCategoryAsync(System.String,System.String,Square.Connect.Model.V1Category)">
             <summary>
             Modifies the details of an existing item category.
             </summary>
             <remarks>
             Modifies the details of an existing item category.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the category's associated location.</param>
             <param name="categoryId">The ID of the category to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateCategoryAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Category)">
             <summary>
             Modifies the details of an existing item category.
             </summary>
             <remarks>
             Modifies the details of an existing item category.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the category's associated location.</param>
             <param name="categoryId">The ID of the category to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Category)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateDiscountAsync(System.String,System.String,Square.Connect.Model.V1Discount)">
             <summary>
             Modifies the details of an existing discount.
             </summary>
             <remarks>
             Modifies the details of an existing discount.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the category's associated location.</param>
             <param name="discountId">The ID of the discount to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateDiscountAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Discount)">
             <summary>
             Modifies the details of an existing discount.
             </summary>
             <remarks>
             Modifies the details of an existing discount.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the category's associated location.</param>
             <param name="discountId">The ID of the discount to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Discount)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateFeeAsync(System.String,System.String,Square.Connect.Model.V1Fee)">
             <summary>
             Modifies the details of an existing fee (tax).
             </summary>
             <remarks>
             Modifies the details of an existing fee (tax).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="feeId">The ID of the fee to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateFeeAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Fee)">
             <summary>
             Modifies the details of an existing fee (tax).
             </summary>
             <remarks>
             Modifies the details of an existing fee (tax).
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="feeId">The ID of the fee to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Fee)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateItemAsync(System.String,System.String,Square.Connect.Model.V1Item)">
             <summary>
             Modifies the core details of an existing item.
             </summary>
             <remarks>
             Modifies the core details of an existing item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateItemAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Item)">
             <summary>
             Modifies the core details of an existing item.
             </summary>
             <remarks>
             Modifies the core details of an existing item.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Item)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateModifierListAsync(System.String,System.String,Square.Connect.Model.V1UpdateModifierListRequest)">
             <summary>
             Modifies the details of an existing item modifier list.
             </summary>
             <remarks>
             Modifies the details of an existing item modifier list.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateModifierListAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1UpdateModifierListRequest)">
             <summary>
             Modifies the details of an existing item modifier list.
             </summary>
             <remarks>
             Modifies the details of an existing item modifier list.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1ModifierList)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateModifierOptionAsync(System.String,System.String,System.String,Square.Connect.Model.V1ModifierOption)">
             <summary>
             Modifies the details of an existing item modifier option.
             </summary>
             <remarks>
             Modifies the details of an existing item modifier option.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="modifierOptionId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateModifierOptionAsyncWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.V1ModifierOption)">
             <summary>
             Modifies the details of an existing item modifier option.
             </summary>
             <remarks>
             Modifies the details of an existing item modifier option.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="modifierOptionId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1ModifierOption)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdatePageAsync(System.String,System.String,Square.Connect.Model.V1Page)">
             <summary>
             Modifies the details of a Favorites page in Square Register.
             </summary>
             <remarks>
             Modifies the details of a Favorites page in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location</param>
             <param name="pageId">The ID of the page to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdatePageAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Page)">
             <summary>
             Modifies the details of a Favorites page in Square Register.
             </summary>
             <remarks>
             Modifies the details of a Favorites page in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location</param>
             <param name="pageId">The ID of the page to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Page)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdatePageCellAsync(System.String,System.String,Square.Connect.Model.V1PageCell)">
             <summary>
             Modifies a cell of a Favorites page in Square Register.
             </summary>
             <remarks>
             Modifies a cell of a Favorites page in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page the cell belongs to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdatePageCellAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1PageCell)">
             <summary>
             Modifies a cell of a Favorites page in Square Register.
             </summary>
             <remarks>
             Modifies a cell of a Favorites page in Square Register.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page the cell belongs to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Page)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateVariationAsync(System.String,System.String,System.String,Square.Connect.Model.V1Variation)">
             <summary>
             Modifies the details of an existing item variation.
             </summary>
             <remarks>
             Modifies the details of an existing item variation.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <param name="variationId">The ID of the variation to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1ItemsApi.UpdateVariationAsyncWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.V1Variation)">
             <summary>
             Modifies the details of an existing item variation.
             </summary>
             <remarks>
             Modifies the details of an existing item variation.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <param name="variationId">The ID of the variation to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Variation)</returns>
            </member>
        <member name="T:Square.Connect.Api.V1ItemsApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.V1ItemsApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.V1ItemsApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.V1ItemsApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.V1ItemsApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.AdjustInventory(System.String,System.String,Square.Connect.Model.V1AdjustInventoryRequest)">
             <summary>
             Adjusts an item variation's current available inventory. Adjusts an item variation's current available inventory.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="variationId">The ID of the variation to adjust inventory information for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1InventoryEntry</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.AdjustInventoryWithHttpInfo(System.String,System.String,Square.Connect.Model.V1AdjustInventoryRequest)">
             <summary>
             Adjusts an item variation's current available inventory. Adjusts an item variation's current available inventory.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="variationId">The ID of the variation to adjust inventory information for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1InventoryEntry</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.AdjustInventoryAsync(System.String,System.String,Square.Connect.Model.V1AdjustInventoryRequest)">
             <summary>
             Adjusts an item variation's current available inventory. Adjusts an item variation's current available inventory.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="variationId">The ID of the variation to adjust inventory information for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1InventoryEntry</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.AdjustInventoryAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1AdjustInventoryRequest)">
             <summary>
             Adjusts an item variation's current available inventory. Adjusts an item variation's current available inventory.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="variationId">The ID of the variation to adjust inventory information for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1InventoryEntry)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ApplyFee(System.String,System.String,System.String)">
             <summary>
             Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register. Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="itemId">The ID of the item to add the fee to.</param>
             <param name="feeId">The ID of the fee to apply.</param>
             <returns>V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ApplyFeeWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register. Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="itemId">The ID of the item to add the fee to.</param>
             <param name="feeId">The ID of the fee to apply.</param>
             <returns>ApiResponse of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ApplyFeeAsync(System.String,System.String,System.String)">
             <summary>
             Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register. Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="itemId">The ID of the item to add the fee to.</param>
             <param name="feeId">The ID of the fee to apply.</param>
             <returns>Task of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ApplyFeeAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register. Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="itemId">The ID of the item to add the fee to.</param>
             <param name="feeId">The ID of the fee to apply.</param>
             <returns>Task of ApiResponse (V1Item)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ApplyModifierList(System.String,System.String,System.String)">
             <summary>
             Associates a modifier list with an item, meaning modifier options from the list can be applied to the item. Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to apply.</param>
             <param name="itemId">The ID of the item to add the modifier list to.</param>
             <returns>V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ApplyModifierListWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Associates a modifier list with an item, meaning modifier options from the list can be applied to the item. Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to apply.</param>
             <param name="itemId">The ID of the item to add the modifier list to.</param>
             <returns>ApiResponse of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ApplyModifierListAsync(System.String,System.String,System.String)">
             <summary>
             Associates a modifier list with an item, meaning modifier options from the list can be applied to the item. Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to apply.</param>
             <param name="itemId">The ID of the item to add the modifier list to.</param>
             <returns>Task of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ApplyModifierListAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Associates a modifier list with an item, meaning modifier options from the list can be applied to the item. Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to apply.</param>
             <param name="itemId">The ID of the item to add the modifier list to.</param>
             <returns>Task of ApiResponse (V1Item)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateCategory(System.String,Square.Connect.Model.V1Category)">
             <summary>
             Creates an item category. Creates an item category.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateCategoryWithHttpInfo(System.String,Square.Connect.Model.V1Category)">
             <summary>
             Creates an item category. Creates an item category.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateCategoryAsync(System.String,Square.Connect.Model.V1Category)">
             <summary>
             Creates an item category. Creates an item category.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateCategoryAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Category)">
             <summary>
             Creates an item category. Creates an item category.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Category)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateDiscount(System.String,Square.Connect.Model.V1Discount)">
             <summary>
             Creates a discount. Creates a discount.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateDiscountWithHttpInfo(System.String,Square.Connect.Model.V1Discount)">
             <summary>
             Creates a discount. Creates a discount.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateDiscountAsync(System.String,Square.Connect.Model.V1Discount)">
             <summary>
             Creates a discount. Creates a discount.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateDiscountAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Discount)">
             <summary>
             Creates a discount. Creates a discount.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Discount)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateFee(System.String,Square.Connect.Model.V1Fee)">
             <summary>
             Creates a fee (tax). Creates a fee (tax).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create a fee for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateFeeWithHttpInfo(System.String,Square.Connect.Model.V1Fee)">
             <summary>
             Creates a fee (tax). Creates a fee (tax).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create a fee for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateFeeAsync(System.String,Square.Connect.Model.V1Fee)">
             <summary>
             Creates a fee (tax). Creates a fee (tax).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create a fee for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateFeeAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Fee)">
             <summary>
             Creates a fee (tax). Creates a fee (tax).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create a fee for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Fee)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateItem(System.String,Square.Connect.Model.V1Item)">
             <summary>
             Creates an item and at least one variation for it. Creates an item and at least one variation for it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateItemWithHttpInfo(System.String,Square.Connect.Model.V1Item)">
             <summary>
             Creates an item and at least one variation for it. Creates an item and at least one variation for it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateItemAsync(System.String,Square.Connect.Model.V1Item)">
             <summary>
             Creates an item and at least one variation for it. Creates an item and at least one variation for it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateItemAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Item)">
             <summary>
             Creates an item and at least one variation for it. Creates an item and at least one variation for it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Item)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateModifierList(System.String,Square.Connect.Model.V1ModifierList)">
             <summary>
             Creates an item modifier list and at least one modifier option for it. Creates an item modifier list and at least one modifier option for it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create a modifier list for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateModifierListWithHttpInfo(System.String,Square.Connect.Model.V1ModifierList)">
             <summary>
             Creates an item modifier list and at least one modifier option for it. Creates an item modifier list and at least one modifier option for it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create a modifier list for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateModifierListAsync(System.String,Square.Connect.Model.V1ModifierList)">
             <summary>
             Creates an item modifier list and at least one modifier option for it. Creates an item modifier list and at least one modifier option for it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create a modifier list for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateModifierListAsyncWithHttpInfo(System.String,Square.Connect.Model.V1ModifierList)">
             <summary>
             Creates an item modifier list and at least one modifier option for it. Creates an item modifier list and at least one modifier option for it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create a modifier list for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1ModifierList)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateModifierOption(System.String,System.String,Square.Connect.Model.V1ModifierOption)">
             <summary>
             Creates an item modifier option and adds it to a modifier list. Creates an item modifier option and adds it to a modifier list.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateModifierOptionWithHttpInfo(System.String,System.String,Square.Connect.Model.V1ModifierOption)">
             <summary>
             Creates an item modifier option and adds it to a modifier list. Creates an item modifier option and adds it to a modifier list.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateModifierOptionAsync(System.String,System.String,Square.Connect.Model.V1ModifierOption)">
             <summary>
             Creates an item modifier option and adds it to a modifier list. Creates an item modifier option and adds it to a modifier list.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateModifierOptionAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1ModifierOption)">
             <summary>
             Creates an item modifier option and adds it to a modifier list. Creates an item modifier option and adds it to a modifier list.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1ModifierOption)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreatePage(System.String,Square.Connect.Model.V1Page)">
             <summary>
             Creates a Favorites page in Square Register. Creates a Favorites page in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreatePageWithHttpInfo(System.String,Square.Connect.Model.V1Page)">
             <summary>
             Creates a Favorites page in Square Register. Creates a Favorites page in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreatePageAsync(System.String,Square.Connect.Model.V1Page)">
             <summary>
             Creates a Favorites page in Square Register. Creates a Favorites page in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreatePageAsyncWithHttpInfo(System.String,Square.Connect.Model.V1Page)">
             <summary>
             Creates a Favorites page in Square Register. Creates a Favorites page in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to create an item for.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Page)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateVariation(System.String,System.String,Square.Connect.Model.V1Variation)">
             <summary>
             Creates an item variation for an existing item. Creates an item variation for an existing item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The item's ID.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateVariationWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Variation)">
             <summary>
             Creates an item variation for an existing item. Creates an item variation for an existing item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The item's ID.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateVariationAsync(System.String,System.String,Square.Connect.Model.V1Variation)">
             <summary>
             Creates an item variation for an existing item. Creates an item variation for an existing item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The item's ID.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.CreateVariationAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Variation)">
             <summary>
             Creates an item variation for an existing item. Creates an item variation for an existing item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The item's ID.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Variation)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteCategory(System.String,System.String)">
             <summary>
             Deletes an existing item category. Deletes an existing item category.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="categoryId">The ID of the category to delete.</param>
             <returns>V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteCategoryWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing item category. Deletes an existing item category.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="categoryId">The ID of the category to delete.</param>
             <returns>ApiResponse of V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteCategoryAsync(System.String,System.String)">
             <summary>
             Deletes an existing item category. Deletes an existing item category.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="categoryId">The ID of the category to delete.</param>
             <returns>Task of V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteCategoryAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing item category. Deletes an existing item category.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="categoryId">The ID of the category to delete.</param>
             <returns>Task of ApiResponse (V1Category)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteDiscount(System.String,System.String)">
             <summary>
             Deletes an existing discount. Deletes an existing discount.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="discountId">The ID of the discount to delete.</param>
             <returns>V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteDiscountWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing discount. Deletes an existing discount.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="discountId">The ID of the discount to delete.</param>
             <returns>ApiResponse of V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteDiscountAsync(System.String,System.String)">
             <summary>
             Deletes an existing discount. Deletes an existing discount.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="discountId">The ID of the discount to delete.</param>
             <returns>Task of V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteDiscountAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing discount. Deletes an existing discount.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="discountId">The ID of the discount to delete.</param>
             <returns>Task of ApiResponse (V1Discount)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteFee(System.String,System.String)">
             <summary>
             Deletes an existing fee (tax). Deletes an existing fee (tax).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="feeId">The ID of the fee to delete.</param>
             <returns>V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteFeeWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing fee (tax). Deletes an existing fee (tax).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="feeId">The ID of the fee to delete.</param>
             <returns>ApiResponse of V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteFeeAsync(System.String,System.String)">
             <summary>
             Deletes an existing fee (tax). Deletes an existing fee (tax).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="feeId">The ID of the fee to delete.</param>
             <returns>Task of V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteFeeAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing fee (tax). Deletes an existing fee (tax).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="feeId">The ID of the fee to delete.</param>
             <returns>Task of ApiResponse (V1Fee)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteItem(System.String,System.String)">
             <summary>
             Deletes an existing item and all item variations associated with it. Deletes an existing item and all item variations associated with it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <returns>V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteItemWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing item and all item variations associated with it. Deletes an existing item and all item variations associated with it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <returns>ApiResponse of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteItemAsync(System.String,System.String)">
             <summary>
             Deletes an existing item and all item variations associated with it. Deletes an existing item and all item variations associated with it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <returns>Task of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteItemAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing item and all item variations associated with it. Deletes an existing item and all item variations associated with it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <returns>Task of ApiResponse (V1Item)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteModifierList(System.String,System.String)">
             <summary>
             Deletes an existing item modifier list and all modifier options associated with it. Deletes an existing item modifier list and all modifier options associated with it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to delete.</param>
             <returns>V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteModifierListWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing item modifier list and all modifier options associated with it. Deletes an existing item modifier list and all modifier options associated with it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to delete.</param>
             <returns>ApiResponse of V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteModifierListAsync(System.String,System.String)">
             <summary>
             Deletes an existing item modifier list and all modifier options associated with it. Deletes an existing item modifier list and all modifier options associated with it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to delete.</param>
             <returns>Task of V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteModifierListAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing item modifier list and all modifier options associated with it. Deletes an existing item modifier list and all modifier options associated with it.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to delete.</param>
             <returns>Task of ApiResponse (V1ModifierList)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteModifierOption(System.String,System.String,System.String)">
             <summary>
             Deletes an existing item modifier option from a modifier list. Deletes an existing item modifier option from a modifier list.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to delete.</param>
             <param name="modifierOptionId">The ID of the modifier list to edit.</param>
             <returns>V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteModifierOptionWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Deletes an existing item modifier option from a modifier list. Deletes an existing item modifier option from a modifier list.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to delete.</param>
             <param name="modifierOptionId">The ID of the modifier list to edit.</param>
             <returns>ApiResponse of V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteModifierOptionAsync(System.String,System.String,System.String)">
             <summary>
             Deletes an existing item modifier option from a modifier list. Deletes an existing item modifier option from a modifier list.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to delete.</param>
             <param name="modifierOptionId">The ID of the modifier list to edit.</param>
             <returns>Task of V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteModifierOptionAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Deletes an existing item modifier option from a modifier list. Deletes an existing item modifier option from a modifier list.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to delete.</param>
             <param name="modifierOptionId">The ID of the modifier list to edit.</param>
             <returns>Task of ApiResponse (V1ModifierOption)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeletePage(System.String,System.String)">
             <summary>
             Deletes an existing Favorites page and all of its cells. Deletes an existing Favorites page and all of its cells.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page to delete.</param>
             <returns>V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeletePageWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing Favorites page and all of its cells. Deletes an existing Favorites page and all of its cells.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page to delete.</param>
             <returns>ApiResponse of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeletePageAsync(System.String,System.String)">
             <summary>
             Deletes an existing Favorites page and all of its cells. Deletes an existing Favorites page and all of its cells.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page to delete.</param>
             <returns>Task of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeletePageAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Deletes an existing Favorites page and all of its cells. Deletes an existing Favorites page and all of its cells.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page to delete.</param>
             <returns>Task of ApiResponse (V1Page)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeletePageCell(System.String,System.String,System.String,System.String)">
             <summary>
             Deletes a cell from a Favorites page in Square Register. Deletes a cell from a Favorites page in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page to delete.</param>
             <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
             <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
             <returns>V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeletePageCellWithHttpInfo(System.String,System.String,System.String,System.String)">
             <summary>
             Deletes a cell from a Favorites page in Square Register. Deletes a cell from a Favorites page in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page to delete.</param>
             <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
             <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
             <returns>ApiResponse of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeletePageCellAsync(System.String,System.String,System.String,System.String)">
             <summary>
             Deletes a cell from a Favorites page in Square Register. Deletes a cell from a Favorites page in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page to delete.</param>
             <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
             <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
             <returns>Task of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeletePageCellAsyncWithHttpInfo(System.String,System.String,System.String,System.String)">
             <summary>
             Deletes a cell from a Favorites page in Square Register. Deletes a cell from a Favorites page in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page to delete.</param>
             <param name="row">The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)</param>
             <param name="column">The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)</param>
             <returns>Task of ApiResponse (V1Page)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteVariation(System.String,System.String,System.String)">
             <summary>
             Deletes an existing item variation from an item. Deletes an existing item variation from an item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to delete.</param>
             <param name="variationId">The ID of the variation to delete.</param>
             <returns>V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteVariationWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Deletes an existing item variation from an item. Deletes an existing item variation from an item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to delete.</param>
             <param name="variationId">The ID of the variation to delete.</param>
             <returns>ApiResponse of V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteVariationAsync(System.String,System.String,System.String)">
             <summary>
             Deletes an existing item variation from an item. Deletes an existing item variation from an item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to delete.</param>
             <param name="variationId">The ID of the variation to delete.</param>
             <returns>Task of V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.DeleteVariationAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Deletes an existing item variation from an item. Deletes an existing item variation from an item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to delete.</param>
             <param name="variationId">The ID of the variation to delete.</param>
             <returns>Task of ApiResponse (V1Variation)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListCategories(System.String)">
             <summary>
             Lists all of a location's item categories. Lists all of a location's item categories.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list categories for.</param>
             <returns>List&lt;V1Category&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListCategoriesWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's item categories. Lists all of a location's item categories.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list categories for.</param>
             <returns>ApiResponse of List&lt;V1Category&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListCategoriesAsync(System.String)">
             <summary>
             Lists all of a location's item categories. Lists all of a location's item categories.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list categories for.</param>
             <returns>Task of List&lt;V1Category&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListCategoriesAsyncWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's item categories. Lists all of a location's item categories.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list categories for.</param>
             <returns>Task of ApiResponse (List&lt;V1Category&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListDiscounts(System.String)">
             <summary>
             Lists all of a location's discounts. Lists all of a location's discounts.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list categories for.</param>
             <returns>List&lt;V1Discount&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListDiscountsWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's discounts. Lists all of a location's discounts.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list categories for.</param>
             <returns>ApiResponse of List&lt;V1Discount&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListDiscountsAsync(System.String)">
             <summary>
             Lists all of a location's discounts. Lists all of a location's discounts.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list categories for.</param>
             <returns>Task of List&lt;V1Discount&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListDiscountsAsyncWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's discounts. Lists all of a location's discounts.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list categories for.</param>
             <returns>Task of ApiResponse (List&lt;V1Discount&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListFees(System.String)">
             <summary>
             Lists all of a location's fees (taxes). Lists all of a location's fees (taxes).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list fees for.</param>
             <returns>List&lt;V1Fee&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListFeesWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's fees (taxes). Lists all of a location's fees (taxes).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list fees for.</param>
             <returns>ApiResponse of List&lt;V1Fee&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListFeesAsync(System.String)">
             <summary>
             Lists all of a location's fees (taxes). Lists all of a location's fees (taxes).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list fees for.</param>
             <returns>Task of List&lt;V1Fee&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListFeesAsyncWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's fees (taxes). Lists all of a location's fees (taxes).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list fees for.</param>
             <returns>Task of ApiResponse (List&lt;V1Fee&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListInventory(System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides inventory information for all of a merchant's inventory-enabled item variations. Provides inventory information for all of a merchant's inventory-enabled item variations.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1InventoryEntry&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListInventoryWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides inventory information for all of a merchant's inventory-enabled item variations. Provides inventory information for all of a merchant's inventory-enabled item variations.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1InventoryEntry&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListInventoryAsync(System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides inventory information for all of a merchant's inventory-enabled item variations. Provides inventory information for all of a merchant's inventory-enabled item variations.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1InventoryEntry&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListInventoryAsyncWithHttpInfo(System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides inventory information for all of a merchant's inventory-enabled item variations. Provides inventory information for all of a merchant's inventory-enabled item variations.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="limit">The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1InventoryEntry&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListItems(System.String,System.String)">
             <summary>
             Provides summary information for all of a location's items. Provides summary information for all of a location's items.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list items for.</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1Item&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListItemsWithHttpInfo(System.String,System.String)">
             <summary>
             Provides summary information for all of a location's items. Provides summary information for all of a location's items.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list items for.</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1Item&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListItemsAsync(System.String,System.String)">
             <summary>
             Provides summary information for all of a location's items. Provides summary information for all of a location's items.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list items for.</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1Item&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListItemsAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Provides summary information for all of a location's items. Provides summary information for all of a location's items.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list items for.</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1Item&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListModifierLists(System.String)">
             <summary>
             Lists all of a location's modifier lists. Lists all of a location's modifier lists.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list modifier lists for.</param>
             <returns>List&lt;V1ModifierList&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListModifierListsWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's modifier lists. Lists all of a location's modifier lists.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list modifier lists for.</param>
             <returns>ApiResponse of List&lt;V1ModifierList&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListModifierListsAsync(System.String)">
             <summary>
             Lists all of a location's modifier lists. Lists all of a location's modifier lists.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list modifier lists for.</param>
             <returns>Task of List&lt;V1ModifierList&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListModifierListsAsyncWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's modifier lists. Lists all of a location's modifier lists.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list modifier lists for.</param>
             <returns>Task of ApiResponse (List&lt;V1ModifierList&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListPages(System.String)">
             <summary>
             Lists all of a location's Favorites pages in Square Register. Lists all of a location's Favorites pages in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list Favorites pages for.</param>
             <returns>List&lt;V1Page&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListPagesWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's Favorites pages in Square Register. Lists all of a location's Favorites pages in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list Favorites pages for.</param>
             <returns>ApiResponse of List&lt;V1Page&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListPagesAsync(System.String)">
             <summary>
             Lists all of a location's Favorites pages in Square Register. Lists all of a location's Favorites pages in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list Favorites pages for.</param>
             <returns>Task of List&lt;V1Page&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.ListPagesAsyncWithHttpInfo(System.String)">
             <summary>
             Lists all of a location's Favorites pages in Square Register. Lists all of a location's Favorites pages in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list Favorites pages for.</param>
             <returns>Task of ApiResponse (List&lt;V1Page&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RemoveFee(System.String,System.String,System.String)">
             <summary>
             Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register. Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="itemId">The ID of the item to add the fee to.</param>
             <param name="feeId">The ID of the fee to apply.</param>
             <returns>V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RemoveFeeWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register. Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="itemId">The ID of the item to add the fee to.</param>
             <param name="feeId">The ID of the fee to apply.</param>
             <returns>ApiResponse of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RemoveFeeAsync(System.String,System.String,System.String)">
             <summary>
             Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register. Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="itemId">The ID of the item to add the fee to.</param>
             <param name="feeId">The ID of the fee to apply.</param>
             <returns>Task of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RemoveFeeAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register. Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="itemId">The ID of the item to add the fee to.</param>
             <param name="feeId">The ID of the fee to apply.</param>
             <returns>Task of ApiResponse (V1Item)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RemoveModifierList(System.String,System.String,System.String)">
             <summary>
             Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item. Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to remove.</param>
             <param name="itemId">The ID of the item to remove the modifier list from.</param>
             <returns>V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RemoveModifierListWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item. Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to remove.</param>
             <param name="itemId">The ID of the item to remove the modifier list from.</param>
             <returns>ApiResponse of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RemoveModifierListAsync(System.String,System.String,System.String)">
             <summary>
             Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item. Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to remove.</param>
             <param name="itemId">The ID of the item to remove the modifier list from.</param>
             <returns>Task of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RemoveModifierListAsyncWithHttpInfo(System.String,System.String,System.String)">
             <summary>
             Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item. Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to remove.</param>
             <param name="itemId">The ID of the item to remove the modifier list from.</param>
             <returns>Task of ApiResponse (V1Item)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RetrieveItem(System.String,System.String)">
             <summary>
             Provides the details for a single item, including associated modifier lists and fees. Provides the details for a single item, including associated modifier lists and fees.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The item's ID.</param>
             <returns>V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RetrieveItemWithHttpInfo(System.String,System.String)">
             <summary>
             Provides the details for a single item, including associated modifier lists and fees. Provides the details for a single item, including associated modifier lists and fees.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The item's ID.</param>
             <returns>ApiResponse of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RetrieveItemAsync(System.String,System.String)">
             <summary>
             Provides the details for a single item, including associated modifier lists and fees. Provides the details for a single item, including associated modifier lists and fees.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The item's ID.</param>
             <returns>Task of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RetrieveItemAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Provides the details for a single item, including associated modifier lists and fees. Provides the details for a single item, including associated modifier lists and fees.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The item's ID.</param>
             <returns>Task of ApiResponse (V1Item)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RetrieveModifierList(System.String,System.String)">
             <summary>
             Provides the details for a single modifier list. Provides the details for a single modifier list.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The modifier list's ID.</param>
             <returns>V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RetrieveModifierListWithHttpInfo(System.String,System.String)">
             <summary>
             Provides the details for a single modifier list. Provides the details for a single modifier list.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The modifier list's ID.</param>
             <returns>ApiResponse of V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RetrieveModifierListAsync(System.String,System.String)">
             <summary>
             Provides the details for a single modifier list. Provides the details for a single modifier list.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The modifier list's ID.</param>
             <returns>Task of V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.RetrieveModifierListAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Provides the details for a single modifier list. Provides the details for a single modifier list.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The modifier list's ID.</param>
             <returns>Task of ApiResponse (V1ModifierList)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateCategory(System.String,System.String,Square.Connect.Model.V1Category)">
             <summary>
             Modifies the details of an existing item category. Modifies the details of an existing item category.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the category's associated location.</param>
             <param name="categoryId">The ID of the category to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateCategoryWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Category)">
             <summary>
             Modifies the details of an existing item category. Modifies the details of an existing item category.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the category's associated location.</param>
             <param name="categoryId">The ID of the category to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateCategoryAsync(System.String,System.String,Square.Connect.Model.V1Category)">
             <summary>
             Modifies the details of an existing item category. Modifies the details of an existing item category.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the category's associated location.</param>
             <param name="categoryId">The ID of the category to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Category</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateCategoryAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Category)">
             <summary>
             Modifies the details of an existing item category. Modifies the details of an existing item category.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the category's associated location.</param>
             <param name="categoryId">The ID of the category to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Category)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateDiscount(System.String,System.String,Square.Connect.Model.V1Discount)">
             <summary>
             Modifies the details of an existing discount. Modifies the details of an existing discount.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the category's associated location.</param>
             <param name="discountId">The ID of the discount to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateDiscountWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Discount)">
             <summary>
             Modifies the details of an existing discount. Modifies the details of an existing discount.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the category's associated location.</param>
             <param name="discountId">The ID of the discount to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateDiscountAsync(System.String,System.String,Square.Connect.Model.V1Discount)">
             <summary>
             Modifies the details of an existing discount. Modifies the details of an existing discount.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the category's associated location.</param>
             <param name="discountId">The ID of the discount to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Discount</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateDiscountAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Discount)">
             <summary>
             Modifies the details of an existing discount. Modifies the details of an existing discount.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the category's associated location.</param>
             <param name="discountId">The ID of the discount to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Discount)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateFee(System.String,System.String,Square.Connect.Model.V1Fee)">
             <summary>
             Modifies the details of an existing fee (tax). Modifies the details of an existing fee (tax).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="feeId">The ID of the fee to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateFeeWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Fee)">
             <summary>
             Modifies the details of an existing fee (tax). Modifies the details of an existing fee (tax).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="feeId">The ID of the fee to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateFeeAsync(System.String,System.String,Square.Connect.Model.V1Fee)">
             <summary>
             Modifies the details of an existing fee (tax). Modifies the details of an existing fee (tax).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="feeId">The ID of the fee to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Fee</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateFeeAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Fee)">
             <summary>
             Modifies the details of an existing fee (tax). Modifies the details of an existing fee (tax).
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the fee's associated location.</param>
             <param name="feeId">The ID of the fee to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Fee)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateItem(System.String,System.String,Square.Connect.Model.V1Item)">
             <summary>
             Modifies the core details of an existing item. Modifies the core details of an existing item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateItemWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Item)">
             <summary>
             Modifies the core details of an existing item. Modifies the core details of an existing item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateItemAsync(System.String,System.String,Square.Connect.Model.V1Item)">
             <summary>
             Modifies the core details of an existing item. Modifies the core details of an existing item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Item</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateItemAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Item)">
             <summary>
             Modifies the core details of an existing item. Modifies the core details of an existing item.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Item)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateModifierList(System.String,System.String,Square.Connect.Model.V1UpdateModifierListRequest)">
             <summary>
             Modifies the details of an existing item modifier list. Modifies the details of an existing item modifier list.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateModifierListWithHttpInfo(System.String,System.String,Square.Connect.Model.V1UpdateModifierListRequest)">
             <summary>
             Modifies the details of an existing item modifier list. Modifies the details of an existing item modifier list.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateModifierListAsync(System.String,System.String,Square.Connect.Model.V1UpdateModifierListRequest)">
             <summary>
             Modifies the details of an existing item modifier list. Modifies the details of an existing item modifier list.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1ModifierList</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateModifierListAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1UpdateModifierListRequest)">
             <summary>
             Modifies the details of an existing item modifier list. Modifies the details of an existing item modifier list.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1ModifierList)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateModifierOption(System.String,System.String,System.String,Square.Connect.Model.V1ModifierOption)">
             <summary>
             Modifies the details of an existing item modifier option. Modifies the details of an existing item modifier option.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="modifierOptionId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateModifierOptionWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.V1ModifierOption)">
             <summary>
             Modifies the details of an existing item modifier option. Modifies the details of an existing item modifier option.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="modifierOptionId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateModifierOptionAsync(System.String,System.String,System.String,Square.Connect.Model.V1ModifierOption)">
             <summary>
             Modifies the details of an existing item modifier option. Modifies the details of an existing item modifier option.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="modifierOptionId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1ModifierOption</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateModifierOptionAsyncWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.V1ModifierOption)">
             <summary>
             Modifies the details of an existing item modifier option. Modifies the details of an existing item modifier option.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="modifierListId">The ID of the modifier list to edit.</param>
             <param name="modifierOptionId">The ID of the modifier list to edit.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1ModifierOption)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdatePage(System.String,System.String,Square.Connect.Model.V1Page)">
             <summary>
             Modifies the details of a Favorites page in Square Register. Modifies the details of a Favorites page in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location</param>
             <param name="pageId">The ID of the page to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdatePageWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Page)">
             <summary>
             Modifies the details of a Favorites page in Square Register. Modifies the details of a Favorites page in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location</param>
             <param name="pageId">The ID of the page to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdatePageAsync(System.String,System.String,Square.Connect.Model.V1Page)">
             <summary>
             Modifies the details of a Favorites page in Square Register. Modifies the details of a Favorites page in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location</param>
             <param name="pageId">The ID of the page to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdatePageAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1Page)">
             <summary>
             Modifies the details of a Favorites page in Square Register. Modifies the details of a Favorites page in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location</param>
             <param name="pageId">The ID of the page to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Page)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdatePageCell(System.String,System.String,Square.Connect.Model.V1PageCell)">
             <summary>
             Modifies a cell of a Favorites page in Square Register. Modifies a cell of a Favorites page in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page the cell belongs to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdatePageCellWithHttpInfo(System.String,System.String,Square.Connect.Model.V1PageCell)">
             <summary>
             Modifies a cell of a Favorites page in Square Register. Modifies a cell of a Favorites page in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page the cell belongs to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdatePageCellAsync(System.String,System.String,Square.Connect.Model.V1PageCell)">
             <summary>
             Modifies a cell of a Favorites page in Square Register. Modifies a cell of a Favorites page in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page the cell belongs to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Page</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdatePageCellAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1PageCell)">
             <summary>
             Modifies a cell of a Favorites page in Square Register. Modifies a cell of a Favorites page in Square Register.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the Favorites page's associated location.</param>
             <param name="pageId">The ID of the page the cell belongs to.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Page)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateVariation(System.String,System.String,System.String,Square.Connect.Model.V1Variation)">
             <summary>
             Modifies the details of an existing item variation. Modifies the details of an existing item variation.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <param name="variationId">The ID of the variation to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateVariationWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.V1Variation)">
             <summary>
             Modifies the details of an existing item variation. Modifies the details of an existing item variation.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <param name="variationId">The ID of the variation to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateVariationAsync(System.String,System.String,System.String,Square.Connect.Model.V1Variation)">
             <summary>
             Modifies the details of an existing item variation. Modifies the details of an existing item variation.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <param name="variationId">The ID of the variation to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Variation</returns>
            </member>
        <member name="M:Square.Connect.Api.V1ItemsApi.UpdateVariationAsyncWithHttpInfo(System.String,System.String,System.String,Square.Connect.Model.V1Variation)">
             <summary>
             Modifies the details of an existing item variation. Modifies the details of an existing item variation.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the item's associated location.</param>
             <param name="itemId">The ID of the item to modify.</param>
             <param name="variationId">The ID of the variation to modify.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Variation)</returns>
            </member>
        <member name="T:Square.Connect.Api.IV1LocationsApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.IV1LocationsApi.ListLocations">
             <summary>
             Provides details for a business's locations, including their IDs.
             </summary>
             <remarks>
             Provides details for a business's locations, including their IDs.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>List&lt;V1Merchant&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1LocationsApi.ListLocationsWithHttpInfo">
             <summary>
             Provides details for a business's locations, including their IDs.
             </summary>
             <remarks>
             Provides details for a business's locations, including their IDs.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>ApiResponse of List&lt;V1Merchant&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1LocationsApi.RetrieveBusiness">
             <summary>
             Get a business's information.
             </summary>
             <remarks>
             Get a business's information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>V1Merchant</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1LocationsApi.RetrieveBusinessWithHttpInfo">
             <summary>
             Get a business's information.
             </summary>
             <remarks>
             Get a business's information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>ApiResponse of V1Merchant</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1LocationsApi.ListLocationsAsync">
             <summary>
             Provides details for a business's locations, including their IDs.
             </summary>
             <remarks>
             Provides details for a business's locations, including their IDs.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>Task of List&lt;V1Merchant&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1LocationsApi.ListLocationsAsyncWithHttpInfo">
             <summary>
             Provides details for a business's locations, including their IDs.
             </summary>
             <remarks>
             Provides details for a business's locations, including their IDs.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>Task of ApiResponse (List&lt;V1Merchant&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1LocationsApi.RetrieveBusinessAsync">
             <summary>
             Get a business's information.
             </summary>
             <remarks>
             Get a business's information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>Task of V1Merchant</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1LocationsApi.RetrieveBusinessAsyncWithHttpInfo">
             <summary>
             Get a business's information.
             </summary>
             <remarks>
             Get a business's information.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>Task of ApiResponse (V1Merchant)</returns>
            </member>
        <member name="T:Square.Connect.Api.V1LocationsApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.V1LocationsApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.V1LocationsApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.V1LocationsApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.V1LocationsApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.ListLocations">
             <summary>
             Provides details for a business's locations, including their IDs. Provides details for a business's locations, including their IDs.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>List&lt;V1Merchant&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.ListLocationsWithHttpInfo">
             <summary>
             Provides details for a business's locations, including their IDs. Provides details for a business's locations, including their IDs.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>ApiResponse of List&lt;V1Merchant&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.ListLocationsAsync">
             <summary>
             Provides details for a business's locations, including their IDs. Provides details for a business's locations, including their IDs.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>Task of List&lt;V1Merchant&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.ListLocationsAsyncWithHttpInfo">
             <summary>
             Provides details for a business's locations, including their IDs. Provides details for a business's locations, including their IDs.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>Task of ApiResponse (List&lt;V1Merchant&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.RetrieveBusiness">
             <summary>
             Get a business's information. Get a business's information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>V1Merchant</returns>
            </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.RetrieveBusinessWithHttpInfo">
             <summary>
             Get a business's information. Get a business's information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>ApiResponse of V1Merchant</returns>
            </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.RetrieveBusinessAsync">
             <summary>
             Get a business's information. Get a business's information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>Task of V1Merchant</returns>
            </member>
        <member name="M:Square.Connect.Api.V1LocationsApi.RetrieveBusinessAsyncWithHttpInfo">
             <summary>
             Get a business's information. Get a business's information.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <returns>Task of ApiResponse (V1Merchant)</returns>
            </member>
        <member name="T:Square.Connect.Api.IV1TransactionsApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.CreateRefund(System.String,Square.Connect.Model.V1CreateRefundRequest)">
             <summary>
             Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.
             </summary>
             <remarks>
             Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the original payment's associated location.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Refund</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.CreateRefundWithHttpInfo(System.String,Square.Connect.Model.V1CreateRefundRequest)">
             <summary>
             Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.
             </summary>
             <remarks>
             Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the original payment's associated location.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Refund</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListBankAccounts(System.String)">
             <summary>
             Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </summary>
             <remarks>
             Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list bank accounts for.</param>
             <returns>List&lt;V1BankAccount&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListBankAccountsWithHttpInfo(System.String)">
             <summary>
             Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </summary>
             <remarks>
             Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list bank accounts for.</param>
             <returns>ApiResponse of List&lt;V1BankAccount&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListOrders(System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for a merchant's online store orders.
             </summary>
             <remarks>
             Provides summary information for a merchant's online store orders.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list online store orders for.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1Order&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListOrdersWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for a merchant's online store orders.
             </summary>
             <remarks>
             Provides summary information for a merchant's online store orders.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list online store orders for.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1Order&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListPayments(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates.
             </summary>
             <remarks>
             Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
             <param name="order">The order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1Payment&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListPaymentsWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates.
             </summary>
             <remarks>
             Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
             <param name="order">The order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1Payment&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListRefunds(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
             </summary>
             <remarks>
             Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1Refund&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListRefundsWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
             </summary>
             <remarks>
             Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1Refund&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListSettlements(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
             <summary>
             Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length.
             </summary>
             <remarks>
             Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length. 
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1Settlement&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListSettlementsWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
             <summary>
             Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length.
             </summary>
             <remarks>
             Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length. 
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1Settlement&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveBankAccount(System.String,System.String)">
             <summary>
             Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </summary>
             <remarks>
             Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the bank account's associated location.</param>
             <param name="bankAccountId">The bank account's Square-issued ID. You obtain this value from Settlement objects returned.</param>
             <returns>V1BankAccount</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveBankAccountWithHttpInfo(System.String,System.String)">
             <summary>
             Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </summary>
             <remarks>
             Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the bank account's associated location.</param>
             <param name="bankAccountId">The bank account's Square-issued ID. You obtain this value from Settlement objects returned.</param>
             <returns>ApiResponse of V1BankAccount</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveOrder(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single online store order, including the order's history.
             </summary>
             <remarks>
             Provides comprehensive information for a single online store order, including the order's history.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the order's associated location.</param>
             <param name="orderId">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
             <returns>V1Order</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveOrderWithHttpInfo(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single online store order, including the order's history.
             </summary>
             <remarks>
             Provides comprehensive information for a single online store order, including the order's history.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the order's associated location.</param>
             <param name="orderId">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
             <returns>ApiResponse of V1Order</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrievePayment(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single payment.
             </summary>
             <remarks>
             Provides comprehensive information for a single payment.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the payment's associated location.</param>
             <param name="paymentId">The payment's Square-issued ID. You obtain this value from Payment objects returned by the List Payments endpoint, or Settlement objects returned by the List Settlements endpoint.</param>
             <returns>V1Payment</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrievePaymentWithHttpInfo(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single payment.
             </summary>
             <remarks>
             Provides comprehensive information for a single payment.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the payment's associated location.</param>
             <param name="paymentId">The payment's Square-issued ID. You obtain this value from Payment objects returned by the List Payments endpoint, or Settlement objects returned by the List Settlements endpoint.</param>
             <returns>ApiResponse of V1Payment</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveSettlement(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total.
             </summary>
             <remarks>
             Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the settlements's associated location.</param>
             <param name="settlementId">The settlement's Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
             <returns>V1Settlement</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveSettlementWithHttpInfo(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total.
             </summary>
             <remarks>
             Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the settlements's associated location.</param>
             <param name="settlementId">The settlement's Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
             <returns>ApiResponse of V1Settlement</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.UpdateOrder(System.String,System.String,Square.Connect.Model.V1UpdateOrderRequest)">
             <summary>
             Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
             </summary>
             <remarks>
             Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the order's associated location.</param>
             <param name="orderId">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Order</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.UpdateOrderWithHttpInfo(System.String,System.String,Square.Connect.Model.V1UpdateOrderRequest)">
             <summary>
             Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
             </summary>
             <remarks>
             Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the order's associated location.</param>
             <param name="orderId">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Order</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.CreateRefundAsync(System.String,Square.Connect.Model.V1CreateRefundRequest)">
             <summary>
             Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.
             </summary>
             <remarks>
             Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the original payment's associated location.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Refund</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.CreateRefundAsyncWithHttpInfo(System.String,Square.Connect.Model.V1CreateRefundRequest)">
             <summary>
             Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.
             </summary>
             <remarks>
             Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the original payment's associated location.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Refund)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListBankAccountsAsync(System.String)">
             <summary>
             Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </summary>
             <remarks>
             Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list bank accounts for.</param>
             <returns>Task of List&lt;V1BankAccount&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListBankAccountsAsyncWithHttpInfo(System.String)">
             <summary>
             Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </summary>
             <remarks>
             Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list bank accounts for.</param>
             <returns>Task of ApiResponse (List&lt;V1BankAccount&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListOrdersAsync(System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for a merchant's online store orders.
             </summary>
             <remarks>
             Provides summary information for a merchant's online store orders.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list online store orders for.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1Order&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListOrdersAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for a merchant's online store orders.
             </summary>
             <remarks>
             Provides summary information for a merchant's online store orders.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list online store orders for.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1Order&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListPaymentsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates.
             </summary>
             <remarks>
             Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
             <param name="order">The order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1Payment&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListPaymentsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates.
             </summary>
             <remarks>
             Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
             <param name="order">The order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1Payment&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListRefundsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
             </summary>
             <remarks>
             Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1Refund&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListRefundsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
             </summary>
             <remarks>
             Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1Refund&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListSettlementsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
             <summary>
             Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length.
             </summary>
             <remarks>
             Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length. 
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1Settlement&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.ListSettlementsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
             <summary>
             Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length.
             </summary>
             <remarks>
             Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length. 
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1Settlement&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveBankAccountAsync(System.String,System.String)">
             <summary>
             Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </summary>
             <remarks>
             Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the bank account's associated location.</param>
             <param name="bankAccountId">The bank account's Square-issued ID. You obtain this value from Settlement objects returned.</param>
             <returns>Task of V1BankAccount</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveBankAccountAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </summary>
             <remarks>
             Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the bank account's associated location.</param>
             <param name="bankAccountId">The bank account's Square-issued ID. You obtain this value from Settlement objects returned.</param>
             <returns>Task of ApiResponse (V1BankAccount)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveOrderAsync(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single online store order, including the order's history.
             </summary>
             <remarks>
             Provides comprehensive information for a single online store order, including the order's history.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the order's associated location.</param>
             <param name="orderId">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
             <returns>Task of V1Order</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveOrderAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single online store order, including the order's history.
             </summary>
             <remarks>
             Provides comprehensive information for a single online store order, including the order's history.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the order's associated location.</param>
             <param name="orderId">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
             <returns>Task of ApiResponse (V1Order)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrievePaymentAsync(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single payment.
             </summary>
             <remarks>
             Provides comprehensive information for a single payment.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the payment's associated location.</param>
             <param name="paymentId">The payment's Square-issued ID. You obtain this value from Payment objects returned by the List Payments endpoint, or Settlement objects returned by the List Settlements endpoint.</param>
             <returns>Task of V1Payment</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrievePaymentAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single payment.
             </summary>
             <remarks>
             Provides comprehensive information for a single payment.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the payment's associated location.</param>
             <param name="paymentId">The payment's Square-issued ID. You obtain this value from Payment objects returned by the List Payments endpoint, or Settlement objects returned by the List Settlements endpoint.</param>
             <returns>Task of ApiResponse (V1Payment)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveSettlementAsync(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total.
             </summary>
             <remarks>
             Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the settlements's associated location.</param>
             <param name="settlementId">The settlement's Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
             <returns>Task of V1Settlement</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.RetrieveSettlementAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total.
             </summary>
             <remarks>
             Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total.
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the settlements's associated location.</param>
             <param name="settlementId">The settlement's Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
             <returns>Task of ApiResponse (V1Settlement)</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.UpdateOrderAsync(System.String,System.String,Square.Connect.Model.V1UpdateOrderRequest)">
             <summary>
             Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
             </summary>
             <remarks>
             Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the order's associated location.</param>
             <param name="orderId">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Order</returns>
            </member>
        <member name="M:Square.Connect.Api.IV1TransactionsApi.UpdateOrderAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1UpdateOrderRequest)">
             <summary>
             Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
             </summary>
             <remarks>
             Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
             </remarks>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the order's associated location.</param>
             <param name="orderId">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Order)</returns>
            </member>
        <member name="T:Square.Connect.Api.V1TransactionsApi">
             <summary>
             Represents a collection of functions to interact with the API endpoints
             </summary>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.V1TransactionsApi" /> class.
             </summary>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Api.V1TransactionsApi" /> class
             using Configuration object
             </summary>
             <param name="configuration">An instance of Configuration</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.SetBasePath(System.String)">
             <summary>
             Sets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Api.V1TransactionsApi.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="P:Square.Connect.Api.V1TransactionsApi.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.DefaultHeader">
             <summary>
             Gets the default header.
             </summary>
             <returns>Dictionary of HTTP header</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.CreateRefund(System.String,Square.Connect.Model.V1CreateRefundRequest)">
             <summary>
             Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment. Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the original payment's associated location.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Refund</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.CreateRefundWithHttpInfo(System.String,Square.Connect.Model.V1CreateRefundRequest)">
             <summary>
             Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment. Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the original payment's associated location.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Refund</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.CreateRefundAsync(System.String,Square.Connect.Model.V1CreateRefundRequest)">
             <summary>
             Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment. Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the original payment's associated location.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Refund</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.CreateRefundAsyncWithHttpInfo(System.String,Square.Connect.Model.V1CreateRefundRequest)">
             <summary>
             Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment. Issues a refund for a previously processed payment. You must issue a refund within 60 days of the associated payment.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the original payment's associated location.</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Refund)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListBankAccounts(System.String)">
             <summary>
             Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API. Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list bank accounts for.</param>
             <returns>List&lt;V1BankAccount&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListBankAccountsWithHttpInfo(System.String)">
             <summary>
             Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API. Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list bank accounts for.</param>
             <returns>ApiResponse of List&lt;V1BankAccount&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListBankAccountsAsync(System.String)">
             <summary>
             Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API. Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list bank accounts for.</param>
             <returns>Task of List&lt;V1BankAccount&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListBankAccountsAsyncWithHttpInfo(System.String)">
             <summary>
             Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API. Provides non-confidential details for all of a location's associated bank accounts. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list bank accounts for.</param>
             <returns>Task of ApiResponse (List&lt;V1BankAccount&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListOrders(System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for a merchant's online store orders. Provides summary information for a merchant's online store orders.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list online store orders for.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1Order&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListOrdersWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for a merchant's online store orders. Provides summary information for a merchant's online store orders.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list online store orders for.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1Order&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListOrdersAsync(System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for a merchant's online store orders. Provides summary information for a merchant's online store orders.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list online store orders for.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1Order&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListOrdersAsyncWithHttpInfo(System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for a merchant's online store orders. Provides summary information for a merchant's online store orders.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list online store orders for.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1Order&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListPayments(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates. Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
             <param name="order">The order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1Payment&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListPaymentsWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates. Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
             <param name="order">The order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1Payment&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListPaymentsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates. Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
             <param name="order">The order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1Payment&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListPaymentsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates. Provides summary information for all payments taken by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. See Date ranges for details of inclusive and exclusive dates.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list payments for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
             <param name="order">The order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1Payment&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListRefunds(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1Refund&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListRefundsWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1Refund&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListRefundsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1Refund&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListRefundsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
             <summary>
             Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length. Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list refunds for.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1Refund&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListSettlements(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
             <summary>
             Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length. Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length. 
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>List&lt;V1Settlement&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListSettlementsWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
             <summary>
             Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length. Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length. 
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>ApiResponse of List&lt;V1Settlement&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListSettlementsAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
             <summary>
             Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length. Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length. 
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of List&lt;V1Settlement&gt;</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.ListSettlementsAsyncWithHttpInfo(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
             <summary>
             Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length. Provides summary information for all deposits and withdrawals initiated by Square to a merchant's bank account during a date range. Date ranges cannot exceed one year in length. 
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the location to list settlements for. If you specify me, this endpoint returns payments aggregated from all of the business's locations.</param>
             <param name="order">TThe order in which payments are listed in the response. (optional)</param>
             <param name="beginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year. (optional)</param>
             <param name="endTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time. (optional)</param>
             <param name="limit">The maximum number of payments to return in a single response. This value cannot exceed 200. (optional)</param>
             <param name="status">Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED). (optional)</param>
             <param name="batchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint. (optional)</param>
             <returns>Task of ApiResponse (List&lt;V1Settlement&gt;)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveBankAccount(System.String,System.String)">
             <summary>
             Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API. Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the bank account's associated location.</param>
             <param name="bankAccountId">The bank account's Square-issued ID. You obtain this value from Settlement objects returned.</param>
             <returns>V1BankAccount</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveBankAccountWithHttpInfo(System.String,System.String)">
             <summary>
             Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API. Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the bank account's associated location.</param>
             <param name="bankAccountId">The bank account's Square-issued ID. You obtain this value from Settlement objects returned.</param>
             <returns>ApiResponse of V1BankAccount</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveBankAccountAsync(System.String,System.String)">
             <summary>
             Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API. Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the bank account's associated location.</param>
             <param name="bankAccountId">The bank account's Square-issued ID. You obtain this value from Settlement objects returned.</param>
             <returns>Task of V1BankAccount</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveBankAccountAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API. Provides non-confidential details for a merchant's associated bank account. This endpoint does not provide full bank account numbers, and there is no way to obtain a full bank account number with the Connect API.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the bank account's associated location.</param>
             <param name="bankAccountId">The bank account's Square-issued ID. You obtain this value from Settlement objects returned.</param>
             <returns>Task of ApiResponse (V1BankAccount)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveOrder(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single online store order, including the order's history. Provides comprehensive information for a single online store order, including the order's history.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the order's associated location.</param>
             <param name="orderId">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
             <returns>V1Order</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveOrderWithHttpInfo(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single online store order, including the order's history. Provides comprehensive information for a single online store order, including the order's history.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the order's associated location.</param>
             <param name="orderId">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
             <returns>ApiResponse of V1Order</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveOrderAsync(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single online store order, including the order's history. Provides comprehensive information for a single online store order, including the order's history.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the order's associated location.</param>
             <param name="orderId">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
             <returns>Task of V1Order</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveOrderAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single online store order, including the order's history. Provides comprehensive information for a single online store order, including the order's history.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the order's associated location.</param>
             <param name="orderId">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
             <returns>Task of ApiResponse (V1Order)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrievePayment(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single payment. Provides comprehensive information for a single payment.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the payment's associated location.</param>
             <param name="paymentId">The payment's Square-issued ID. You obtain this value from Payment objects returned by the List Payments endpoint, or Settlement objects returned by the List Settlements endpoint.</param>
             <returns>V1Payment</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrievePaymentWithHttpInfo(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single payment. Provides comprehensive information for a single payment.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the payment's associated location.</param>
             <param name="paymentId">The payment's Square-issued ID. You obtain this value from Payment objects returned by the List Payments endpoint, or Settlement objects returned by the List Settlements endpoint.</param>
             <returns>ApiResponse of V1Payment</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrievePaymentAsync(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single payment. Provides comprehensive information for a single payment.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the payment's associated location.</param>
             <param name="paymentId">The payment's Square-issued ID. You obtain this value from Payment objects returned by the List Payments endpoint, or Settlement objects returned by the List Settlements endpoint.</param>
             <returns>Task of V1Payment</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrievePaymentAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single payment. Provides comprehensive information for a single payment.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the payment's associated location.</param>
             <param name="paymentId">The payment's Square-issued ID. You obtain this value from Payment objects returned by the List Payments endpoint, or Settlement objects returned by the List Settlements endpoint.</param>
             <returns>Task of ApiResponse (V1Payment)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveSettlement(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total. Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the settlements's associated location.</param>
             <param name="settlementId">The settlement's Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
             <returns>V1Settlement</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveSettlementWithHttpInfo(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total. Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the settlements's associated location.</param>
             <param name="settlementId">The settlement's Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
             <returns>ApiResponse of V1Settlement</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveSettlementAsync(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total. Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the settlements's associated location.</param>
             <param name="settlementId">The settlement's Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
             <returns>Task of V1Settlement</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.RetrieveSettlementAsyncWithHttpInfo(System.String,System.String)">
             <summary>
             Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total. Provides comprehensive information for a single settlement, including the entries that contribute to the settlement's total.
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the settlements's associated location.</param>
             <param name="settlementId">The settlement's Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.</param>
             <returns>Task of ApiResponse (V1Settlement)</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.UpdateOrder(System.String,System.String,Square.Connect.Model.V1UpdateOrderRequest)">
             <summary>
             Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions: Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the order's associated location.</param>
             <param name="orderId">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>V1Order</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.UpdateOrderWithHttpInfo(System.String,System.String,Square.Connect.Model.V1UpdateOrderRequest)">
             <summary>
             Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions: Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the order's associated location.</param>
             <param name="orderId">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>ApiResponse of V1Order</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.UpdateOrderAsync(System.String,System.String,Square.Connect.Model.V1UpdateOrderRequest)">
             <summary>
             Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions: Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the order's associated location.</param>
             <param name="orderId">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of V1Order</returns>
            </member>
        <member name="M:Square.Connect.Api.V1TransactionsApi.UpdateOrderAsyncWithHttpInfo(System.String,System.String,Square.Connect.Model.V1UpdateOrderRequest)">
             <summary>
             Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions: Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
             </summary>
             <exception cref="T:Square.Connect.Client.ApiException">Thrown when fails to make API call</exception>
             <param name="locationId">The ID of the order's associated location.</param>
             <param name="orderId">The order's Square-issued ID. You obtain this value from Order objects returned by the List Orders endpoint</param>
             <param name="body">An object containing the fields to POST for the request.  See the corresponding object definition for field details.</param>
             <returns>Task of ApiResponse (V1Order)</returns>
            </member>
        <member name="T:Square.Connect.Client.ApiClient">
             <summary>
             API client is mainly responsible for making the HTTP call to the API backend.
             </summary>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.InterceptRequest(RestSharp.IRestRequest)">
             <summary>
             Allows for extending request processing for <see cref="T:Square.Connect.Client.ApiClient" /> generated code.
             </summary>
             <param name="request">The RestSharp request object</param>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.InterceptResponse(RestSharp.IRestRequest,RestSharp.IRestResponse)">
             <summary>
             Allows for extending response processing for <see cref="T:Square.Connect.Client.ApiClient" /> generated code.
             </summary>
             <param name="request">The RestSharp request object</param>
             <param name="response">The RestSharp response object</param>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiClient" /> class
             with default configuration and base path (https://connect.squareup.com).
             </summary>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.#ctor(Square.Connect.Client.Configuration)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiClient" /> class
             with default base path (https://connect.squareup.com).
             </summary>
             <param name="config">An instance of Configuration.</param>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiClient" /> class
             with default configuration.
             </summary>
             <param name="basePath">The base path.</param>
            </member>
        <member name="F:Square.Connect.Client.ApiClient.Default">
             <summary>
             Gets or sets the default API client for making HTTP calls.
             </summary>
             <value>The default API client.</value>
            </member>
        <member name="P:Square.Connect.Client.ApiClient.Configuration">
             <summary>
             Gets or sets the Configuration.
             </summary>
             <value>An instance of the Configuration.</value>
            </member>
        <member name="P:Square.Connect.Client.ApiClient.RestClient">
             <summary>
             Gets or sets the RestClient.
             </summary>
             <value>An instance of the RestClient</value>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.CallApi(System.String,RestSharp.Method,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,RestSharp.FileParameter},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
             <summary>
             Makes the HTTP request (Sync).
             </summary>
             <param name="path">URL path.</param>
             <param name="method">HTTP method.</param>
             <param name="queryParams">Query parameters.</param>
             <param name="postBody">HTTP body (POST request).</param>
             <param name="headerParams">Header parameters.</param>
             <param name="formParams">Form parameters.</param>
             <param name="fileParams">File parameters.</param>
             <param name="pathParams">Path parameters.</param>
             <param name="contentType">Content Type of the request</param>
             <returns>Object</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.CallApiAsync(System.String,RestSharp.Method,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,RestSharp.FileParameter},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
             <summary>
             Makes the asynchronous HTTP request.
             </summary>
             <param name="path">URL path.</param>
             <param name="method">HTTP method.</param>
             <param name="queryParams">Query parameters.</param>
             <param name="postBody">HTTP body (POST request).</param>
             <param name="headerParams">Header parameters.</param>
             <param name="formParams">Form parameters.</param>
             <param name="fileParams">File parameters.</param>
             <param name="pathParams">Path parameters.</param>
             <param name="contentType">Content type.</param>
             <returns>The Task instance.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.EscapeString(System.String)">
             <summary>
             Escape string (url-encoded).
             </summary>
             <param name="str">String to be escaped.</param>
             <returns>Escaped string.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.ParameterToFile(System.String,System.IO.Stream)">
             <summary>
             Create FileParameter based on Stream.
             </summary>
             <param name="name">Parameter name.</param>
             <param name="stream">Input stream.</param>
             <returns>FileParameter.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.ParameterToString(System.Object)">
             <summary>
             If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
             If parameter is a list, join the list with ",".
             Otherwise just return the string.
             </summary>
             <param name="obj">The parameter (header, path, query, form).</param>
             <returns>Formatted string.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.Deserialize(RestSharp.IRestResponse,System.Type)">
             <summary>
             Deserialize the JSON string into a proper object.
             </summary>
             <param name="response">The HTTP response.</param>
             <param name="type">Object type.</param>
             <returns>Object representation of the JSON string.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.Serialize(System.Object)">
             <summary>
             Serialize an input (model) into JSON string
             </summary>
             <param name="obj">Object.</param>
             <returns>JSON string.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.SelectHeaderContentType(System.String[])">
             <summary>
             Select the Content-Type header's value from the given content-type array:
             if JSON exists in the given array, use it;
             otherwise use the first one defined in 'consumes'
             </summary>
             <param name="contentTypes">The Content-Type array to select from.</param>
             <returns>The Content-Type header to use.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.SelectHeaderAccept(System.String[])">
             <summary>
             Select the Accept header's value from the given accepts array:
             if JSON exists in the given array, use it;
             otherwise use all of them (joining into a string)
             </summary>
             <param name="accepts">The accepts array to select from.</param>
             <returns>The Accept header to use.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.Base64Encode(System.String)">
             <summary>
             Encode string in base64 format.
             </summary>
             <param name="text">String to be encoded.</param>
             <returns>Encoded string.</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.ConvertType(System.dynamic,System.Type)">
             <summary>
             Dynamically cast the object into target type.
             Ref: http://stackoverflow.com/questions/4925718/c-dynamic-runtime-cast
             </summary>
             <param name="source">Object to be casted</param>
             <param name="dest">Target type</param>
             <returns>Casted object</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.ReadAsBytes(System.IO.Stream)">
             <summary>
             Convert stream to byte array
             Credit/Ref: http://stackoverflow.com/a/221941/677735
             </summary>
             <param name="input">Input stream to be converted</param>
             <returns>Byte array</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.UrlEncode(System.String)">
             <summary>
             URL encode a string
             Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
             </summary>
             <param name="input">String to be URL encoded</param>
             <returns>Byte array</returns>
            </member>
        <member name="M:Square.Connect.Client.ApiClient.SanitizeFilename(System.String)">
             <summary>
             Sanitize filename by removing the path
             </summary>
             <param name="filename">Filename</param>
             <returns>Filename</returns>
            </member>
        <member name="T:Square.Connect.Client.ApiException">
             <summary>
             API Exception
             </summary>
            </member>
        <member name="P:Square.Connect.Client.ApiException.ErrorCode">
             <summary>
             Gets or sets the error code (HTTP status code)
             </summary>
             <value>The error code (HTTP status code).</value>
            </member>
        <member name="P:Square.Connect.Client.ApiException.ErrorContent">
             <summary>
             Gets or sets the error content (body json object)
             </summary>
             <value>The error content (Http response body).</value>
            </member>
        <member name="M:Square.Connect.Client.ApiException.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiException" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Client.ApiException.#ctor(System.Int32,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiException" /> class.
             </summary>
             <param name="errorCode">HTTP status code.</param>
             <param name="message">Error message.</param>
            </member>
        <member name="M:Square.Connect.Client.ApiException.#ctor(System.Int32,System.String,System.dynamic)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiException" /> class.
             </summary>
             <param name="errorCode">HTTP status code.</param>
             <param name="message">Error message.</param>
             <param name="errorContent">Error content.</param>
            </member>
        <member name="T:Square.Connect.Client.ApiResponse`1">
             <summary>
             API Response
             </summary>
            </member>
        <member name="P:Square.Connect.Client.ApiResponse`1.StatusCode">
             <summary>
             Gets or sets the status code (HTTP status code)
             </summary>
             <value>The status code.</value>
            </member>
        <member name="P:Square.Connect.Client.ApiResponse`1.Headers">
             <summary>
             Gets or sets the HTTP headers
             </summary>
             <value>HTTP headers</value>
            </member>
        <member name="P:Square.Connect.Client.ApiResponse`1.Data">
             <summary>
             Gets or sets the data (parsed HTTP body)
             </summary>
             <value>The data.</value>
            </member>
        <member name="M:Square.Connect.Client.ApiResponse`1.#ctor(System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},`0)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.ApiResponse`1" /> class.
             </summary>
             <param name="statusCode">HTTP status code.</param>
             <param name="headers">HTTP headers.</param>
             <param name="data">Data (parsed HTTP body)</param>
            </member>
        <member name="P:Square.Connect.Client.ApiResponse`1.BatchToken">
             <summary>
             Returns the value of BatchToken to be used on the next page call if present.
             </summary>
             <value>Batch Token when present</value>
            </member>
        <member name="T:Square.Connect.Client.Configuration">
             <summary>
             Represents a set of configuration settings
             </summary>
            </member>
        <member name="M:Square.Connect.Client.Configuration.#ctor(Square.Connect.Client.ApiClient,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Int32,System.String)">
             <summary>
             Initializes a new instance of the Configuration class with different settings
             </summary>
             <param name="apiClient">Api client</param>
             <param name="defaultHeader">Dictionary of default HTTP header</param>
             <param name="username">Username</param>
             <param name="password">Password</param>
             <param name="accessToken">accessToken</param>
             <param name="apiKey">Dictionary of API key</param>
             <param name="apiKeyPrefix">Dictionary of API key prefix</param>
             <param name="tempFolderPath">Temp folder path</param>
             <param name="dateTimeFormat">DateTime format string</param>
             <param name="timeout">HTTP connection timeout (in milliseconds)</param>
             <param name="userAgent">HTTP user agent</param>
            </member>
        <member name="M:Square.Connect.Client.Configuration.#ctor(Square.Connect.Client.ApiClient)">
             <summary>
             Initializes a new instance of the Configuration class.
             </summary>
             <param name="apiClient">Api client.</param>
            </member>
        <member name="F:Square.Connect.Client.Configuration.Version">
             <summary>
             Version of the package.
             </summary>
             <value>Version of the package.</value>
            </member>
        <member name="F:Square.Connect.Client.Configuration.Default">
             <summary>
             Gets or sets the default Configuration.
             </summary>
             <value>Configuration.</value>
            </member>
        <member name="F:Square.Connect.Client.Configuration.DefaultExceptionFactory">
             <summary>
             Default creation of exceptions for a given method name and response object
             </summary>
            </member>
        <member name="P:Square.Connect.Client.Configuration.Timeout">
             <summary>
             Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
             </summary>
             <value>Timeout.</value>
            </member>
        <member name="F:Square.Connect.Client.Configuration.ApiClient">
             <summary>
             Gets or sets the default API client for making HTTP calls.
             </summary>
             <value>The API client.</value>
            </member>
        <member name="M:Square.Connect.Client.Configuration.setApiClientUsingDefault(Square.Connect.Client.ApiClient)">
             <summary>
             Set the ApiClient using Default or ApiClient instance.
             </summary>
             <param name="apiClient">An instance of ApiClient.</param>
             <returns></returns>
            </member>
        <member name="P:Square.Connect.Client.Configuration.DefaultHeader">
             <summary>
             Gets or sets the default header.
             </summary>
            </member>
        <member name="M:Square.Connect.Client.Configuration.AddDefaultHeader(System.String,System.String)">
             <summary>
             Add default header.
             </summary>
             <param name="key">Header field name.</param>
             <param name="value">Header field value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Client.Configuration.AddApiKey(System.String,System.String)">
             <summary>
             Add Api Key Header.
             </summary>
             <param name="key">Api Key name.</param>
             <param name="value">Api Key value.</param>
             <returns></returns>
            </member>
        <member name="M:Square.Connect.Client.Configuration.AddApiKeyPrefix(System.String,System.String)">
             <summary>
             Sets the API key prefix.
             </summary>
             <param name="key">Api Key name.</param>
             <param name="value">Api Key value.</param>
            </member>
        <member name="P:Square.Connect.Client.Configuration.UserAgent">
             <summary>
             Gets or sets the HTTP user agent.
             </summary>
             <value>Http user agent.</value>
            </member>
        <member name="P:Square.Connect.Client.Configuration.Username">
             <summary>
             Gets or sets the username (HTTP basic authentication).
             </summary>
             <value>The username.</value>
            </member>
        <member name="P:Square.Connect.Client.Configuration.Password">
             <summary>
             Gets or sets the password (HTTP basic authentication).
             </summary>
             <value>The password.</value>
            </member>
        <member name="P:Square.Connect.Client.Configuration.AccessToken">
             <summary>
             Gets or sets the access token for OAuth2 authentication.
             </summary>
             <value>The access token.</value>
            </member>
        <member name="F:Square.Connect.Client.Configuration.ApiKey">
             <summary>
             Gets or sets the API key based on the authentication name.
             </summary>
             <value>The API key.</value>
            </member>
        <member name="F:Square.Connect.Client.Configuration.ApiKeyPrefix">
             <summary>
             Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
             </summary>
             <value>The prefix of the API key.</value>
            </member>
        <member name="M:Square.Connect.Client.Configuration.GetApiKeyWithPrefix(System.String)">
             <summary>
             Get the API key with prefix.
             </summary>
             <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
             <returns>API key with prefix.</returns>
            </member>
        <member name="P:Square.Connect.Client.Configuration.TempFolderPath">
             <summary>
             Gets or sets the temporary folder path to store the files downloaded from the server.
             </summary>
             <value>Folder path.</value>
            </member>
        <member name="P:Square.Connect.Client.Configuration.DateTimeFormat">
             <summary>
             Gets or sets the the date time format used when serializing in the ApiClient
             By default, it's set to ISO 8601 - "o", for others see:
             https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
             and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
             No validation is done to ensure that the string you're providing is valid
             </summary>
             <value>The DateTimeFormat string</value>
            </member>
        <member name="M:Square.Connect.Client.Configuration.ToDebugReport">
             <summary>
             Returns a string with essential information for debugging.
             </summary>
            </member>
        <member name="T:Square.Connect.Client.ExceptionFactory">
             <summary>
             A delegate to ExceptionFactory method
             </summary>
             <param name="methodName">Method name</param>
             <param name="response">Response</param>
             <returns>Exceptions</returns>
            </member>
        <member name="T:Square.Connect.Client.IApiAccessor">
             <summary>
             Represents configuration aspects required to interact with the API endpoints.
             </summary>
            </member>
        <member name="P:Square.Connect.Client.IApiAccessor.Configuration">
             <summary>
             Gets or sets the configuration object
             </summary>
             <value>An instance of the Configuration</value>
            </member>
        <member name="M:Square.Connect.Client.IApiAccessor.GetBasePath">
             <summary>
             Gets the base path of the API client.
             </summary>
             <value>The base path</value>
            </member>
        <member name="P:Square.Connect.Client.IApiAccessor.ExceptionFactory">
             <summary>
             Provides a factory method hook for the creation of exceptions.
             </summary>
            </member>
        <member name="T:Square.Connect.Client.SwaggerDateConverter">
             <summary>
             Formatter for 'date' swagger formats ss defined by full-date - RFC3339
             see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types
             </summary>
            </member>
        <member name="M:Square.Connect.Client.SwaggerDateConverter.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Client.SwaggerDateConverter" /> class.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.AdditionalRecipient">
             <summary>
             Represents an additional recipient (other than the merchant) receiving a portion of this tender.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipient.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.AdditionalRecipient" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipient.#ctor(System.String,System.String,Square.Connect.Model.Money,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.AdditionalRecipient" /> class.
             </summary>
             <param name="LocationId">The location ID for a recipient (other than the merchant) receiving a portion of this tender. (required).</param>
             <param name="Description">The description of the additional recipient. (required).</param>
             <param name="AmountMoney">The amount of money distributed to the recipient. (required).</param>
             <param name="ReceivableId">The unique ID for this [AdditionalRecipientReceivable](#type-additionalrecipientreceivable), assigned by the server..</param>
            </member>
        <member name="P:Square.Connect.Model.AdditionalRecipient.LocationId">
             <summary>
             The location ID for a recipient (other than the merchant) receiving a portion of this tender.
             </summary>
             <value>The location ID for a recipient (other than the merchant) receiving a portion of this tender.</value>
            </member>
        <member name="P:Square.Connect.Model.AdditionalRecipient.Description">
             <summary>
             The description of the additional recipient.
             </summary>
             <value>The description of the additional recipient.</value>
            </member>
        <member name="P:Square.Connect.Model.AdditionalRecipient.AmountMoney">
             <summary>
             The amount of money distributed to the recipient.
             </summary>
             <value>The amount of money distributed to the recipient.</value>
            </member>
        <member name="P:Square.Connect.Model.AdditionalRecipient.ReceivableId">
             <summary>
             The unique ID for this [AdditionalRecipientReceivable](#type-additionalrecipientreceivable), assigned by the server.
             </summary>
             <value>The unique ID for this [AdditionalRecipientReceivable](#type-additionalrecipientreceivable), assigned by the server.</value>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipient.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipient.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipient.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipient.Equals(Square.Connect.Model.AdditionalRecipient)">
             <summary>
             Returns true if AdditionalRecipient instances are equal
             </summary>
             <param name="other">Instance of AdditionalRecipient to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipient.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.AdditionalRecipientReceivable">
             <summary>
             Represents a monetary distribution of part of a [Transaction](#type-transaction)'s amount for Transactions which included additional recipients. The location of this receivable is that same as the one specified in the [AdditionalRecipient](#type-additionalrecipient).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivable.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.AdditionalRecipientReceivable" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivable.#ctor(System.String,System.String,System.String,Square.Connect.Model.Money,System.String,System.Collections.Generic.List{Square.Connect.Model.AdditionalRecipientReceivableRefund})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.AdditionalRecipientReceivable" /> class.
             </summary>
             <param name="Id">The additional recipient receivable's unique ID, issued by Square payments servers. (required).</param>
             <param name="TransactionId">The ID of the transaction that the additional recipient receivable was applied to. (required).</param>
             <param name="TransactionLocationId">The ID of the location that created the receivable. This is the location ID on the associated transaction. (required).</param>
             <param name="AmountMoney">The amount of the receivable. This will always be non-negative. (required).</param>
             <param name="CreatedAt">The time when the additional recipient receivable was created, in RFC 3339 format..</param>
             <param name="Refunds">Any refunds of the receivable that have been applied..</param>
            </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivable.Id">
             <summary>
             The additional recipient receivable's unique ID, issued by Square payments servers.
             </summary>
             <value>The additional recipient receivable's unique ID, issued by Square payments servers.</value>
            </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivable.TransactionId">
             <summary>
             The ID of the transaction that the additional recipient receivable was applied to.
             </summary>
             <value>The ID of the transaction that the additional recipient receivable was applied to.</value>
            </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivable.TransactionLocationId">
             <summary>
             The ID of the location that created the receivable. This is the location ID on the associated transaction.
             </summary>
             <value>The ID of the location that created the receivable. This is the location ID on the associated transaction.</value>
            </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivable.AmountMoney">
             <summary>
             The amount of the receivable. This will always be non-negative.
             </summary>
             <value>The amount of the receivable. This will always be non-negative.</value>
            </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivable.CreatedAt">
             <summary>
             The time when the additional recipient receivable was created, in RFC 3339 format.
             </summary>
             <value>The time when the additional recipient receivable was created, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivable.Refunds">
             <summary>
             Any refunds of the receivable that have been applied.
             </summary>
             <value>Any refunds of the receivable that have been applied.</value>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivable.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivable.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivable.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivable.Equals(Square.Connect.Model.AdditionalRecipientReceivable)">
             <summary>
             Returns true if AdditionalRecipientReceivable instances are equal
             </summary>
             <param name="other">Instance of AdditionalRecipientReceivable to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivable.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.AdditionalRecipientReceivableRefund">
             <summary>
             A refund of an [AdditionalRecipientReceivable](#type-additionalrecipientreceivable). This includes the ID of the additional recipient receivable associated to this object, as well as a reference to the [Refund](#type-refund) that created this receivable refund.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivableRefund.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.AdditionalRecipientReceivableRefund" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivableRefund.#ctor(System.String,System.String,System.String,System.String,Square.Connect.Model.Money,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.AdditionalRecipientReceivableRefund" /> class.
             </summary>
             <param name="Id">The receivable refund's unique ID, issued by Square payments servers. (required).</param>
             <param name="ReceivableId">The ID of the receivable that the refund was applied to. (required).</param>
             <param name="RefundId">The ID of the refund that is associated to this receivable refund. (required).</param>
             <param name="TransactionLocationId">The ID of the location that created the receivable. This is the location ID on the associated transaction. (required).</param>
             <param name="AmountMoney">The amount of the refund. This will always be non-negative. (required).</param>
             <param name="CreatedAt">The time when the refund was created, in RFC 3339 format..</param>
            </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivableRefund.Id">
             <summary>
             The receivable refund's unique ID, issued by Square payments servers.
             </summary>
             <value>The receivable refund's unique ID, issued by Square payments servers.</value>
            </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivableRefund.ReceivableId">
             <summary>
             The ID of the receivable that the refund was applied to.
             </summary>
             <value>The ID of the receivable that the refund was applied to.</value>
            </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivableRefund.RefundId">
             <summary>
             The ID of the refund that is associated to this receivable refund.
             </summary>
             <value>The ID of the refund that is associated to this receivable refund.</value>
            </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivableRefund.TransactionLocationId">
             <summary>
             The ID of the location that created the receivable. This is the location ID on the associated transaction.
             </summary>
             <value>The ID of the location that created the receivable. This is the location ID on the associated transaction.</value>
            </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivableRefund.AmountMoney">
             <summary>
             The amount of the refund. This will always be non-negative.
             </summary>
             <value>The amount of the refund. This will always be non-negative.</value>
            </member>
        <member name="P:Square.Connect.Model.AdditionalRecipientReceivableRefund.CreatedAt">
             <summary>
             The time when the refund was created, in RFC 3339 format.
             </summary>
             <value>The time when the refund was created, in RFC 3339 format.</value>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivableRefund.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivableRefund.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivableRefund.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivableRefund.Equals(Square.Connect.Model.AdditionalRecipientReceivableRefund)">
             <summary>
             Returns true if AdditionalRecipientReceivableRefund instances are equal
             </summary>
             <param name="other">Instance of AdditionalRecipientReceivableRefund to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.AdditionalRecipientReceivableRefund.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Address">
             <summary>
             Represents a physical address.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Address.CountryEnum">
             <summary>
             The address's country, in ISO 3166-1-alpha-2 format.
             </summary>
             <value>The address's country, in ISO 3166-1-alpha-2 format.</value>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ZZ">
             <summary>
             Enum ZZ for "ZZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AD">
             <summary>
             Enum AD for "AD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AE">
             <summary>
             Enum AE for "AE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AF">
             <summary>
             Enum AF for "AF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AG">
             <summary>
             Enum AG for "AG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AI">
             <summary>
             Enum AI for "AI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AL">
             <summary>
             Enum AL for "AL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AM">
             <summary>
             Enum AM for "AM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AO">
             <summary>
             Enum AO for "AO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AQ">
             <summary>
             Enum AQ for "AQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AR">
             <summary>
             Enum AR for "AR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AS">
             <summary>
             Enum AS for "AS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AT">
             <summary>
             Enum AT for "AT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AU">
             <summary>
             Enum AU for "AU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AW">
             <summary>
             Enum AW for "AW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AX">
             <summary>
             Enum AX for "AX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.AZ">
             <summary>
             Enum AZ for "AZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BA">
             <summary>
             Enum BA for "BA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BB">
             <summary>
             Enum BB for "BB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BD">
             <summary>
             Enum BD for "BD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BE">
             <summary>
             Enum BE for "BE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BF">
             <summary>
             Enum BF for "BF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BG">
             <summary>
             Enum BG for "BG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BH">
             <summary>
             Enum BH for "BH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BI">
             <summary>
             Enum BI for "BI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BJ">
             <summary>
             Enum BJ for "BJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BL">
             <summary>
             Enum BL for "BL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BM">
             <summary>
             Enum BM for "BM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BN">
             <summary>
             Enum BN for "BN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BO">
             <summary>
             Enum BO for "BO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BQ">
             <summary>
             Enum BQ for "BQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BR">
             <summary>
             Enum BR for "BR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BS">
             <summary>
             Enum BS for "BS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BT">
             <summary>
             Enum BT for "BT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BV">
             <summary>
             Enum BV for "BV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BW">
             <summary>
             Enum BW for "BW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BY">
             <summary>
             Enum BY for "BY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.BZ">
             <summary>
             Enum BZ for "BZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CA">
             <summary>
             Enum CA for "CA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CC">
             <summary>
             Enum CC for "CC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CD">
             <summary>
             Enum CD for "CD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CF">
             <summary>
             Enum CF for "CF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CG">
             <summary>
             Enum CG for "CG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CH">
             <summary>
             Enum CH for "CH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CI">
             <summary>
             Enum CI for "CI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CK">
             <summary>
             Enum CK for "CK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CL">
             <summary>
             Enum CL for "CL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CM">
             <summary>
             Enum CM for "CM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CN">
             <summary>
             Enum CN for "CN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CO">
             <summary>
             Enum CO for "CO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CR">
             <summary>
             Enum CR for "CR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CU">
             <summary>
             Enum CU for "CU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CV">
             <summary>
             Enum CV for "CV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CW">
             <summary>
             Enum CW for "CW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CX">
             <summary>
             Enum CX for "CX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CY">
             <summary>
             Enum CY for "CY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.CZ">
             <summary>
             Enum CZ for "CZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DE">
             <summary>
             Enum DE for "DE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DJ">
             <summary>
             Enum DJ for "DJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DK">
             <summary>
             Enum DK for "DK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DM">
             <summary>
             Enum DM for "DM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DO">
             <summary>
             Enum DO for "DO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.DZ">
             <summary>
             Enum DZ for "DZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.EC">
             <summary>
             Enum EC for "EC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.EE">
             <summary>
             Enum EE for "EE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.EG">
             <summary>
             Enum EG for "EG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.EH">
             <summary>
             Enum EH for "EH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ER">
             <summary>
             Enum ER for "ER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ES">
             <summary>
             Enum ES for "ES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ET">
             <summary>
             Enum ET for "ET"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FI">
             <summary>
             Enum FI for "FI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FJ">
             <summary>
             Enum FJ for "FJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FK">
             <summary>
             Enum FK for "FK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FM">
             <summary>
             Enum FM for "FM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FO">
             <summary>
             Enum FO for "FO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.FR">
             <summary>
             Enum FR for "FR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GA">
             <summary>
             Enum GA for "GA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GB">
             <summary>
             Enum GB for "GB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GD">
             <summary>
             Enum GD for "GD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GE">
             <summary>
             Enum GE for "GE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GF">
             <summary>
             Enum GF for "GF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GG">
             <summary>
             Enum GG for "GG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GH">
             <summary>
             Enum GH for "GH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GI">
             <summary>
             Enum GI for "GI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GL">
             <summary>
             Enum GL for "GL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GM">
             <summary>
             Enum GM for "GM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GN">
             <summary>
             Enum GN for "GN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GP">
             <summary>
             Enum GP for "GP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GQ">
             <summary>
             Enum GQ for "GQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GR">
             <summary>
             Enum GR for "GR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GS">
             <summary>
             Enum GS for "GS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GT">
             <summary>
             Enum GT for "GT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GU">
             <summary>
             Enum GU for "GU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GW">
             <summary>
             Enum GW for "GW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.GY">
             <summary>
             Enum GY for "GY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HK">
             <summary>
             Enum HK for "HK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HM">
             <summary>
             Enum HM for "HM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HN">
             <summary>
             Enum HN for "HN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HR">
             <summary>
             Enum HR for "HR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HT">
             <summary>
             Enum HT for "HT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.HU">
             <summary>
             Enum HU for "HU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ID">
             <summary>
             Enum ID for "ID"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IE">
             <summary>
             Enum IE for "IE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IL">
             <summary>
             Enum IL for "IL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IM">
             <summary>
             Enum IM for "IM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IN">
             <summary>
             Enum IN for "IN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IO">
             <summary>
             Enum IO for "IO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IQ">
             <summary>
             Enum IQ for "IQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IR">
             <summary>
             Enum IR for "IR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IS">
             <summary>
             Enum IS for "IS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.IT">
             <summary>
             Enum IT for "IT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.JE">
             <summary>
             Enum JE for "JE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.JM">
             <summary>
             Enum JM for "JM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.JO">
             <summary>
             Enum JO for "JO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.JP">
             <summary>
             Enum JP for "JP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KE">
             <summary>
             Enum KE for "KE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KG">
             <summary>
             Enum KG for "KG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KH">
             <summary>
             Enum KH for "KH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KI">
             <summary>
             Enum KI for "KI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KM">
             <summary>
             Enum KM for "KM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KN">
             <summary>
             Enum KN for "KN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KP">
             <summary>
             Enum KP for "KP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KR">
             <summary>
             Enum KR for "KR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KW">
             <summary>
             Enum KW for "KW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KY">
             <summary>
             Enum KY for "KY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.KZ">
             <summary>
             Enum KZ for "KZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LA">
             <summary>
             Enum LA for "LA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LB">
             <summary>
             Enum LB for "LB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LC">
             <summary>
             Enum LC for "LC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LI">
             <summary>
             Enum LI for "LI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LK">
             <summary>
             Enum LK for "LK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LR">
             <summary>
             Enum LR for "LR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LS">
             <summary>
             Enum LS for "LS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LT">
             <summary>
             Enum LT for "LT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LU">
             <summary>
             Enum LU for "LU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LV">
             <summary>
             Enum LV for "LV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.LY">
             <summary>
             Enum LY for "LY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MA">
             <summary>
             Enum MA for "MA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MC">
             <summary>
             Enum MC for "MC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MD">
             <summary>
             Enum MD for "MD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ME">
             <summary>
             Enum ME for "ME"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MF">
             <summary>
             Enum MF for "MF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MG">
             <summary>
             Enum MG for "MG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MH">
             <summary>
             Enum MH for "MH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MK">
             <summary>
             Enum MK for "MK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ML">
             <summary>
             Enum ML for "ML"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MM">
             <summary>
             Enum MM for "MM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MN">
             <summary>
             Enum MN for "MN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MO">
             <summary>
             Enum MO for "MO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MP">
             <summary>
             Enum MP for "MP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MQ">
             <summary>
             Enum MQ for "MQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MR">
             <summary>
             Enum MR for "MR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MS">
             <summary>
             Enum MS for "MS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MT">
             <summary>
             Enum MT for "MT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MU">
             <summary>
             Enum MU for "MU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MV">
             <summary>
             Enum MV for "MV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MW">
             <summary>
             Enum MW for "MW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MX">
             <summary>
             Enum MX for "MX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MY">
             <summary>
             Enum MY for "MY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.MZ">
             <summary>
             Enum MZ for "MZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NA">
             <summary>
             Enum NA for "NA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NC">
             <summary>
             Enum NC for "NC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NE">
             <summary>
             Enum NE for "NE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NF">
             <summary>
             Enum NF for "NF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NG">
             <summary>
             Enum NG for "NG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NI">
             <summary>
             Enum NI for "NI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NL">
             <summary>
             Enum NL for "NL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NO">
             <summary>
             Enum NO for "NO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NP">
             <summary>
             Enum NP for "NP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NR">
             <summary>
             Enum NR for "NR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NU">
             <summary>
             Enum NU for "NU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.NZ">
             <summary>
             Enum NZ for "NZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.OM">
             <summary>
             Enum OM for "OM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PA">
             <summary>
             Enum PA for "PA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PE">
             <summary>
             Enum PE for "PE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PF">
             <summary>
             Enum PF for "PF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PG">
             <summary>
             Enum PG for "PG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PH">
             <summary>
             Enum PH for "PH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PK">
             <summary>
             Enum PK for "PK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PL">
             <summary>
             Enum PL for "PL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PM">
             <summary>
             Enum PM for "PM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PN">
             <summary>
             Enum PN for "PN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PR">
             <summary>
             Enum PR for "PR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PS">
             <summary>
             Enum PS for "PS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PT">
             <summary>
             Enum PT for "PT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PW">
             <summary>
             Enum PW for "PW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.PY">
             <summary>
             Enum PY for "PY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.QA">
             <summary>
             Enum QA for "QA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.RE">
             <summary>
             Enum RE for "RE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.RO">
             <summary>
             Enum RO for "RO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.RS">
             <summary>
             Enum RS for "RS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.RU">
             <summary>
             Enum RU for "RU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.RW">
             <summary>
             Enum RW for "RW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SA">
             <summary>
             Enum SA for "SA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SB">
             <summary>
             Enum SB for "SB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SC">
             <summary>
             Enum SC for "SC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SD">
             <summary>
             Enum SD for "SD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SE">
             <summary>
             Enum SE for "SE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SG">
             <summary>
             Enum SG for "SG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SH">
             <summary>
             Enum SH for "SH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SI">
             <summary>
             Enum SI for "SI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SJ">
             <summary>
             Enum SJ for "SJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SK">
             <summary>
             Enum SK for "SK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SL">
             <summary>
             Enum SL for "SL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SM">
             <summary>
             Enum SM for "SM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SN">
             <summary>
             Enum SN for "SN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SO">
             <summary>
             Enum SO for "SO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SR">
             <summary>
             Enum SR for "SR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SS">
             <summary>
             Enum SS for "SS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ST">
             <summary>
             Enum ST for "ST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SV">
             <summary>
             Enum SV for "SV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SX">
             <summary>
             Enum SX for "SX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SY">
             <summary>
             Enum SY for "SY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.SZ">
             <summary>
             Enum SZ for "SZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TC">
             <summary>
             Enum TC for "TC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TD">
             <summary>
             Enum TD for "TD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TF">
             <summary>
             Enum TF for "TF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TG">
             <summary>
             Enum TG for "TG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TH">
             <summary>
             Enum TH for "TH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TJ">
             <summary>
             Enum TJ for "TJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TK">
             <summary>
             Enum TK for "TK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TL">
             <summary>
             Enum TL for "TL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TM">
             <summary>
             Enum TM for "TM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TN">
             <summary>
             Enum TN for "TN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TO">
             <summary>
             Enum TO for "TO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TR">
             <summary>
             Enum TR for "TR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TT">
             <summary>
             Enum TT for "TT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TV">
             <summary>
             Enum TV for "TV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TW">
             <summary>
             Enum TW for "TW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.TZ">
             <summary>
             Enum TZ for "TZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.UA">
             <summary>
             Enum UA for "UA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.UG">
             <summary>
             Enum UG for "UG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.UM">
             <summary>
             Enum UM for "UM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.US">
             <summary>
             Enum US for "US"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.UY">
             <summary>
             Enum UY for "UY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.UZ">
             <summary>
             Enum UZ for "UZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VA">
             <summary>
             Enum VA for "VA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VC">
             <summary>
             Enum VC for "VC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VE">
             <summary>
             Enum VE for "VE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VG">
             <summary>
             Enum VG for "VG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VI">
             <summary>
             Enum VI for "VI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VN">
             <summary>
             Enum VN for "VN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.VU">
             <summary>
             Enum VU for "VU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.WF">
             <summary>
             Enum WF for "WF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.WS">
             <summary>
             Enum WS for "WS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.YE">
             <summary>
             Enum YE for "YE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.YT">
             <summary>
             Enum YT for "YT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ZA">
             <summary>
             Enum ZA for "ZA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ZM">
             <summary>
             Enum ZM for "ZM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Address.CountryEnum.ZW">
             <summary>
             Enum ZW for "ZW"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Address.Country">
             <summary>
             The address's country, in ISO 3166-1-alpha-2 format.
             </summary>
             <value>The address's country, in ISO 3166-1-alpha-2 format.</value>
            </member>
        <member name="M:Square.Connect.Model.Address.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{Square.Connect.Model.Address.CountryEnum},System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Address" /> class.
             </summary>
             <param name="AddressLine1">The first line of the address.  Fields that start with `address_line` provide the address's most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields)..</param>
             <param name="AddressLine2">The second line of the address, if any..</param>
             <param name="AddressLine3">The third line of the address, if any..</param>
             <param name="Locality">The city or town of the address..</param>
             <param name="Sublocality">A civil region within the address's `locality`, if any..</param>
             <param name="Sublocality2">A civil region within the address's `sublocality`, if any..</param>
             <param name="Sublocality3">A civil region within the address's `sublocality_2`, if any..</param>
             <param name="AdministrativeDistrictLevel1">A civil entity within the address's country. In the US, this is the state..</param>
             <param name="AdministrativeDistrictLevel2">A civil entity within the address's `administrative_district_level_1`. In the US, this is the county..</param>
             <param name="AdministrativeDistrictLevel3">A civil entity within the address's `administrative_district_level_2`, if any..</param>
             <param name="PostalCode">The address's postal code..</param>
             <param name="Country">The address's country, in ISO 3166-1-alpha-2 format..</param>
             <param name="FirstName">Optional first name when it's representing recipient..</param>
             <param name="LastName">Optional last name when it's representing recipient..</param>
             <param name="Organization">Optional organization name when it's representing recipient..</param>
            </member>
        <member name="P:Square.Connect.Model.Address.AddressLine1">
             <summary>
             The first line of the address.  Fields that start with `address_line` provide the address's most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields).
             </summary>
             <value>The first line of the address.  Fields that start with `address_line` provide the address's most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields).</value>
            </member>
        <member name="P:Square.Connect.Model.Address.AddressLine2">
             <summary>
             The second line of the address, if any.
             </summary>
             <value>The second line of the address, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.AddressLine3">
             <summary>
             The third line of the address, if any.
             </summary>
             <value>The third line of the address, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.Locality">
             <summary>
             The city or town of the address.
             </summary>
             <value>The city or town of the address.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.Sublocality">
             <summary>
             A civil region within the address's `locality`, if any.
             </summary>
             <value>A civil region within the address's `locality`, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.Sublocality2">
             <summary>
             A civil region within the address's `sublocality`, if any.
             </summary>
             <value>A civil region within the address's `sublocality`, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.Sublocality3">
             <summary>
             A civil region within the address's `sublocality_2`, if any.
             </summary>
             <value>A civil region within the address's `sublocality_2`, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.AdministrativeDistrictLevel1">
             <summary>
             A civil entity within the address's country. In the US, this is the state.
             </summary>
             <value>A civil entity within the address's country. In the US, this is the state.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.AdministrativeDistrictLevel2">
             <summary>
             A civil entity within the address's `administrative_district_level_1`. In the US, this is the county.
             </summary>
             <value>A civil entity within the address's `administrative_district_level_1`. In the US, this is the county.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.AdministrativeDistrictLevel3">
             <summary>
             A civil entity within the address's `administrative_district_level_2`, if any.
             </summary>
             <value>A civil entity within the address's `administrative_district_level_2`, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.PostalCode">
             <summary>
             The address's postal code.
             </summary>
             <value>The address's postal code.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.FirstName">
             <summary>
             Optional first name when it's representing recipient.
             </summary>
             <value>Optional first name when it's representing recipient.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.LastName">
             <summary>
             Optional last name when it's representing recipient.
             </summary>
             <value>Optional last name when it's representing recipient.</value>
            </member>
        <member name="P:Square.Connect.Model.Address.Organization">
             <summary>
             Optional organization name when it's representing recipient.
             </summary>
             <value>Optional organization name when it's representing recipient.</value>
            </member>
        <member name="M:Square.Connect.Model.Address.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Address.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Address.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Address.Equals(Square.Connect.Model.Address)">
             <summary>
             Returns true if Address instances are equal
             </summary>
             <param name="other">Instance of Address to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Address.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.BatchDeleteCatalogObjectsRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsRequest.#ctor(System.Collections.Generic.List{System.String})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchDeleteCatalogObjectsRequest" /> class.
             </summary>
             <param name="ObjectIds">The IDs of the [CatalogObject](#type-catalogobject)s to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s)..</param>
            </member>
        <member name="P:Square.Connect.Model.BatchDeleteCatalogObjectsRequest.ObjectIds">
             <summary>
             The IDs of the [CatalogObject](#type-catalogobject)s to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).
             </summary>
             <value>The IDs of the [CatalogObject](#type-catalogobject)s to be deleted. When an object is deleted, other objects in the graph that depend on that object will be deleted as well (for example, deleting a [CatalogItem](#type-catalogitem) will delete its [CatalogItemVariation](#type-catalogitemvariation)s).</value>
            </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsRequest.Equals(Square.Connect.Model.BatchDeleteCatalogObjectsRequest)">
             <summary>
             Returns true if BatchDeleteCatalogObjectsRequest instances are equal
             </summary>
             <param name="other">Instance of BatchDeleteCatalogObjectsRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.BatchDeleteCatalogObjectsResponse">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchDeleteCatalogObjectsResponse" /> class.
             </summary>
             <param name="Errors">The set of [Error](#type-error)s encountered..</param>
             <param name="DeletedObjectIds">The IDs of all [CatalogObject](#type-catalogobject)s deleted by this request..</param>
             <param name="DeletedAt">The database [timestamp](#workingwithdates) of this deletion in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\"..</param>
            </member>
        <member name="P:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.Errors">
             <summary>
             The set of [Error](#type-error)s encountered.
             </summary>
             <value>The set of [Error](#type-error)s encountered.</value>
            </member>
        <member name="P:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.DeletedObjectIds">
             <summary>
             The IDs of all [CatalogObject](#type-catalogobject)s deleted by this request.
             </summary>
             <value>The IDs of all [CatalogObject](#type-catalogobject)s deleted by this request.</value>
            </member>
        <member name="P:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.DeletedAt">
             <summary>
             The database [timestamp](#workingwithdates) of this deletion in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\".
             </summary>
             <value>The database [timestamp](#workingwithdates) of this deletion in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\".</value>
            </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.Equals(Square.Connect.Model.BatchDeleteCatalogObjectsResponse)">
             <summary>
             Returns true if BatchDeleteCatalogObjectsResponse instances are equal
             </summary>
             <param name="other">Instance of BatchDeleteCatalogObjectsResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchDeleteCatalogObjectsResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.#ctor(System.Collections.Generic.List{System.String},System.Nullable{System.Boolean})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest" /> class.
             </summary>
             <param name="ObjectIds">The IDs of the [CatalogObject](#type-catalogobject)s to be retrieved. (required).</param>
             <param name="IncludeRelatedObjects">If `true`, the response will include additional objects that are related to the requested objects, as follows:  If the `objects` field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the response. If the `objects` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of the response..</param>
            </member>
        <member name="P:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.ObjectIds">
             <summary>
             The IDs of the [CatalogObject](#type-catalogobject)s to be retrieved.
             </summary>
             <value>The IDs of the [CatalogObject](#type-catalogobject)s to be retrieved.</value>
            </member>
        <member name="P:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.IncludeRelatedObjects">
             <summary>
             If `true`, the response will include additional objects that are related to the requested objects, as follows:  If the `objects` field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the response. If the `objects` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of the response.
             </summary>
             <value>If `true`, the response will include additional objects that are related to the requested objects, as follows:  If the `objects` field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the response. If the `objects` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of the response.</value>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.Equals(Square.Connect.Model.BatchRetrieveCatalogObjectsRequest)">
             <summary>
             Returns true if BatchRetrieveCatalogObjectsRequest instances are equal
             </summary>
             <param name="other">Instance of BatchRetrieveCatalogObjectsRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.CatalogObject},System.Collections.Generic.List{Square.Connect.Model.CatalogObject})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse" /> class.
             </summary>
             <param name="Errors">The set of [Error](#type-error)s encountered..</param>
             <param name="Objects">A list of [CatalogObject](#type-catalogobject)s returned..</param>
             <param name="RelatedObjects">A list of [CatalogObject](#type-catalogobject)s referenced by the object in the `objects` field..</param>
            </member>
        <member name="P:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.Errors">
             <summary>
             The set of [Error](#type-error)s encountered.
             </summary>
             <value>The set of [Error](#type-error)s encountered.</value>
            </member>
        <member name="P:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.Objects">
             <summary>
             A list of [CatalogObject](#type-catalogobject)s returned.
             </summary>
             <value>A list of [CatalogObject](#type-catalogobject)s returned.</value>
            </member>
        <member name="P:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.RelatedObjects">
             <summary>
             A list of [CatalogObject](#type-catalogobject)s referenced by the object in the `objects` field.
             </summary>
             <value>A list of [CatalogObject](#type-catalogobject)s referenced by the object in the `objects` field.</value>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.Equals(Square.Connect.Model.BatchRetrieveCatalogObjectsResponse)">
             <summary>
             Returns true if BatchRetrieveCatalogObjectsResponse instances are equal
             </summary>
             <param name="other">Instance of BatchRetrieveCatalogObjectsResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveCatalogObjectsResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.BatchRetrieveOrdersRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchRetrieveOrdersRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersRequest.#ctor(System.Collections.Generic.List{System.String})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchRetrieveOrdersRequest" /> class.
             </summary>
             <param name="OrderIds">The IDs of the orders to retrieve. A maximum of 100 orders can be retrieved per request. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.BatchRetrieveOrdersRequest.OrderIds">
             <summary>
             The IDs of the orders to retrieve. A maximum of 100 orders can be retrieved per request.
             </summary>
             <value>The IDs of the orders to retrieve. A maximum of 100 orders can be retrieved per request.</value>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersRequest.Equals(Square.Connect.Model.BatchRetrieveOrdersRequest)">
             <summary>
             Returns true if BatchRetrieveOrdersRequest instances are equal
             </summary>
             <param name="other">Instance of BatchRetrieveOrdersRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.BatchRetrieveOrdersResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [BatchRetrieveOrders](#endpoint-batchretrieveorders) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Order},System.Collections.Generic.List{Square.Connect.Model.Error})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchRetrieveOrdersResponse" /> class.
             </summary>
             <param name="Orders">The requested orders. This will omit any requested orders that do not exist or are not charged..</param>
             <param name="Errors">Any errors that occurred during the request..</param>
            </member>
        <member name="P:Square.Connect.Model.BatchRetrieveOrdersResponse.Orders">
             <summary>
             The requested orders. This will omit any requested orders that do not exist or are not charged.
             </summary>
             <value>The requested orders. This will omit any requested orders that do not exist or are not charged.</value>
            </member>
        <member name="P:Square.Connect.Model.BatchRetrieveOrdersResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersResponse.Equals(Square.Connect.Model.BatchRetrieveOrdersResponse)">
             <summary>
             Returns true if BatchRetrieveOrdersResponse instances are equal
             </summary>
             <param name="other">Instance of BatchRetrieveOrdersResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchRetrieveOrdersResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.BatchUpsertCatalogObjectsRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchUpsertCatalogObjectsRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.#ctor(System.String,System.Collections.Generic.List{Square.Connect.Model.CatalogObjectBatch})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchUpsertCatalogObjectsRequest" /> class.
             </summary>
             <param name="IdempotencyKey">A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you're unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency keys](#idempotencykeys) for more information. (required).</param>
             <param name="Batches">A batch of [CatalogObject](#type-catalogobject)s to be inserted/updated atomically. The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error in one batch will not affect other batches within the same request.  For each object, its `updated_at` field is ignored and replaced with a current [timestamp](#workingwithdates), and its `is_deleted` field must not be set to `true`.  To modify an existing object, supply its ID. To create a new object, use an ID starting with `#`. These IDs may be used to create relationships between an object and attributes of other objects that reference it. For example, you can create a [CatalogItem](#type-catalogitem) with ID `#ABC` and a [CatalogItemVariation](#type-catalogitemvariation) with its `item_id` attribute set to `#ABC` in order to associate the [CatalogItemVariation](#type-catalogitemvariation) with its parent [CatalogItem](#type-catalogitem).  Any `#`-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.  Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will be inserted or updated..</param>
            </member>
        <member name="P:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.IdempotencyKey">
             <summary>
             A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you're unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency keys](#idempotencykeys) for more information.
             </summary>
             <value>A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you're unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency keys](#idempotencykeys) for more information.</value>
            </member>
        <member name="P:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.Batches">
             <summary>
             A batch of [CatalogObject](#type-catalogobject)s to be inserted/updated atomically. The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error in one batch will not affect other batches within the same request.  For each object, its `updated_at` field is ignored and replaced with a current [timestamp](#workingwithdates), and its `is_deleted` field must not be set to `true`.  To modify an existing object, supply its ID. To create a new object, use an ID starting with `#`. These IDs may be used to create relationships between an object and attributes of other objects that reference it. For example, you can create a [CatalogItem](#type-catalogitem) with ID `#ABC` and a [CatalogItemVariation](#type-catalogitemvariation) with its `item_id` attribute set to `#ABC` in order to associate the [CatalogItemVariation](#type-catalogitemvariation) with its parent [CatalogItem](#type-catalogitem).  Any `#`-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.  Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will be inserted or updated.
             </summary>
             <value>A batch of [CatalogObject](#type-catalogobject)s to be inserted/updated atomically. The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error in one batch will not affect other batches within the same request.  For each object, its `updated_at` field is ignored and replaced with a current [timestamp](#workingwithdates), and its `is_deleted` field must not be set to `true`.  To modify an existing object, supply its ID. To create a new object, use an ID starting with `#`. These IDs may be used to create relationships between an object and attributes of other objects that reference it. For example, you can create a [CatalogItem](#type-catalogitem) with ID `#ABC` and a [CatalogItemVariation](#type-catalogitemvariation) with its `item_id` attribute set to `#ABC` in order to associate the [CatalogItemVariation](#type-catalogitemvariation) with its parent [CatalogItem](#type-catalogitem).  Any `#`-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.  Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will be inserted or updated.</value>
            </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.Equals(Square.Connect.Model.BatchUpsertCatalogObjectsRequest)">
             <summary>
             Returns true if BatchUpsertCatalogObjectsRequest instances are equal
             </summary>
             <param name="other">Instance of BatchUpsertCatalogObjectsRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.BatchUpsertCatalogObjectsResponse">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.CatalogObject},System.String,System.Collections.Generic.List{Square.Connect.Model.CatalogIdMapping})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.BatchUpsertCatalogObjectsResponse" /> class.
             </summary>
             <param name="Errors">The set of [Error](#type-error)s encountered..</param>
             <param name="Objects">The created [CatalogObject](#type-catalogobject)s.</param>
             <param name="UpdatedAt">The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\"..</param>
             <param name="IdMappings">The mapping between client and server IDs for this Upsert..</param>
            </member>
        <member name="P:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.Errors">
             <summary>
             The set of [Error](#type-error)s encountered.
             </summary>
             <value>The set of [Error](#type-error)s encountered.</value>
            </member>
        <member name="P:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.Objects">
             <summary>
             The created [CatalogObject](#type-catalogobject)s
             </summary>
             <value>The created [CatalogObject](#type-catalogobject)s</value>
            </member>
        <member name="P:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.UpdatedAt">
             <summary>
             The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\".
             </summary>
             <value>The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\".</value>
            </member>
        <member name="P:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.IdMappings">
             <summary>
             The mapping between client and server IDs for this Upsert.
             </summary>
             <value>The mapping between client and server IDs for this Upsert.</value>
            </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.Equals(Square.Connect.Model.BatchUpsertCatalogObjectsResponse)">
             <summary>
             Returns true if BatchUpsertCatalogObjectsResponse instances are equal
             </summary>
             <param name="other">Instance of BatchUpsertCatalogObjectsResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.BatchUpsertCatalogObjectsResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CaptureTransactionRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CaptureTransactionRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.Equals(Square.Connect.Model.CaptureTransactionRequest)">
             <summary>
             Returns true if CaptureTransactionRequest instances are equal
             </summary>
             <param name="other">Instance of CaptureTransactionRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CaptureTransactionResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [CaptureTransaction](#endpoint-capturetransaction) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CaptureTransactionResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
            </member>
        <member name="P:Square.Connect.Model.CaptureTransactionResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.Equals(Square.Connect.Model.CaptureTransactionResponse)">
             <summary>
             Returns true if CaptureTransactionResponse instances are equal
             </summary>
             <param name="other">Instance of CaptureTransactionResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CaptureTransactionResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Card">
             <summary>
             Represents the non-confidential details of a credit card.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Card.CardBrandEnum">
             <summary>
             The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand) for all possible values.
             </summary>
             <value>The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand) for all possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.OTHERBRAND">
             <summary>
             Enum OTHERBRAND for "OTHER_BRAND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.VISA">
             <summary>
             Enum VISA for "VISA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.MASTERCARD">
             <summary>
             Enum MASTERCARD for "MASTERCARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.AMERICANEXPRESS">
             <summary>
             Enum AMERICANEXPRESS for "AMERICAN_EXPRESS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.DISCOVER">
             <summary>
             Enum DISCOVER for "DISCOVER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.DISCOVERDINERS">
             <summary>
             Enum DISCOVERDINERS for "DISCOVER_DINERS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.JCB">
             <summary>
             Enum JCB for "JCB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.CHINAUNIONPAY">
             <summary>
             Enum CHINAUNIONPAY for "CHINA_UNIONPAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Card.CardBrandEnum.SQUAREGIFTCARD">
             <summary>
             Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Card.CardBrand">
             <summary>
             The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand) for all possible values.
             </summary>
             <value>The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand) for all possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.Card.#ctor(System.String,System.Nullable{Square.Connect.Model.Card.CardBrandEnum},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,Square.Connect.Model.Address,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Card" /> class.
             </summary>
             <param name="Id">The card's unique ID, if any..</param>
             <param name="CardBrand">The card's brand (such as `VISA`). See [CardBrand](#type-cardbrand) for all possible values..</param>
             <param name="Last4">The last 4 digits of the card's number..</param>
             <param name="ExpMonth">The month of the card's expiration date. This value is always between `1` and `12`, inclusive..</param>
             <param name="ExpYear">The four-digit year of the card's expiration date..</param>
             <param name="CardholderName">The cardholder name. This value is present only if this object represents a customer's card on file..</param>
             <param name="BillingAddress">The card's billing address. This value is present only if this object represents a customer's card on file..</param>
             <param name="Fingerprint">The unique string fingerprint for the card.  The fingerprint is based on the credit card number and is unique to the merchant.  If a card is used at multiple locations for the same merchant, it will have the same fingerprint in each case. Note: Fingerprint may not exist on old transactions..</param>
            </member>
        <member name="P:Square.Connect.Model.Card.Id">
             <summary>
             The card's unique ID, if any.
             </summary>
             <value>The card's unique ID, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Card.Last4">
             <summary>
             The last 4 digits of the card's number.
             </summary>
             <value>The last 4 digits of the card's number.</value>
            </member>
        <member name="P:Square.Connect.Model.Card.ExpMonth">
             <summary>
             The month of the card's expiration date. This value is always between `1` and `12`, inclusive.
             </summary>
             <value>The month of the card's expiration date. This value is always between `1` and `12`, inclusive.</value>
            </member>
        <member name="P:Square.Connect.Model.Card.ExpYear">
             <summary>
             The four-digit year of the card's expiration date.
             </summary>
             <value>The four-digit year of the card's expiration date.</value>
            </member>
        <member name="P:Square.Connect.Model.Card.CardholderName">
             <summary>
             The cardholder name. This value is present only if this object represents a customer's card on file.
             </summary>
             <value>The cardholder name. This value is present only if this object represents a customer's card on file.</value>
            </member>
        <member name="P:Square.Connect.Model.Card.BillingAddress">
             <summary>
             The card's billing address. This value is present only if this object represents a customer's card on file.
             </summary>
             <value>The card's billing address. This value is present only if this object represents a customer's card on file.</value>
            </member>
        <member name="P:Square.Connect.Model.Card.Fingerprint">
             <summary>
             The unique string fingerprint for the card.  The fingerprint is based on the credit card number and is unique to the merchant.  If a card is used at multiple locations for the same merchant, it will have the same fingerprint in each case. Note: Fingerprint may not exist on old transactions.
             </summary>
             <value>The unique string fingerprint for the card.  The fingerprint is based on the credit card number and is unique to the merchant.  If a card is used at multiple locations for the same merchant, it will have the same fingerprint in each case. Note: Fingerprint may not exist on old transactions.</value>
            </member>
        <member name="M:Square.Connect.Model.Card.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Card.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Card.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Card.Equals(Square.Connect.Model.Card)">
             <summary>
             Returns true if Card instances are equal
             </summary>
             <param name="other">Instance of Card to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Card.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CardBrand">
             <summary>
             Indicates a credit card's brand, such as `VISA`.
             </summary>
             <value>Indicates a credit card's brand, such as `VISA`.</value>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.OTHERBRAND">
             <summary>
             Enum OTHERBRAND for "OTHER_BRAND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.VISA">
             <summary>
             Enum VISA for "VISA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.MASTERCARD">
             <summary>
             Enum MASTERCARD for "MASTERCARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.AMERICANEXPRESS">
             <summary>
             Enum AMERICANEXPRESS for "AMERICAN_EXPRESS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.DISCOVER">
             <summary>
             Enum DISCOVER for "DISCOVER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.DISCOVERDINERS">
             <summary>
             Enum DISCOVERDINERS for "DISCOVER_DINERS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.JCB">
             <summary>
             Enum JCB for "JCB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.CHINAUNIONPAY">
             <summary>
             Enum CHINAUNIONPAY for "CHINA_UNIONPAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CardBrand.SQUAREGIFTCARD">
             <summary>
             Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CatalogCategory">
             <summary>
             A category to which an [CatalogItem](#type-catalogitem) belongs in the Catalog object model.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogCategory.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogCategory" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogCategory.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogCategory" /> class.
             </summary>
             <param name="Name">The category's name. Searchable. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogCategory.Name">
             <summary>
             The category's name. Searchable.
             </summary>
             <value>The category's name. Searchable.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogCategory.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogCategory.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogCategory.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogCategory.Equals(Square.Connect.Model.CatalogCategory)">
             <summary>
             Returns true if CatalogCategory instances are equal
             </summary>
             <param name="other">Instance of CatalogCategory to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogCategory.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogDiscount">
             <summary>
             A discount in the Catalog object model.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CatalogDiscount.DiscountTypeEnum">
             <summary>
             Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. See [CatalogDiscountType](#type-catalogdiscounttype) for all possible values.
             </summary>
             <value>Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. See [CatalogDiscountType](#type-catalogdiscounttype) for all possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.CatalogDiscount.DiscountTypeEnum.FIXEDPERCENTAGE">
             <summary>
             Enum FIXEDPERCENTAGE for "FIXED_PERCENTAGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogDiscount.DiscountTypeEnum.FIXEDAMOUNT">
             <summary>
             Enum FIXEDAMOUNT for "FIXED_AMOUNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogDiscount.DiscountTypeEnum.VARIABLEPERCENTAGE">
             <summary>
             Enum VARIABLEPERCENTAGE for "VARIABLE_PERCENTAGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogDiscount.DiscountTypeEnum.VARIABLEAMOUNT">
             <summary>
             Enum VARIABLEAMOUNT for "VARIABLE_AMOUNT"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.CatalogDiscount.DiscountType">
             <summary>
             Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. See [CatalogDiscountType](#type-catalogdiscounttype) for all possible values.
             </summary>
             <value>Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. See [CatalogDiscountType](#type-catalogdiscounttype) for all possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogDiscount.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogDiscount" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogDiscount.#ctor(System.String,System.Nullable{Square.Connect.Model.CatalogDiscount.DiscountTypeEnum},System.String,Square.Connect.Model.Money,System.Nullable{System.Boolean},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogDiscount" /> class.
             </summary>
             <param name="Name">The discount's name. Searchable. (required).</param>
             <param name="DiscountType">Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. See [CatalogDiscountType](#type-catalogdiscounttype) for all possible values..</param>
             <param name="Percentage">The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type` is `VARIABLE_PERCENTAGE`.  Do not include this field for amount-based or variable discounts..</param>
             <param name="AmountMoney">The amount of the discount. Specify an amount of `0` if `discount_type` is `VARIABLE_AMOUNT`.  Do not include this field for percentage-based or variable discounts..</param>
             <param name="PinRequired">Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment in the Square Point of Sale app..</param>
             <param name="LabelColor">The color of the discount's display label in the Square Point of Sale app..</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogDiscount.Name">
             <summary>
             The discount's name. Searchable.
             </summary>
             <value>The discount's name. Searchable.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogDiscount.Percentage">
             <summary>
             The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type` is `VARIABLE_PERCENTAGE`.  Do not include this field for amount-based or variable discounts.
             </summary>
             <value>The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type` is `VARIABLE_PERCENTAGE`.  Do not include this field for amount-based or variable discounts.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogDiscount.AmountMoney">
             <summary>
             The amount of the discount. Specify an amount of `0` if `discount_type` is `VARIABLE_AMOUNT`.  Do not include this field for percentage-based or variable discounts.
             </summary>
             <value>The amount of the discount. Specify an amount of `0` if `discount_type` is `VARIABLE_AMOUNT`.  Do not include this field for percentage-based or variable discounts.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogDiscount.PinRequired">
             <summary>
             Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment in the Square Point of Sale app.
             </summary>
             <value>Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment in the Square Point of Sale app.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogDiscount.LabelColor">
             <summary>
             The color of the discount's display label in the Square Point of Sale app.
             </summary>
             <value>The color of the discount's display label in the Square Point of Sale app.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogDiscount.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogDiscount.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogDiscount.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogDiscount.Equals(Square.Connect.Model.CatalogDiscount)">
             <summary>
             Returns true if CatalogDiscount instances are equal
             </summary>
             <param name="other">Instance of CatalogDiscount to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogDiscount.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogDiscountType">
             <summary>
             How to apply a [CatalogDiscount](#type-catalogdiscount) to a [CatalogItem](#type-catalogitem).
             </summary>
             <value>How to apply a [CatalogDiscount](#type-catalogdiscount) to a [CatalogItem](#type-catalogitem).</value>
            </member>
        <member name="F:Square.Connect.Model.CatalogDiscountType.FIXEDPERCENTAGE">
             <summary>
             Enum FIXEDPERCENTAGE for "FIXED_PERCENTAGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogDiscountType.FIXEDAMOUNT">
             <summary>
             Enum FIXEDAMOUNT for "FIXED_AMOUNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogDiscountType.VARIABLEPERCENTAGE">
             <summary>
             Enum VARIABLEPERCENTAGE for "VARIABLE_PERCENTAGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogDiscountType.VARIABLEAMOUNT">
             <summary>
             Enum VARIABLEAMOUNT for "VARIABLE_AMOUNT"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CatalogIdMapping">
             <summary>
             A mapping between a client-supplied temporary ID and a permanent server ID.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogIdMapping.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogIdMapping" /> class.
             </summary>
             <param name="ClientObjectId">The client-supplied, temporary `#`-prefixed ID for a new [CatalogObject](#type-catalogobject)..</param>
             <param name="ObjectId">The permanent ID for the [CatalogObject](#type-catalogobject) created by the server..</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogIdMapping.ClientObjectId">
             <summary>
             The client-supplied, temporary `#`-prefixed ID for a new [CatalogObject](#type-catalogobject).
             </summary>
             <value>The client-supplied, temporary `#`-prefixed ID for a new [CatalogObject](#type-catalogobject).</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogIdMapping.ObjectId">
             <summary>
             The permanent ID for the [CatalogObject](#type-catalogobject) created by the server.
             </summary>
             <value>The permanent ID for the [CatalogObject](#type-catalogobject) created by the server.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogIdMapping.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogIdMapping.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogIdMapping.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogIdMapping.Equals(Square.Connect.Model.CatalogIdMapping)">
             <summary>
             Returns true if CatalogIdMapping instances are equal
             </summary>
             <param name="other">Instance of CatalogIdMapping to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogIdMapping.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogInfoRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogInfoRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoRequest.Equals(Square.Connect.Model.CatalogInfoRequest)">
             <summary>
             Returns true if CatalogInfoRequest instances are equal
             </summary>
             <param name="other">Instance of CatalogInfoRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogInfoResponse">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.CatalogInfoResponseLimits)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogInfoResponse" /> class.
             </summary>
             <param name="Errors">The set of [Error](#type-error)s encountered..</param>
             <param name="Limits">.</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponse.Errors">
             <summary>
             The set of [Error](#type-error)s encountered.
             </summary>
             <value>The set of [Error](#type-error)s encountered.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponse.Limits">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponse.Equals(Square.Connect.Model.CatalogInfoResponse)">
             <summary>
             Returns true if CatalogInfoResponse instances are equal
             </summary>
             <param name="other">Instance of CatalogInfoResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogInfoResponseLimits">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponseLimits.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogInfoResponseLimits" /> class.
             </summary>
             <param name="BatchUpsertMaxObjectsPerBatch">The maximum number of objects that may appear within a single batch in a `/v2/catalog/batch-upsert` request..</param>
             <param name="BatchUpsertMaxTotalObjects">The maximum number of objects that may appear across all batches in a `/v2/catalog/batch-upsert` request..</param>
             <param name="BatchRetrieveMaxObjectIds">The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve` request..</param>
             <param name="SearchMaxPageLimit">The maximum number of results that may be returned in a page of a `/v2/catalog/search` response..</param>
             <param name="BatchDeleteMaxObjectIds">The maximum number of object IDs that may be included in a single `/v2/catalog/batch-delete` request..</param>
             <param name="UpdateItemTaxesMaxItemIds">The maximum number of item IDs that may be included in a single `/v2/catalog/update-item-taxes` request..</param>
             <param name="UpdateItemTaxesMaxTaxesToEnable">The maximum number of tax IDs to be enabled that may be included in a single `/v2/catalog/update-item-taxes` request..</param>
             <param name="UpdateItemTaxesMaxTaxesToDisable">The maximum number of tax IDs to be disabled that may be included in a single `/v2/catalog/update-item-taxes` request..</param>
             <param name="UpdateItemModifierListsMaxItemIds">The maximum number of item IDs that may be included in a single `/v2/catalog/update-item-modifier-lists` request..</param>
             <param name="UpdateItemModifierListsMaxModifierListsToEnable">The maximum number of modifier list IDs to be enabled that may be included in a single `/v2/catalog/update-item-modifier-lists` request..</param>
             <param name="UpdateItemModifierListsMaxModifierListsToDisable">The maximum number of modifier list IDs to be disabled that may be included in a single `/v2/catalog/update-item-modifier-lists` request..</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.BatchUpsertMaxObjectsPerBatch">
             <summary>
             The maximum number of objects that may appear within a single batch in a `/v2/catalog/batch-upsert` request.
             </summary>
             <value>The maximum number of objects that may appear within a single batch in a `/v2/catalog/batch-upsert` request.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.BatchUpsertMaxTotalObjects">
             <summary>
             The maximum number of objects that may appear across all batches in a `/v2/catalog/batch-upsert` request.
             </summary>
             <value>The maximum number of objects that may appear across all batches in a `/v2/catalog/batch-upsert` request.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.BatchRetrieveMaxObjectIds">
             <summary>
             The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve` request.
             </summary>
             <value>The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve` request.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.SearchMaxPageLimit">
             <summary>
             The maximum number of results that may be returned in a page of a `/v2/catalog/search` response.
             </summary>
             <value>The maximum number of results that may be returned in a page of a `/v2/catalog/search` response.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.BatchDeleteMaxObjectIds">
             <summary>
             The maximum number of object IDs that may be included in a single `/v2/catalog/batch-delete` request.
             </summary>
             <value>The maximum number of object IDs that may be included in a single `/v2/catalog/batch-delete` request.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.UpdateItemTaxesMaxItemIds">
             <summary>
             The maximum number of item IDs that may be included in a single `/v2/catalog/update-item-taxes` request.
             </summary>
             <value>The maximum number of item IDs that may be included in a single `/v2/catalog/update-item-taxes` request.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.UpdateItemTaxesMaxTaxesToEnable">
             <summary>
             The maximum number of tax IDs to be enabled that may be included in a single `/v2/catalog/update-item-taxes` request.
             </summary>
             <value>The maximum number of tax IDs to be enabled that may be included in a single `/v2/catalog/update-item-taxes` request.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.UpdateItemTaxesMaxTaxesToDisable">
             <summary>
             The maximum number of tax IDs to be disabled that may be included in a single `/v2/catalog/update-item-taxes` request.
             </summary>
             <value>The maximum number of tax IDs to be disabled that may be included in a single `/v2/catalog/update-item-taxes` request.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.UpdateItemModifierListsMaxItemIds">
             <summary>
             The maximum number of item IDs that may be included in a single `/v2/catalog/update-item-modifier-lists` request.
             </summary>
             <value>The maximum number of item IDs that may be included in a single `/v2/catalog/update-item-modifier-lists` request.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.UpdateItemModifierListsMaxModifierListsToEnable">
             <summary>
             The maximum number of modifier list IDs to be enabled that may be included in a single `/v2/catalog/update-item-modifier-lists` request.
             </summary>
             <value>The maximum number of modifier list IDs to be enabled that may be included in a single `/v2/catalog/update-item-modifier-lists` request.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogInfoResponseLimits.UpdateItemModifierListsMaxModifierListsToDisable">
             <summary>
             The maximum number of modifier list IDs to be disabled that may be included in a single `/v2/catalog/update-item-modifier-lists` request.
             </summary>
             <value>The maximum number of modifier list IDs to be disabled that may be included in a single `/v2/catalog/update-item-modifier-lists` request.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponseLimits.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponseLimits.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponseLimits.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponseLimits.Equals(Square.Connect.Model.CatalogInfoResponseLimits)">
             <summary>
             Returns true if CatalogInfoResponseLimits instances are equal
             </summary>
             <param name="other">Instance of CatalogInfoResponseLimits to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogInfoResponseLimits.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogItem">
             <summary>
             An item (i.e., product family) in the Catalog object model.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CatalogItem.ProductTypeEnum">
             <summary>
             The product type of the item. May not be changed once an item has been created.  Only items of product type `REGULAR` may be created by this API; items with other product types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for all possible values.
             </summary>
             <value>The product type of the item. May not be changed once an item has been created.  Only items of product type `REGULAR` may be created by this API; items with other product types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for all possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.CatalogItem.ProductTypeEnum.REGULAR">
             <summary>
             Enum REGULAR for "REGULAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogItem.ProductTypeEnum.GIFTCARD">
             <summary>
             Enum GIFTCARD for "GIFT_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogItem.ProductTypeEnum.APPOINTMENTSSERVICE">
             <summary>
             Enum APPOINTMENTSSERVICE for "APPOINTMENTS_SERVICE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogItem.ProductTypeEnum.RETAILITEM">
             <summary>
             Enum RETAILITEM for "RETAIL_ITEM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogItem.ProductTypeEnum.RESTAURANTITEM">
             <summary>
             Enum RESTAURANTITEM for "RESTAURANT_ITEM"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.CatalogItem.ProductType">
             <summary>
             The product type of the item. May not be changed once an item has been created.  Only items of product type `REGULAR` may be created by this API; items with other product types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for all possible values.
             </summary>
             <value>The product type of the item. May not be changed once an item has been created.  Only items of product type `REGULAR` may be created by this API; items with other product types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for all possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogItem.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogItem" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogItem.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Square.Connect.Model.CatalogItemModifierListInfo},System.String,System.Collections.Generic.List{Square.Connect.Model.CatalogObject},System.Nullable{Square.Connect.Model.CatalogItem.ProductTypeEnum},System.Nullable{System.Boolean})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogItem" /> class.
             </summary>
             <param name="Name">The item's name. Searchable. (required).</param>
             <param name="Description">The item's description. Searchable..</param>
             <param name="Abbreviation">The text of the item's display label in the Square Point of Sale app. Only up to the first five characters of the string are used.  Searchable..</param>
             <param name="LabelColor">The color of the item's display label in the Square Point of Sale app..</param>
             <param name="AvailableOnline">If `true`, the item can be added to shipping orders from the merchant's online store..</param>
             <param name="AvailableForPickup">If `true`, the item can be added to pickup orders from the merchant's online store..</param>
             <param name="AvailableElectronically">If `true`, the item can be added to electronically fulfilled orders from the merchant's online store..</param>
             <param name="CategoryId">The ID of the item's category, if any..</param>
             <param name="TaxIds">A set of IDs indicating the [CatalogTax](#type-catalogtax)es that are enabled for this item. When updating an item, any taxes listed here will be added to the item. [CatalogTax](#type-catalogtax)es may also be added to or deleted from an item using `UpdateItemTaxes`..</param>
             <param name="ModifierListInfo">A set of [CatalogItemModifierListInfo](#type-catalogitemmodifierlistinfo) objects representing the modifier lists that apply to this item, along with the overrides and min and max limits that are specific to this item. [CatalogModifierList](#type-catalogmodifierlist)s may also be added to or deleted from an item using `UpdateItemModifierLists`..</param>
             <param name="ImageUrl">The URL of an image representing this item..</param>
             <param name="Variations">A list of [CatalogObject](#type-catalogobject)s containing the [CatalogItemVariation](#type-catalogitemvariation)s for this item..</param>
             <param name="ProductType">The product type of the item. May not be changed once an item has been created.  Only items of product type `REGULAR` may be created by this API; items with other product types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for all possible values..</param>
             <param name="SkipModifierScreen">If `false`, the Square Point of Sale app will present the [CatalogItem](#type-catalogitem)'s details screen immediately, allowing the merchant to choose [CatalogModifier](#type-catalogmodifier)s before adding the item to the cart.  This is the default behavior.  If `true`, the Square Point of Sale app will immediately add the item to the cart with the pre-selected modifiers, and merchants can edit modifiers by drilling down onto the item's details.  Third-party clients are encouraged to implement similar behaviors..</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogItem.Name">
             <summary>
             The item's name. Searchable.
             </summary>
             <value>The item's name. Searchable.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItem.Description">
             <summary>
             The item's description. Searchable.
             </summary>
             <value>The item's description. Searchable.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItem.Abbreviation">
             <summary>
             The text of the item's display label in the Square Point of Sale app. Only up to the first five characters of the string are used.  Searchable.
             </summary>
             <value>The text of the item's display label in the Square Point of Sale app. Only up to the first five characters of the string are used.  Searchable.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItem.LabelColor">
             <summary>
             The color of the item's display label in the Square Point of Sale app.
             </summary>
             <value>The color of the item's display label in the Square Point of Sale app.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItem.AvailableOnline">
             <summary>
             If `true`, the item can be added to shipping orders from the merchant's online store.
             </summary>
             <value>If `true`, the item can be added to shipping orders from the merchant's online store.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItem.AvailableForPickup">
             <summary>
             If `true`, the item can be added to pickup orders from the merchant's online store.
             </summary>
             <value>If `true`, the item can be added to pickup orders from the merchant's online store.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItem.AvailableElectronically">
             <summary>
             If `true`, the item can be added to electronically fulfilled orders from the merchant's online store.
             </summary>
             <value>If `true`, the item can be added to electronically fulfilled orders from the merchant's online store.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItem.CategoryId">
             <summary>
             The ID of the item's category, if any.
             </summary>
             <value>The ID of the item's category, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItem.TaxIds">
             <summary>
             A set of IDs indicating the [CatalogTax](#type-catalogtax)es that are enabled for this item. When updating an item, any taxes listed here will be added to the item. [CatalogTax](#type-catalogtax)es may also be added to or deleted from an item using `UpdateItemTaxes`.
             </summary>
             <value>A set of IDs indicating the [CatalogTax](#type-catalogtax)es that are enabled for this item. When updating an item, any taxes listed here will be added to the item. [CatalogTax](#type-catalogtax)es may also be added to or deleted from an item using `UpdateItemTaxes`.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItem.ModifierListInfo">
             <summary>
             A set of [CatalogItemModifierListInfo](#type-catalogitemmodifierlistinfo) objects representing the modifier lists that apply to this item, along with the overrides and min and max limits that are specific to this item. [CatalogModifierList](#type-catalogmodifierlist)s may also be added to or deleted from an item using `UpdateItemModifierLists`.
             </summary>
             <value>A set of [CatalogItemModifierListInfo](#type-catalogitemmodifierlistinfo) objects representing the modifier lists that apply to this item, along with the overrides and min and max limits that are specific to this item. [CatalogModifierList](#type-catalogmodifierlist)s may also be added to or deleted from an item using `UpdateItemModifierLists`.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItem.ImageUrl">
             <summary>
             The URL of an image representing this item.
             </summary>
             <value>The URL of an image representing this item.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItem.Variations">
             <summary>
             A list of [CatalogObject](#type-catalogobject)s containing the [CatalogItemVariation](#type-catalogitemvariation)s for this item.
             </summary>
             <value>A list of [CatalogObject](#type-catalogobject)s containing the [CatalogItemVariation](#type-catalogitemvariation)s for this item.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItem.SkipModifierScreen">
             <summary>
             If `false`, the Square Point of Sale app will present the [CatalogItem](#type-catalogitem)'s details screen immediately, allowing the merchant to choose [CatalogModifier](#type-catalogmodifier)s before adding the item to the cart.  This is the default behavior.  If `true`, the Square Point of Sale app will immediately add the item to the cart with the pre-selected modifiers, and merchants can edit modifiers by drilling down onto the item's details.  Third-party clients are encouraged to implement similar behaviors.
             </summary>
             <value>If `false`, the Square Point of Sale app will present the [CatalogItem](#type-catalogitem)'s details screen immediately, allowing the merchant to choose [CatalogModifier](#type-catalogmodifier)s before adding the item to the cart.  This is the default behavior.  If `true`, the Square Point of Sale app will immediately add the item to the cart with the pre-selected modifiers, and merchants can edit modifiers by drilling down onto the item's details.  Third-party clients are encouraged to implement similar behaviors.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogItem.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogItem.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogItem.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogItem.Equals(Square.Connect.Model.CatalogItem)">
             <summary>
             Returns true if CatalogItem instances are equal
             </summary>
             <param name="other">Instance of CatalogItem to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogItem.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogItemModifierListInfo">
             <summary>
             Controls the properties of a [CatalogModifierList](#type-catalogmodifierlist) as it applies to this [CatalogItem](#type-catalogitem).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogItemModifierListInfo.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogItemModifierListInfo" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogItemModifierListInfo.#ctor(System.String,System.Collections.Generic.List{Square.Connect.Model.CatalogModifierOverride},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogItemModifierListInfo" /> class.
             </summary>
             <param name="ModifierListId">The ID of the [CatalogModifierList](#type-catalogmodifierlist) controlled by this [CatalogModifierListInfo](#type-catalogmodifierlistinfo). (required).</param>
             <param name="ModifierOverrides">A set of [CatalogModifierOverride](#type-catalogmodifieroverride) objects that override whether a given [CatalogModifier](#type-catalogmodifier) is enabled by default..</param>
             <param name="MinSelectedModifiers">If zero or larger, the smallest number of [CatalogModifier](#type-catalogmodifier)s that must be selected from this [CatalogModifierList](#type-catalogmodifierlist)..</param>
             <param name="MaxSelectedModifiers">If zero or larger, the largest number of [CatalogModifier](#type-catalogmodifier)s that can be selected from this [CatalogModifierList](#type-catalogmodifierlist)..</param>
             <param name="Enabled">If `true`, enable this [CatalogModifierList](#type-catalogmodifierlist)..</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemModifierListInfo.ModifierListId">
             <summary>
             The ID of the [CatalogModifierList](#type-catalogmodifierlist) controlled by this [CatalogModifierListInfo](#type-catalogmodifierlistinfo).
             </summary>
             <value>The ID of the [CatalogModifierList](#type-catalogmodifierlist) controlled by this [CatalogModifierListInfo](#type-catalogmodifierlistinfo).</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemModifierListInfo.ModifierOverrides">
             <summary>
             A set of [CatalogModifierOverride](#type-catalogmodifieroverride) objects that override whether a given [CatalogModifier](#type-catalogmodifier) is enabled by default.
             </summary>
             <value>A set of [CatalogModifierOverride](#type-catalogmodifieroverride) objects that override whether a given [CatalogModifier](#type-catalogmodifier) is enabled by default.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemModifierListInfo.MinSelectedModifiers">
             <summary>
             If zero or larger, the smallest number of [CatalogModifier](#type-catalogmodifier)s that must be selected from this [CatalogModifierList](#type-catalogmodifierlist).
             </summary>
             <value>If zero or larger, the smallest number of [CatalogModifier](#type-catalogmodifier)s that must be selected from this [CatalogModifierList](#type-catalogmodifierlist).</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemModifierListInfo.MaxSelectedModifiers">
             <summary>
             If zero or larger, the largest number of [CatalogModifier](#type-catalogmodifier)s that can be selected from this [CatalogModifierList](#type-catalogmodifierlist).
             </summary>
             <value>If zero or larger, the largest number of [CatalogModifier](#type-catalogmodifier)s that can be selected from this [CatalogModifierList](#type-catalogmodifierlist).</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemModifierListInfo.Enabled">
             <summary>
             If `true`, enable this [CatalogModifierList](#type-catalogmodifierlist).
             </summary>
             <value>If `true`, enable this [CatalogModifierList](#type-catalogmodifierlist).</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogItemModifierListInfo.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogItemModifierListInfo.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogItemModifierListInfo.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogItemModifierListInfo.Equals(Square.Connect.Model.CatalogItemModifierListInfo)">
             <summary>
             Returns true if CatalogItemModifierListInfo instances are equal
             </summary>
             <param name="other">Instance of CatalogItemModifierListInfo to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogItemModifierListInfo.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogItemProductType">
             <summary>
             The type of a [CatalogItem](#type-catalogitem). Connect V2 only allows the creation of `REGULAR` items.
             </summary>
             <value>The type of a [CatalogItem](#type-catalogitem). Connect V2 only allows the creation of `REGULAR` items.</value>
            </member>
        <member name="F:Square.Connect.Model.CatalogItemProductType.REGULAR">
             <summary>
             Enum REGULAR for "REGULAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogItemProductType.GIFTCARD">
             <summary>
             Enum GIFTCARD for "GIFT_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogItemProductType.APPOINTMENTSSERVICE">
             <summary>
             Enum APPOINTMENTSSERVICE for "APPOINTMENTS_SERVICE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogItemProductType.RETAILITEM">
             <summary>
             Enum RETAILITEM for "RETAIL_ITEM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogItemProductType.RESTAURANTITEM">
             <summary>
             Enum RESTAURANTITEM for "RESTAURANT_ITEM"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CatalogItemVariation">
             <summary>
             An item variation (i.e., product) in the Catalog object model.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CatalogItemVariation.PricingTypeEnum">
             <summary>
             Indicates whether the item variation's price is fixed or determined at the time of sale. See [CatalogPricingType](#type-catalogpricingtype) for all possible values.
             </summary>
             <value>Indicates whether the item variation's price is fixed or determined at the time of sale. See [CatalogPricingType](#type-catalogpricingtype) for all possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.CatalogItemVariation.PricingTypeEnum.FIXEDPRICING">
             <summary>
             Enum FIXEDPRICING for "FIXED_PRICING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogItemVariation.PricingTypeEnum.VARIABLEPRICING">
             <summary>
             Enum VARIABLEPRICING for "VARIABLE_PRICING"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CatalogItemVariation.InventoryAlertTypeEnum">
             <summary>
             Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for all possible values.
             </summary>
             <value>Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for all possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.CatalogItemVariation.InventoryAlertTypeEnum.NONE">
             <summary>
             Enum NONE for "NONE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogItemVariation.InventoryAlertTypeEnum.LOWQUANTITY">
             <summary>
             Enum LOWQUANTITY for "LOW_QUANTITY"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.PricingType">
             <summary>
             Indicates whether the item variation's price is fixed or determined at the time of sale. See [CatalogPricingType](#type-catalogpricingtype) for all possible values.
             </summary>
             <value>Indicates whether the item variation's price is fixed or determined at the time of sale. See [CatalogPricingType](#type-catalogpricingtype) for all possible values.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.InventoryAlertType">
             <summary>
             Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for all possible values.
             </summary>
             <value>Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for all possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogItemVariation.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{Square.Connect.Model.CatalogItemVariation.PricingTypeEnum},Square.Connect.Model.Money,System.Collections.Generic.List{Square.Connect.Model.ItemVariationLocationOverrides},System.Nullable{System.Boolean},System.Nullable{Square.Connect.Model.CatalogItemVariation.InventoryAlertTypeEnum},System.Nullable{System.Int64},System.String,System.Nullable{System.Int64})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogItemVariation" /> class.
             </summary>
             <param name="ItemId">The ID of the [CatalogItem](#type-catalogitem) associated with this item variation. Searchable..</param>
             <param name="Name">The item variation's name. Searchable..</param>
             <param name="Sku">The item variation's SKU, if any. Searchable..</param>
             <param name="Upc">The item variation's UPC, if any. Searchable..</param>
             <param name="Ordinal">The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal for each item variation within a parent [CatalogItem](#type-catalogitem) is set according to the item variations's position. On reads, the value is not guaranteed to be sequential or unique..</param>
             <param name="PricingType">Indicates whether the item variation's price is fixed or determined at the time of sale. See [CatalogPricingType](#type-catalogpricingtype) for all possible values..</param>
             <param name="PriceMoney">The item variation's price, if fixed pricing is used..</param>
             <param name="LocationOverrides">Per-[location](#type-location) price and inventory overrides..</param>
             <param name="TrackInventory">If `true`, inventory tracking is active for the variation..</param>
             <param name="InventoryAlertType">Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for all possible values..</param>
             <param name="InventoryAlertThreshold">If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type` is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.  This value is always an integer..</param>
             <param name="UserData">Arbitrary user metadata to associate with the item variation. Cannot exceed 255 characters. Searchable..</param>
             <param name="ServiceDuration">If the [CatalogItem](#type-catalogitem) that owns this item variation is of type `APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For example, a 30 minute appointment would have the value `1800000`, which is equal to 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second)..</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.ItemId">
             <summary>
             The ID of the [CatalogItem](#type-catalogitem) associated with this item variation. Searchable.
             </summary>
             <value>The ID of the [CatalogItem](#type-catalogitem) associated with this item variation. Searchable.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.Name">
             <summary>
             The item variation's name. Searchable.
             </summary>
             <value>The item variation's name. Searchable.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.Sku">
             <summary>
             The item variation's SKU, if any. Searchable.
             </summary>
             <value>The item variation's SKU, if any. Searchable.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.Upc">
             <summary>
             The item variation's UPC, if any. Searchable.
             </summary>
             <value>The item variation's UPC, if any. Searchable.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.Ordinal">
             <summary>
             The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal for each item variation within a parent [CatalogItem](#type-catalogitem) is set according to the item variations's position. On reads, the value is not guaranteed to be sequential or unique.
             </summary>
             <value>The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal for each item variation within a parent [CatalogItem](#type-catalogitem) is set according to the item variations's position. On reads, the value is not guaranteed to be sequential or unique.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.PriceMoney">
             <summary>
             The item variation's price, if fixed pricing is used.
             </summary>
             <value>The item variation's price, if fixed pricing is used.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.LocationOverrides">
             <summary>
             Per-[location](#type-location) price and inventory overrides.
             </summary>
             <value>Per-[location](#type-location) price and inventory overrides.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.TrackInventory">
             <summary>
             If `true`, inventory tracking is active for the variation.
             </summary>
             <value>If `true`, inventory tracking is active for the variation.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.InventoryAlertThreshold">
             <summary>
             If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type` is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.  This value is always an integer.
             </summary>
             <value>If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type` is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.  This value is always an integer.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.UserData">
             <summary>
             Arbitrary user metadata to associate with the item variation. Cannot exceed 255 characters. Searchable.
             </summary>
             <value>Arbitrary user metadata to associate with the item variation. Cannot exceed 255 characters. Searchable.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogItemVariation.ServiceDuration">
             <summary>
             If the [CatalogItem](#type-catalogitem) that owns this item variation is of type `APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For example, a 30 minute appointment would have the value `1800000`, which is equal to 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).
             </summary>
             <value>If the [CatalogItem](#type-catalogitem) that owns this item variation is of type `APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For example, a 30 minute appointment would have the value `1800000`, which is equal to 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogItemVariation.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogItemVariation.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogItemVariation.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogItemVariation.Equals(Square.Connect.Model.CatalogItemVariation)">
             <summary>
             Returns true if CatalogItemVariation instances are equal
             </summary>
             <param name="other">Instance of CatalogItemVariation to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogItemVariation.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogModifier">
             <summary>
             A modifier in the Catalog object model.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifier.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogModifier" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifier.#ctor(System.String,Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogModifier" /> class.
             </summary>
             <param name="Name">The modifier's name. Searchable. (required).</param>
             <param name="PriceMoney">The modifier's price..</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogModifier.Name">
             <summary>
             The modifier's name. Searchable.
             </summary>
             <value>The modifier's name. Searchable.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogModifier.PriceMoney">
             <summary>
             The modifier's price.
             </summary>
             <value>The modifier's price.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifier.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifier.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifier.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifier.Equals(Square.Connect.Model.CatalogModifier)">
             <summary>
             Returns true if CatalogModifier instances are equal
             </summary>
             <param name="other">Instance of CatalogModifier to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifier.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogModifierList">
             <summary>
             A modifier list in the Catalog object model. A [CatalogModifierList](#type-catalogmodifierlist) contains [Modifier](#type-catalogmodifier)s that can be applied to a [CatalogItem](#type-catalogitem) at the time of sale.  For example, a modifier list \"Condiments\" that would apply to a \"Hot Dog\" [CatalogItem](#type-catalogitem) might contain [CatalogModifier](#type-catalogmodifier)s \"Ketchup\", \"Mustard\", and \"Relish\". The `selection_type` field specifies whether or not multiple selections from the modifier list are allowed.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CatalogModifierList.SelectionTypeEnum">
             <summary>
             Indicates whether multiple options from the [CatalogModifierList](#type-catalogmodifierlist) can be applied to a single [CatalogItem](#type-catalogitem). See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for all possible values.
             </summary>
             <value>Indicates whether multiple options from the [CatalogModifierList](#type-catalogmodifierlist) can be applied to a single [CatalogItem](#type-catalogitem). See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for all possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.CatalogModifierList.SelectionTypeEnum.SINGLE">
             <summary>
             Enum SINGLE for "SINGLE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogModifierList.SelectionTypeEnum.MULTIPLE">
             <summary>
             Enum MULTIPLE for "MULTIPLE"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.CatalogModifierList.SelectionType">
             <summary>
             Indicates whether multiple options from the [CatalogModifierList](#type-catalogmodifierlist) can be applied to a single [CatalogItem](#type-catalogitem). See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for all possible values.
             </summary>
             <value>Indicates whether multiple options from the [CatalogModifierList](#type-catalogmodifierlist) can be applied to a single [CatalogItem](#type-catalogitem). See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for all possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifierList.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogModifierList" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifierList.#ctor(System.String,System.Nullable{Square.Connect.Model.CatalogModifierList.SelectionTypeEnum},System.Collections.Generic.List{Square.Connect.Model.CatalogObject})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogModifierList" /> class.
             </summary>
             <param name="Name">The [CatalogModifierList](#type-catalogmodifierlist)'s name. Searchable. (required).</param>
             <param name="SelectionType">Indicates whether multiple options from the [CatalogModifierList](#type-catalogmodifierlist) can be applied to a single [CatalogItem](#type-catalogitem). See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for all possible values..</param>
             <param name="Modifiers">The options included in the [CatalogModifierList](#type-catalogmodifierlist). You must include at least one [CatalogModifier](#type-catalogmodifier). Each [CatalogObject](#type-catalogobject) must have type `MODIFIER` and contain [CatalogModifier](#type-catalogmodifier) data..</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogModifierList.Name">
             <summary>
             The [CatalogModifierList](#type-catalogmodifierlist)'s name. Searchable.
             </summary>
             <value>The [CatalogModifierList](#type-catalogmodifierlist)'s name. Searchable.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogModifierList.Modifiers">
             <summary>
             The options included in the [CatalogModifierList](#type-catalogmodifierlist). You must include at least one [CatalogModifier](#type-catalogmodifier). Each [CatalogObject](#type-catalogobject) must have type `MODIFIER` and contain [CatalogModifier](#type-catalogmodifier) data.
             </summary>
             <value>The options included in the [CatalogModifierList](#type-catalogmodifierlist). You must include at least one [CatalogModifier](#type-catalogmodifier). Each [CatalogObject](#type-catalogobject) must have type `MODIFIER` and contain [CatalogModifier](#type-catalogmodifier) data.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifierList.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifierList.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifierList.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifierList.Equals(Square.Connect.Model.CatalogModifierList)">
             <summary>
             Returns true if CatalogModifierList instances are equal
             </summary>
             <param name="other">Instance of CatalogModifierList to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifierList.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogModifierListSelectionType">
             <summary>
             Indicates whether a [CatalogModifierList](#type-catalogmodifierlist) supports multiple selections.
             </summary>
             <value>Indicates whether a [CatalogModifierList](#type-catalogmodifierlist) supports multiple selections.</value>
            </member>
        <member name="F:Square.Connect.Model.CatalogModifierListSelectionType.SINGLE">
             <summary>
             Enum SINGLE for "SINGLE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogModifierListSelectionType.MULTIPLE">
             <summary>
             Enum MULTIPLE for "MULTIPLE"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CatalogModifierOverride">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifierOverride.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogModifierOverride" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifierOverride.#ctor(System.String,System.Nullable{System.Boolean})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogModifierOverride" /> class.
             </summary>
             <param name="ModifierId">The ID of the [CatalogModifier](#type-catalogmodifier) whose default behavior is being overridden. (required).</param>
             <param name="OnByDefault">If `true`, this [CatalogModifier](#type-catalogmodifier) should be selected by default for this [CatalogItem](#type-catalogitem)..</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogModifierOverride.ModifierId">
             <summary>
             The ID of the [CatalogModifier](#type-catalogmodifier) whose default behavior is being overridden.
             </summary>
             <value>The ID of the [CatalogModifier](#type-catalogmodifier) whose default behavior is being overridden.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogModifierOverride.OnByDefault">
             <summary>
             If `true`, this [CatalogModifier](#type-catalogmodifier) should be selected by default for this [CatalogItem](#type-catalogitem).
             </summary>
             <value>If `true`, this [CatalogModifier](#type-catalogmodifier) should be selected by default for this [CatalogItem](#type-catalogitem).</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifierOverride.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifierOverride.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifierOverride.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifierOverride.Equals(Square.Connect.Model.CatalogModifierOverride)">
             <summary>
             Returns true if CatalogModifierOverride instances are equal
             </summary>
             <param name="other">Instance of CatalogModifierOverride to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogModifierOverride.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogObject">
             <summary>
             The wrapper object for object types in the Catalog data model. The type of a particular `CatalogObject` is determined by the value of `type` and only the corresponding data field may be set.  - if type = `ITEM`, only `item_data` will be populated and it will contain a valid [CatalogItem](#type-catalogitem) object. - if type = `ITEM_VARIATION`, only `item_variation_data` will be populated and it will contain a valid [CatalogItemVariation](#type-catalogitemvariation) object. - if type = `MODIFIER`, only `modifier_data` will be populated and it will contain a valid [CatalogModifier](#type-catalogmodifier) object. - if type = `MODIFIER_LIST`, only `modifier_list_data` will be populated and it will contain a valid [CatalogModifierList](#type-catalogmodifierlist) object. - if type = `CATEGORY`, only `category_data` will be populated and it will contain a valid [CatalogCategory](#type-catalogcategory) object. - if type = `DISCOUNT`, only `discount_data` will be populated and it will contain a valid [CatalogDiscount](#type-catalogdiscount) object. - if type = `TAX`, only `tax_data` will be populated and it will contain a valid [CatalogTax](#type-catalogtax) object.  For a more detailed discussion of the Catalog data model, please see the [Catalog Overview](https://docs.connect.squareup.com/articles/catalog-overview).
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CatalogObject.TypeEnum">
             <summary>
             The type of this object. Each object type has expected properties expressed in a structured format within its corresponding `*_data` field below.  See [CatalogObjectType](#type-catalogobjecttype) for all possible values.
             </summary>
             <value>The type of this object. Each object type has expected properties expressed in a structured format within its corresponding `*_data` field below.  See [CatalogObjectType](#type-catalogobjecttype) for all possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.ITEM">
             <summary>
             Enum ITEM for "ITEM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.CATEGORY">
             <summary>
             Enum CATEGORY for "CATEGORY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.ITEMVARIATION">
             <summary>
             Enum ITEMVARIATION for "ITEM_VARIATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.TAX">
             <summary>
             Enum TAX for "TAX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.DISCOUNT">
             <summary>
             Enum DISCOUNT for "DISCOUNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.MODIFIERLIST">
             <summary>
             Enum MODIFIERLIST for "MODIFIER_LIST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogObject.TypeEnum.MODIFIER">
             <summary>
             Enum MODIFIER for "MODIFIER"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.CatalogObject.Type">
             <summary>
             The type of this object. Each object type has expected properties expressed in a structured format within its corresponding `*_data` field below.  See [CatalogObjectType](#type-catalogobjecttype) for all possible values.
             </summary>
             <value>The type of this object. Each object type has expected properties expressed in a structured format within its corresponding `*_data` field below.  See [CatalogObjectType](#type-catalogobjecttype) for all possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogObject.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogObject" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogObject.#ctor(System.Nullable{Square.Connect.Model.CatalogObject.TypeEnum},System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Collections.Generic.List{Square.Connect.Model.CatalogV1Id},System.Nullable{System.Boolean},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},Square.Connect.Model.CatalogItem,Square.Connect.Model.CatalogCategory,Square.Connect.Model.CatalogItemVariation,Square.Connect.Model.CatalogTax,Square.Connect.Model.CatalogDiscount,Square.Connect.Model.CatalogModifierList,Square.Connect.Model.CatalogModifier)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogObject" /> class.
             </summary>
             <param name="Type">The type of this object. Each object type has expected properties expressed in a structured format within its corresponding `*_data` field below.  See [CatalogObjectType](#type-catalogobjecttype) for all possible values. (required).</param>
             <param name="Id">An identifier to reference this object in the catalog. When a new CatalogObject is inserted, the client should set the id to a temporary identifier starting with a `'#'` character. Other objects being inserted or updated within the same request may use this identifier to refer to the new object.  When the server receives the new object, it will supply a unique identifier that replaces the temporary identifier for all future references. (required).</param>
             <param name="UpdatedAt">Last modification [timestamp](#workingwithdates) in RFC 3339 format, e.g., `\"2016-08-15T23:59:33.123Z\"` would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds..</param>
             <param name="Version">The version of the object. When updating an object, the version supplied by the must match the version in the database, otherwise the write will be rejected as conflicting..</param>
             <param name="IsDeleted">If `true`, the object has been deleted from the database. Must be `false` for new objects being inserted. When deleted, the `updated_at` field will equal the deletion time..</param>
             <param name="CatalogV1Ids">The Connect V1 IDs for this object at each [location](#type-location) where it is present, where they differ from the object's Connect V2 ID. The field will only be present for objects that have been created or modified by legacy APIs..</param>
             <param name="PresentAtAllLocations">If `true`, this object is present at all locations (including future locations), except where specified in the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations), except where specified in the `present_at_location_ids` field. If not specified, defaults to `true`..</param>
             <param name="PresentAtLocationIds">A list of locations where the object is present, even if `present_at_all_locations` is `false`..</param>
             <param name="AbsentAtLocationIds">A list of locations where the object is not present, even if `present_at_all_locations` is `true`..</param>
             <param name="ItemData">Structured data for a [CatalogItem](#type-catalogitem), set for CatalogObjects of type `ITEM`..</param>
             <param name="CategoryData">Structured data for a [CatalogCategory](#type-catalogcategory), set for CatalogObjects of type `CATEGORY`..</param>
             <param name="ItemVariationData">Structured data for a [CatalogItemVariation](#type-catalogitemvariation), set for CatalogObjects of type `ITEM_VARIATION`..</param>
             <param name="TaxData">Structured data for a [CatalogTax](#type-catalogtax), set for CatalogObjects of type `TAX`..</param>
             <param name="DiscountData">Structured data for a [CatalogDiscount](#type-catalogdiscount), set for CatalogObjects of type `DISCOUNT`..</param>
             <param name="ModifierListData">Structured data for a [CatalogModifierList](#type-catalogmodifierlist), set for CatalogObjects of type `MODIFIER_LIST`..</param>
             <param name="ModifierData">Structured data for a [CatalogModifier](#type-catalogmodifier), set for CatalogObjects of type `MODIFIER`..</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogObject.Id">
             <summary>
             An identifier to reference this object in the catalog. When a new CatalogObject is inserted, the client should set the id to a temporary identifier starting with a `'#'` character. Other objects being inserted or updated within the same request may use this identifier to refer to the new object.  When the server receives the new object, it will supply a unique identifier that replaces the temporary identifier for all future references.
             </summary>
             <value>An identifier to reference this object in the catalog. When a new CatalogObject is inserted, the client should set the id to a temporary identifier starting with a `'#'` character. Other objects being inserted or updated within the same request may use this identifier to refer to the new object.  When the server receives the new object, it will supply a unique identifier that replaces the temporary identifier for all future references.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogObject.UpdatedAt">
             <summary>
             Last modification [timestamp](#workingwithdates) in RFC 3339 format, e.g., `\"2016-08-15T23:59:33.123Z\"` would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.
             </summary>
             <value>Last modification [timestamp](#workingwithdates) in RFC 3339 format, e.g., `\"2016-08-15T23:59:33.123Z\"` would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogObject.Version">
             <summary>
             The version of the object. When updating an object, the version supplied by the must match the version in the database, otherwise the write will be rejected as conflicting.
             </summary>
             <value>The version of the object. When updating an object, the version supplied by the must match the version in the database, otherwise the write will be rejected as conflicting.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogObject.IsDeleted">
             <summary>
             If `true`, the object has been deleted from the database. Must be `false` for new objects being inserted. When deleted, the `updated_at` field will equal the deletion time.
             </summary>
             <value>If `true`, the object has been deleted from the database. Must be `false` for new objects being inserted. When deleted, the `updated_at` field will equal the deletion time.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogObject.CatalogV1Ids">
             <summary>
             The Connect V1 IDs for this object at each [location](#type-location) where it is present, where they differ from the object's Connect V2 ID. The field will only be present for objects that have been created or modified by legacy APIs.
             </summary>
             <value>The Connect V1 IDs for this object at each [location](#type-location) where it is present, where they differ from the object's Connect V2 ID. The field will only be present for objects that have been created or modified by legacy APIs.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogObject.PresentAtAllLocations">
             <summary>
             If `true`, this object is present at all locations (including future locations), except where specified in the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations), except where specified in the `present_at_location_ids` field. If not specified, defaults to `true`.
             </summary>
             <value>If `true`, this object is present at all locations (including future locations), except where specified in the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations), except where specified in the `present_at_location_ids` field. If not specified, defaults to `true`.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogObject.PresentAtLocationIds">
             <summary>
             A list of locations where the object is present, even if `present_at_all_locations` is `false`.
             </summary>
             <value>A list of locations where the object is present, even if `present_at_all_locations` is `false`.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogObject.AbsentAtLocationIds">
             <summary>
             A list of locations where the object is not present, even if `present_at_all_locations` is `true`.
             </summary>
             <value>A list of locations where the object is not present, even if `present_at_all_locations` is `true`.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogObject.ItemData">
             <summary>
             Structured data for a [CatalogItem](#type-catalogitem), set for CatalogObjects of type `ITEM`.
             </summary>
             <value>Structured data for a [CatalogItem](#type-catalogitem), set for CatalogObjects of type `ITEM`.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogObject.CategoryData">
             <summary>
             Structured data for a [CatalogCategory](#type-catalogcategory), set for CatalogObjects of type `CATEGORY`.
             </summary>
             <value>Structured data for a [CatalogCategory](#type-catalogcategory), set for CatalogObjects of type `CATEGORY`.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogObject.ItemVariationData">
             <summary>
             Structured data for a [CatalogItemVariation](#type-catalogitemvariation), set for CatalogObjects of type `ITEM_VARIATION`.
             </summary>
             <value>Structured data for a [CatalogItemVariation](#type-catalogitemvariation), set for CatalogObjects of type `ITEM_VARIATION`.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogObject.TaxData">
             <summary>
             Structured data for a [CatalogTax](#type-catalogtax), set for CatalogObjects of type `TAX`.
             </summary>
             <value>Structured data for a [CatalogTax](#type-catalogtax), set for CatalogObjects of type `TAX`.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogObject.DiscountData">
             <summary>
             Structured data for a [CatalogDiscount](#type-catalogdiscount), set for CatalogObjects of type `DISCOUNT`.
             </summary>
             <value>Structured data for a [CatalogDiscount](#type-catalogdiscount), set for CatalogObjects of type `DISCOUNT`.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogObject.ModifierListData">
             <summary>
             Structured data for a [CatalogModifierList](#type-catalogmodifierlist), set for CatalogObjects of type `MODIFIER_LIST`.
             </summary>
             <value>Structured data for a [CatalogModifierList](#type-catalogmodifierlist), set for CatalogObjects of type `MODIFIER_LIST`.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogObject.ModifierData">
             <summary>
             Structured data for a [CatalogModifier](#type-catalogmodifier), set for CatalogObjects of type `MODIFIER`.
             </summary>
             <value>Structured data for a [CatalogModifier](#type-catalogmodifier), set for CatalogObjects of type `MODIFIER`.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogObject.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogObject.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogObject.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogObject.Equals(Square.Connect.Model.CatalogObject)">
             <summary>
             Returns true if CatalogObject instances are equal
             </summary>
             <param name="other">Instance of CatalogObject to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogObject.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogObjectBatch">
             <summary>
             A batch of [CatalogObject](#type-catalogobject)s.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogObjectBatch.#ctor(System.Collections.Generic.List{Square.Connect.Model.CatalogObject})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogObjectBatch" /> class.
             </summary>
             <param name="Objects">A list of [CatalogObject](#type-catalogobject)s belonging to this batch..</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogObjectBatch.Objects">
             <summary>
             A list of [CatalogObject](#type-catalogobject)s belonging to this batch.
             </summary>
             <value>A list of [CatalogObject](#type-catalogobject)s belonging to this batch.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogObjectBatch.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogObjectBatch.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogObjectBatch.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogObjectBatch.Equals(Square.Connect.Model.CatalogObjectBatch)">
             <summary>
             Returns true if CatalogObjectBatch instances are equal
             </summary>
             <param name="other">Instance of CatalogObjectBatch to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogObjectBatch.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogObjectType">
             <summary>
             Possible kinds of [CatalogObject](#type-catalogobject)s returned from the Catalog, each contaning type-specific properties in the `*_data` field corresponding to the object type.
             </summary>
             <value>Possible kinds of [CatalogObject](#type-catalogobject)s returned from the Catalog, each contaning type-specific properties in the `*_data` field corresponding to the object type.</value>
            </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.ITEM">
             <summary>
             Enum ITEM for "ITEM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.CATEGORY">
             <summary>
             Enum CATEGORY for "CATEGORY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.ITEMVARIATION">
             <summary>
             Enum ITEMVARIATION for "ITEM_VARIATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.TAX">
             <summary>
             Enum TAX for "TAX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.DISCOUNT">
             <summary>
             Enum DISCOUNT for "DISCOUNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.MODIFIERLIST">
             <summary>
             Enum MODIFIERLIST for "MODIFIER_LIST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogObjectType.MODIFIER">
             <summary>
             Enum MODIFIER for "MODIFIER"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CatalogPricingType">
             <summary>
             Indicates whether the price of a [CatalogItemVariation](#type-catalogitemvariation) should be entered manually at the time of sale.
             </summary>
             <value>Indicates whether the price of a [CatalogItemVariation](#type-catalogitemvariation) should be entered manually at the time of sale.</value>
            </member>
        <member name="F:Square.Connect.Model.CatalogPricingType.FIXEDPRICING">
             <summary>
             Enum FIXEDPRICING for "FIXED_PRICING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogPricingType.VARIABLEPRICING">
             <summary>
             Enum VARIABLEPRICING for "VARIABLE_PRICING"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CatalogQuery">
             <summary>
             A query to be applied to a [SearchCatalogObjectsRequest](#type-searchcatalogobjectsrequest). Only one query field may be present.  Where an attribute name is required, it should be specified as the name of any field marked \"searchable\" from the structured data types for the desired result object type(s) ([CatalogItem](#type-catalogitem), [CatalogItemVariation](#type-catalogitemvariation), [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax), [CatalogDiscount](#type-catalogdiscount), [CatalogModifierList](#type-catalogmodifierlist), [CatalogModifier](#type-catalogmodifier)).  For example, a query that should return Items may specify attribute names from any of the searchable fields of the [CatalogItem](#type-catalogitem) data type, namely `\"name\"`, `\"description\"`, and `\"abbreviation\"`.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogQuery.#ctor(Square.Connect.Model.CatalogQuerySortedAttribute,Square.Connect.Model.CatalogQueryExact,Square.Connect.Model.CatalogQueryPrefix,Square.Connect.Model.CatalogQueryRange,Square.Connect.Model.CatalogQueryText,Square.Connect.Model.CatalogQueryItemsForTax,Square.Connect.Model.CatalogQueryItemsForModifierList)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQuery" /> class.
             </summary>
             <param name="SortedAttributeQuery">A query that returns all objects, sorted by the given attribute..</param>
             <param name="ExactQuery">A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive value..</param>
             <param name="PrefixQuery">A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive prefix..</param>
             <param name="RangeQuery">A query that returns only objects for which the given (integer-valued) attribute lies in the given range..</param>
             <param name="TextQuery">A query that returns only objects whose searchable attributes contain all of the given keywords as prefixes. For example, if a [CatalogItem](#type-catalogitem) contains attributes `{\"name\": \"t-shirt\"}` and `{\"description\": \"Small, Purple\"}`, it will be matched by the query `{\"keywords\": [\"shirt\", \"sma\", \"purp\"]}`..</param>
             <param name="ItemsForTaxQuery">A query that returns all [CatalogItem](#type-catalogitem)s that have any of the given [CatalogTax](#type-catalogtax)es enabled..</param>
             <param name="ItemsForModifierListQuery">A query that returns all [CatalogItem](#type-catalogitem)s that have any of the given [CatalogModifierList](#type-catalogmodifierlist)s enabled..</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogQuery.SortedAttributeQuery">
             <summary>
             A query that returns all objects, sorted by the given attribute.
             </summary>
             <value>A query that returns all objects, sorted by the given attribute.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogQuery.ExactQuery">
             <summary>
             A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive value.
             </summary>
             <value>A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive value.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogQuery.PrefixQuery">
             <summary>
             A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive prefix.
             </summary>
             <value>A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive prefix.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogQuery.RangeQuery">
             <summary>
             A query that returns only objects for which the given (integer-valued) attribute lies in the given range.
             </summary>
             <value>A query that returns only objects for which the given (integer-valued) attribute lies in the given range.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogQuery.TextQuery">
             <summary>
             A query that returns only objects whose searchable attributes contain all of the given keywords as prefixes. For example, if a [CatalogItem](#type-catalogitem) contains attributes `{\"name\": \"t-shirt\"}` and `{\"description\": \"Small, Purple\"}`, it will be matched by the query `{\"keywords\": [\"shirt\", \"sma\", \"purp\"]}`.
             </summary>
             <value>A query that returns only objects whose searchable attributes contain all of the given keywords as prefixes. For example, if a [CatalogItem](#type-catalogitem) contains attributes `{\"name\": \"t-shirt\"}` and `{\"description\": \"Small, Purple\"}`, it will be matched by the query `{\"keywords\": [\"shirt\", \"sma\", \"purp\"]}`.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogQuery.ItemsForTaxQuery">
             <summary>
             A query that returns all [CatalogItem](#type-catalogitem)s that have any of the given [CatalogTax](#type-catalogtax)es enabled.
             </summary>
             <value>A query that returns all [CatalogItem](#type-catalogitem)s that have any of the given [CatalogTax](#type-catalogtax)es enabled.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogQuery.ItemsForModifierListQuery">
             <summary>
             A query that returns all [CatalogItem](#type-catalogitem)s that have any of the given [CatalogModifierList](#type-catalogmodifierlist)s enabled.
             </summary>
             <value>A query that returns all [CatalogItem](#type-catalogitem)s that have any of the given [CatalogModifierList](#type-catalogmodifierlist)s enabled.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogQuery.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQuery.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQuery.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQuery.Equals(Square.Connect.Model.CatalogQuery)">
             <summary>
             Returns true if CatalogQuery instances are equal
             </summary>
             <param name="other">Instance of CatalogQuery to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQuery.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogQueryExact">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryExact.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryExact" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryExact.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryExact" /> class.
             </summary>
             <param name="AttributeName">The name of the attribute to be searched. (required).</param>
             <param name="AttributeValue">The desired value of the search attribute. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogQueryExact.AttributeName">
             <summary>
             The name of the attribute to be searched.
             </summary>
             <value>The name of the attribute to be searched.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogQueryExact.AttributeValue">
             <summary>
             The desired value of the search attribute.
             </summary>
             <value>The desired value of the search attribute.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryExact.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryExact.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryExact.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryExact.Equals(Square.Connect.Model.CatalogQueryExact)">
             <summary>
             Returns true if CatalogQueryExact instances are equal
             </summary>
             <param name="other">Instance of CatalogQueryExact to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryExact.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogQueryItemsForModifierList">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForModifierList.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryItemsForModifierList" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForModifierList.#ctor(System.Collections.Generic.List{System.String})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryItemsForModifierList" /> class.
             </summary>
             <param name="ModifierListIds">A set of [CatalogModifierList](#type-catalogmodifierlist) IDs to be used to find associated [CatalogItem](#type-catalogitem)s. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogQueryItemsForModifierList.ModifierListIds">
             <summary>
             A set of [CatalogModifierList](#type-catalogmodifierlist) IDs to be used to find associated [CatalogItem](#type-catalogitem)s.
             </summary>
             <value>A set of [CatalogModifierList](#type-catalogmodifierlist) IDs to be used to find associated [CatalogItem](#type-catalogitem)s.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForModifierList.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForModifierList.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForModifierList.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForModifierList.Equals(Square.Connect.Model.CatalogQueryItemsForModifierList)">
             <summary>
             Returns true if CatalogQueryItemsForModifierList instances are equal
             </summary>
             <param name="other">Instance of CatalogQueryItemsForModifierList to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForModifierList.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogQueryItemsForTax">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForTax.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryItemsForTax" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForTax.#ctor(System.Collections.Generic.List{System.String})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryItemsForTax" /> class.
             </summary>
             <param name="TaxIds">A set of [CatalogTax](#type-catalogtax) IDs to be used to find associated [CatalogItem](#type-catalogitem)s. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogQueryItemsForTax.TaxIds">
             <summary>
             A set of [CatalogTax](#type-catalogtax) IDs to be used to find associated [CatalogItem](#type-catalogitem)s.
             </summary>
             <value>A set of [CatalogTax](#type-catalogtax) IDs to be used to find associated [CatalogItem](#type-catalogitem)s.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForTax.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForTax.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForTax.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForTax.Equals(Square.Connect.Model.CatalogQueryItemsForTax)">
             <summary>
             Returns true if CatalogQueryItemsForTax instances are equal
             </summary>
             <param name="other">Instance of CatalogQueryItemsForTax to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryItemsForTax.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogQueryPrefix">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryPrefix.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryPrefix" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryPrefix.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryPrefix" /> class.
             </summary>
             <param name="AttributeName">The name of the attribute to be searched. (required).</param>
             <param name="AttributePrefix">The desired prefix of the search attribute value. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogQueryPrefix.AttributeName">
             <summary>
             The name of the attribute to be searched.
             </summary>
             <value>The name of the attribute to be searched.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogQueryPrefix.AttributePrefix">
             <summary>
             The desired prefix of the search attribute value.
             </summary>
             <value>The desired prefix of the search attribute value.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryPrefix.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryPrefix.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryPrefix.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryPrefix.Equals(Square.Connect.Model.CatalogQueryPrefix)">
             <summary>
             Returns true if CatalogQueryPrefix instances are equal
             </summary>
             <param name="other">Instance of CatalogQueryPrefix to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryPrefix.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogQueryRange">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryRange.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryRange" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryRange.#ctor(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryRange" /> class.
             </summary>
             <param name="AttributeName">The name of the attribute to be searched. (required).</param>
             <param name="AttributeMinValue">The desired minimum value for the search attribute (inclusive)..</param>
             <param name="AttributeMaxValue">The desired maximum value for the search attribute (inclusive)..</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogQueryRange.AttributeName">
             <summary>
             The name of the attribute to be searched.
             </summary>
             <value>The name of the attribute to be searched.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogQueryRange.AttributeMinValue">
             <summary>
             The desired minimum value for the search attribute (inclusive).
             </summary>
             <value>The desired minimum value for the search attribute (inclusive).</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogQueryRange.AttributeMaxValue">
             <summary>
             The desired maximum value for the search attribute (inclusive).
             </summary>
             <value>The desired maximum value for the search attribute (inclusive).</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryRange.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryRange.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryRange.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryRange.Equals(Square.Connect.Model.CatalogQueryRange)">
             <summary>
             Returns true if CatalogQueryRange instances are equal
             </summary>
             <param name="other">Instance of CatalogQueryRange to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryRange.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogQuerySortedAttribute">
             <summary>
             
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CatalogQuerySortedAttribute.SortOrderEnum">
             <summary>
             The desired [SortOrder](#type-sortorder), `\"ASC\"` (ascending) or `\"DESC\"` (descending).
             </summary>
             <value>The desired [SortOrder](#type-sortorder), `\"ASC\"` (ascending) or `\"DESC\"` (descending).</value>
            </member>
        <member name="F:Square.Connect.Model.CatalogQuerySortedAttribute.SortOrderEnum.DESC">
             <summary>
             Enum DESC for "DESC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogQuerySortedAttribute.SortOrderEnum.ASC">
             <summary>
             Enum ASC for "ASC"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.CatalogQuerySortedAttribute.SortOrder">
             <summary>
             The desired [SortOrder](#type-sortorder), `\"ASC\"` (ascending) or `\"DESC\"` (descending).
             </summary>
             <value>The desired [SortOrder](#type-sortorder), `\"ASC\"` (ascending) or `\"DESC\"` (descending).</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogQuerySortedAttribute.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQuerySortedAttribute" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogQuerySortedAttribute.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.CatalogQuerySortedAttribute.SortOrderEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQuerySortedAttribute" /> class.
             </summary>
             <param name="AttributeName">The attribute whose value should be used as the sort key. (required).</param>
             <param name="InitialAttributeValue">The first attribute value to be returned by the query. Ascending sorts will return only objects with this value or greater, while descending sorts will return only objects with this value or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts)..</param>
             <param name="SortOrder">The desired [SortOrder](#type-sortorder), `\"ASC\"` (ascending) or `\"DESC\"` (descending)..</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogQuerySortedAttribute.AttributeName">
             <summary>
             The attribute whose value should be used as the sort key.
             </summary>
             <value>The attribute whose value should be used as the sort key.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogQuerySortedAttribute.InitialAttributeValue">
             <summary>
             The first attribute value to be returned by the query. Ascending sorts will return only objects with this value or greater, while descending sorts will return only objects with this value or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).
             </summary>
             <value>The first attribute value to be returned by the query. Ascending sorts will return only objects with this value or greater, while descending sorts will return only objects with this value or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogQuerySortedAttribute.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQuerySortedAttribute.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQuerySortedAttribute.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQuerySortedAttribute.Equals(Square.Connect.Model.CatalogQuerySortedAttribute)">
             <summary>
             Returns true if CatalogQuerySortedAttribute instances are equal
             </summary>
             <param name="other">Instance of CatalogQuerySortedAttribute to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQuerySortedAttribute.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogQueryText">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryText.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryText" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryText.#ctor(System.Collections.Generic.List{System.String})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogQueryText" /> class.
             </summary>
             <param name="Keywords">A list of one, two, or three search keywords. Keywords with fewer than three characters are ignored. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogQueryText.Keywords">
             <summary>
             A list of one, two, or three search keywords. Keywords with fewer than three characters are ignored.
             </summary>
             <value>A list of one, two, or three search keywords. Keywords with fewer than three characters are ignored.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryText.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryText.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryText.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryText.Equals(Square.Connect.Model.CatalogQueryText)">
             <summary>
             Returns true if CatalogQueryText instances are equal
             </summary>
             <param name="other">Instance of CatalogQueryText to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogQueryText.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogTax">
             <summary>
             A tax in the Catalog object model.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CatalogTax.CalculationPhaseEnum">
             <summary>
             Whether the tax is calculated based on a payment's subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for all possible values.
             </summary>
             <value>Whether the tax is calculated based on a payment's subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for all possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.CatalogTax.CalculationPhaseEnum.SUBTOTALPHASE">
             <summary>
             Enum SUBTOTALPHASE for "TAX_SUBTOTAL_PHASE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogTax.CalculationPhaseEnum.TOTALPHASE">
             <summary>
             Enum TOTALPHASE for "TAX_TOTAL_PHASE"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CatalogTax.InclusionTypeEnum">
             <summary>
             Whether the tax is `ADDITIVE` or `INCLUSIVE`. See [TaxInclusionType](#type-taxinclusiontype) for all possible values.
             </summary>
             <value>Whether the tax is `ADDITIVE` or `INCLUSIVE`. See [TaxInclusionType](#type-taxinclusiontype) for all possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.CatalogTax.InclusionTypeEnum.ADDITIVE">
             <summary>
             Enum ADDITIVE for "ADDITIVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CatalogTax.InclusionTypeEnum.INCLUSIVE">
             <summary>
             Enum INCLUSIVE for "INCLUSIVE"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.CatalogTax.CalculationPhase">
             <summary>
             Whether the tax is calculated based on a payment's subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for all possible values.
             </summary>
             <value>Whether the tax is calculated based on a payment's subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for all possible values.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogTax.InclusionType">
             <summary>
             Whether the tax is `ADDITIVE` or `INCLUSIVE`. See [TaxInclusionType](#type-taxinclusiontype) for all possible values.
             </summary>
             <value>Whether the tax is `ADDITIVE` or `INCLUSIVE`. See [TaxInclusionType](#type-taxinclusiontype) for all possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogTax.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogTax" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogTax.#ctor(System.String,System.Nullable{Square.Connect.Model.CatalogTax.CalculationPhaseEnum},System.Nullable{Square.Connect.Model.CatalogTax.InclusionTypeEnum},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogTax" /> class.
             </summary>
             <param name="Name">The tax's name. Searchable. (required).</param>
             <param name="CalculationPhase">Whether the tax is calculated based on a payment's subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for all possible values..</param>
             <param name="InclusionType">Whether the tax is `ADDITIVE` or `INCLUSIVE`. See [TaxInclusionType](#type-taxinclusiontype) for all possible values..</param>
             <param name="Percentage">The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign. A value of `7.5` corresponds to 7.5%..</param>
             <param name="AppliesToCustomAmounts">If `true`, the fee applies to custom amounts entered into the Square Point of Sale app that are not associated with a particular [CatalogItem](#type-catalogitem)..</param>
             <param name="Enabled">If `true`, the tax will be shown as enabled in the Square Point of Sale app..</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogTax.Name">
             <summary>
             The tax's name. Searchable.
             </summary>
             <value>The tax's name. Searchable.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogTax.Percentage">
             <summary>
             The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign. A value of `7.5` corresponds to 7.5%.
             </summary>
             <value>The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign. A value of `7.5` corresponds to 7.5%.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogTax.AppliesToCustomAmounts">
             <summary>
             If `true`, the fee applies to custom amounts entered into the Square Point of Sale app that are not associated with a particular [CatalogItem](#type-catalogitem).
             </summary>
             <value>If `true`, the fee applies to custom amounts entered into the Square Point of Sale app that are not associated with a particular [CatalogItem](#type-catalogitem).</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogTax.Enabled">
             <summary>
             If `true`, the tax will be shown as enabled in the Square Point of Sale app.
             </summary>
             <value>If `true`, the tax will be shown as enabled in the Square Point of Sale app.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogTax.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogTax.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogTax.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogTax.Equals(Square.Connect.Model.CatalogTax)">
             <summary>
             Returns true if CatalogTax instances are equal
             </summary>
             <param name="other">Instance of CatalogTax to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogTax.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CatalogV1Id">
             <summary>
             An Items Connect V1 object ID along with its associated [location](#type-location) ID.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CatalogV1Id.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CatalogV1Id" /> class.
             </summary>
             <param name="_CatalogV1Id">The ID for an object in Connect V1, if different from its Connect V2 ID..</param>
             <param name="LocationId">The ID of the [location](#type-location) this Connect V1 ID is associated with..</param>
            </member>
        <member name="P:Square.Connect.Model.CatalogV1Id._CatalogV1Id">
             <summary>
             The ID for an object in Connect V1, if different from its Connect V2 ID.
             </summary>
             <value>The ID for an object in Connect V1, if different from its Connect V2 ID.</value>
            </member>
        <member name="P:Square.Connect.Model.CatalogV1Id.LocationId">
             <summary>
             The ID of the [location](#type-location) this Connect V1 ID is associated with.
             </summary>
             <value>The ID of the [location](#type-location) this Connect V1 ID is associated with.</value>
            </member>
        <member name="M:Square.Connect.Model.CatalogV1Id.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogV1Id.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogV1Id.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogV1Id.Equals(Square.Connect.Model.CatalogV1Id)">
             <summary>
             Returns true if CatalogV1Id instances are equal
             </summary>
             <param name="other">Instance of CatalogV1Id to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CatalogV1Id.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ChargeRequest">
             <summary>
             Defines the parameters that can be included in the body of a request to the [Charge](#endpoint-charge) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ChargeRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.#ctor(System.String,Square.Connect.Model.Money,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,Square.Connect.Model.Address,Square.Connect.Model.Address,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.AdditionalRecipient})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ChargeRequest" /> class.
             </summary>
             <param name="IdempotencyKey">A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency keys](#idempotencykeys) for more information. (required).</param>
             <param name="AmountMoney">The amount of money to charge.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  The value of `currency` must match the currency associated with the business that is charging the card. (required).</param>
             <param name="CardNonce">A nonce generated from the `SqPaymentForm` that represents the card to charge.  The application that provides a nonce to this endpoint must be the _same application_ that generated the nonce with the `SqPaymentForm`. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for `customer_card_id`..</param>
             <param name="CustomerCardId">The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for `card_nonce`.  If you provide this value, you _must_ also provide a value for `customer_id`..</param>
             <param name="DelayCapture">If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the [CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void (with the [VoidTransaction](#endpoint-voidtransaction) endpoint).  Default value: `false`.</param>
             <param name="ReferenceId">An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters..</param>
             <param name="Note">An optional note to associate with the transaction.  This value cannot exceed 60 characters..</param>
             <param name="CustomerId">The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise..</param>
             <param name="BillingAddress">The buyer's billing address. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `shipping_address` is provided..</param>
             <param name="ShippingAddress">The buyer's shipping address, if available. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `billing_address` is provided..</param>
             <param name="BuyerEmailAddress">The buyer's email address, if available. This value is optional, but this transaction is ineligible for chargeback protection if it is not provided..</param>
             <param name="OrderId">The ID of the order to associate with this transaction.  If you provide this value, the `amount_money` value of your request must __exactly match__ the `total_money` value of the order's `order_amounts` field..</param>
             <param name="AdditionalRecipients">The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the `amount_money` value in your additional_recipients must not be more than 90% of the `amount_money` value in you charge's request. The `location_id` must be the valid location of the app owner merchant.  This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.  This field is currently not supported in sandbox..</param>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.IdempotencyKey">
             <summary>
             A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency keys](#idempotencykeys) for more information.
             </summary>
             <value>A value you specify that uniquely identifies this transaction among transactions you've created.  If you're unsure whether a particular transaction succeeded, you can reattempt it with the same idempotency key without worrying about double-charging the buyer.  See [Idempotency keys](#idempotencykeys) for more information.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.AmountMoney">
             <summary>
             The amount of money to charge.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  The value of `currency` must match the currency associated with the business that is charging the card.
             </summary>
             <value>The amount of money to charge.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  The value of `currency` must match the currency associated with the business that is charging the card.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.CardNonce">
             <summary>
             A nonce generated from the `SqPaymentForm` that represents the card to charge.  The application that provides a nonce to this endpoint must be the _same application_ that generated the nonce with the `SqPaymentForm`. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for `customer_card_id`.
             </summary>
             <value>A nonce generated from the `SqPaymentForm` that represents the card to charge.  The application that provides a nonce to this endpoint must be the _same application_ that generated the nonce with the `SqPaymentForm`. Otherwise, the nonce is invalid.  Do not provide a value for this field if you provide a value for `customer_card_id`.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.CustomerCardId">
             <summary>
             The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for `card_nonce`.  If you provide this value, you _must_ also provide a value for `customer_id`.
             </summary>
             <value>The ID of the customer card on file to charge. Do not provide a value for this field if you provide a value for `card_nonce`.  If you provide this value, you _must_ also provide a value for `customer_id`.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.DelayCapture">
             <summary>
             If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the [CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void (with the [VoidTransaction](#endpoint-voidtransaction) endpoint).  Default value: `false`
             </summary>
             <value>If `true`, the request will only perform an Auth on the provided card. You can then later perform either a Capture (with the [CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void (with the [VoidTransaction](#endpoint-voidtransaction) endpoint).  Default value: `false`</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.ReferenceId">
             <summary>
             An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters.
             </summary>
             <value>An optional ID you can associate with the transaction for your own purposes (such as to associate the transaction with an entity ID in your own database).  This value cannot exceed 40 characters.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.Note">
             <summary>
             An optional note to associate with the transaction.  This value cannot exceed 60 characters.
             </summary>
             <value>An optional note to associate with the transaction.  This value cannot exceed 60 characters.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.CustomerId">
             <summary>
             The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise.
             </summary>
             <value>The ID of the customer to associate this transaction with. This field is required if you provide a value for `customer_card_id`, and optional otherwise.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.BillingAddress">
             <summary>
             The buyer's billing address. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `shipping_address` is provided.
             </summary>
             <value>The buyer's billing address. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `shipping_address` is provided.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.ShippingAddress">
             <summary>
             The buyer's shipping address, if available. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `billing_address` is provided.
             </summary>
             <value>The buyer's shipping address, if available. This value is optional, but this transaction is ineligible for chargeback protection if neither this parameter nor `billing_address` is provided.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.BuyerEmailAddress">
             <summary>
             The buyer's email address, if available. This value is optional, but this transaction is ineligible for chargeback protection if it is not provided.
             </summary>
             <value>The buyer's email address, if available. This value is optional, but this transaction is ineligible for chargeback protection if it is not provided.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.OrderId">
             <summary>
             The ID of the order to associate with this transaction.  If you provide this value, the `amount_money` value of your request must __exactly match__ the `total_money` value of the order's `order_amounts` field.
             </summary>
             <value>The ID of the order to associate with this transaction.  If you provide this value, the `amount_money` value of your request must __exactly match__ the `total_money` value of the order's `order_amounts` field.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequest.AdditionalRecipients">
             <summary>
             The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the `amount_money` value in your additional_recipients must not be more than 90% of the `amount_money` value in you charge's request. The `location_id` must be the valid location of the app owner merchant.  This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.  This field is currently not supported in sandbox.
             </summary>
             <value>The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the `amount_money` value in your additional_recipients must not be more than 90% of the `amount_money` value in you charge's request. The `location_id` must be the valid location of the app owner merchant.  This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.  This field is currently not supported in sandbox.</value>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.Equals(Square.Connect.Model.ChargeRequest)">
             <summary>
             Returns true if ChargeRequest instances are equal
             </summary>
             <param name="other">Instance of ChargeRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ChargeRequestAdditionalRecipient">
             <summary>
             Represents an additional recipient (other than the merchant) entitled to a portion of the tender. Support is currently limited to USD, CAD and GBP currencies
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequestAdditionalRecipient.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ChargeRequestAdditionalRecipient" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequestAdditionalRecipient.#ctor(System.String,System.String,Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ChargeRequestAdditionalRecipient" /> class.
             </summary>
             <param name="LocationId">The location ID for a recipient (other than the merchant) receiving a portion of the tender. (required).</param>
             <param name="Description">The description of the additional recipient. (required).</param>
             <param name="AmountMoney">The amount of money distributed to the recipient. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequestAdditionalRecipient.LocationId">
             <summary>
             The location ID for a recipient (other than the merchant) receiving a portion of the tender.
             </summary>
             <value>The location ID for a recipient (other than the merchant) receiving a portion of the tender.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequestAdditionalRecipient.Description">
             <summary>
             The description of the additional recipient.
             </summary>
             <value>The description of the additional recipient.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeRequestAdditionalRecipient.AmountMoney">
             <summary>
             The amount of money distributed to the recipient.
             </summary>
             <value>The amount of money distributed to the recipient.</value>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequestAdditionalRecipient.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequestAdditionalRecipient.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequestAdditionalRecipient.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequestAdditionalRecipient.Equals(Square.Connect.Model.ChargeRequestAdditionalRecipient)">
             <summary>
             Returns true if ChargeRequestAdditionalRecipient instances are equal
             </summary>
             <param name="other">Instance of ChargeRequestAdditionalRecipient to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeRequestAdditionalRecipient.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ChargeResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [Charge](#endpoint-charge) endpoint.  One of `errors` or `transaction` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Transaction)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ChargeResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Transaction">The created transaction..</param>
            </member>
        <member name="P:Square.Connect.Model.ChargeResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.ChargeResponse.Transaction">
             <summary>
             The created transaction.
             </summary>
             <value>The created transaction.</value>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.Equals(Square.Connect.Model.ChargeResponse)">
             <summary>
             Returns true if ChargeResponse instances are equal
             </summary>
             <param name="other">Instance of ChargeResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ChargeResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Checkout">
             <summary>
             Square Checkout lets merchants accept online payments for supported payment types using a checkout workflow hosted on squareup.com.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Checkout.#ctor(System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,Square.Connect.Model.Address,System.String,Square.Connect.Model.Order,System.String,System.Collections.Generic.List{Square.Connect.Model.AdditionalRecipient})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Checkout" /> class.
             </summary>
             <param name="Id">ID generated by Square Checkout when a new checkout is requested..</param>
             <param name="CheckoutPageUrl">The URL that the buyer's browser should be redirected to after the checkout is completed..</param>
             <param name="AskForShippingAddress">If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: `false`..</param>
             <param name="MerchantSupportEmail">The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default: none; only exists if explicitly set..</param>
             <param name="PrePopulateBuyerEmail">If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set..</param>
             <param name="PrePopulateShippingAddress">If provided, the buyer's shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set..</param>
             <param name="RedirectUrl">The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  `http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx`  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow..</param>
             <param name="Order">Order to be checked out..</param>
             <param name="CreatedAt">The time when the checkout was created, in RFC 3339 format..</param>
             <param name="AdditionalRecipients">Additional recipients (other than the merchant) receiving a portion of this checkout. For example, fees assessed on the purchase by a third party integration..</param>
            </member>
        <member name="P:Square.Connect.Model.Checkout.Id">
             <summary>
             ID generated by Square Checkout when a new checkout is requested.
             </summary>
             <value>ID generated by Square Checkout when a new checkout is requested.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.CheckoutPageUrl">
             <summary>
             The URL that the buyer's browser should be redirected to after the checkout is completed.
             </summary>
             <value>The URL that the buyer's browser should be redirected to after the checkout is completed.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.AskForShippingAddress">
             <summary>
             If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: `false`.
             </summary>
             <value>If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: `false`.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.MerchantSupportEmail">
             <summary>
             The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default: none; only exists if explicitly set.
             </summary>
             <value>The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default: none; only exists if explicitly set.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.PrePopulateBuyerEmail">
             <summary>
             If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.
             </summary>
             <value>If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.PrePopulateShippingAddress">
             <summary>
             If provided, the buyer's shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set.
             </summary>
             <value>If provided, the buyer's shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.RedirectUrl">
             <summary>
             The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  `http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx`  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.
             </summary>
             <value>The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  `http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx`  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.Order">
             <summary>
             Order to be checked out.
             </summary>
             <value>Order to be checked out.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.CreatedAt">
             <summary>
             The time when the checkout was created, in RFC 3339 format.
             </summary>
             <value>The time when the checkout was created, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Checkout.AdditionalRecipients">
             <summary>
             Additional recipients (other than the merchant) receiving a portion of this checkout. For example, fees assessed on the purchase by a third party integration.
             </summary>
             <value>Additional recipients (other than the merchant) receiving a portion of this checkout. For example, fees assessed on the purchase by a third party integration.</value>
            </member>
        <member name="M:Square.Connect.Model.Checkout.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Checkout.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Checkout.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Checkout.Equals(Square.Connect.Model.Checkout)">
             <summary>
             Returns true if Checkout instances are equal
             </summary>
             <param name="other">Instance of Checkout to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Checkout.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Country">
             <summary>
             Indicates the country associated with another entity, such as a business. Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).
             </summary>
             <value>Indicates the country associated with another entity, such as a business. Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).</value>
            </member>
        <member name="F:Square.Connect.Model.Country.ZZ">
             <summary>
             Enum ZZ for "ZZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AD">
             <summary>
             Enum AD for "AD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AE">
             <summary>
             Enum AE for "AE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AF">
             <summary>
             Enum AF for "AF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AG">
             <summary>
             Enum AG for "AG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AI">
             <summary>
             Enum AI for "AI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AL">
             <summary>
             Enum AL for "AL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AM">
             <summary>
             Enum AM for "AM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AO">
             <summary>
             Enum AO for "AO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AQ">
             <summary>
             Enum AQ for "AQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AR">
             <summary>
             Enum AR for "AR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AS">
             <summary>
             Enum AS for "AS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AT">
             <summary>
             Enum AT for "AT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AU">
             <summary>
             Enum AU for "AU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AW">
             <summary>
             Enum AW for "AW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AX">
             <summary>
             Enum AX for "AX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.AZ">
             <summary>
             Enum AZ for "AZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BA">
             <summary>
             Enum BA for "BA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BB">
             <summary>
             Enum BB for "BB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BD">
             <summary>
             Enum BD for "BD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BE">
             <summary>
             Enum BE for "BE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BF">
             <summary>
             Enum BF for "BF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BG">
             <summary>
             Enum BG for "BG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BH">
             <summary>
             Enum BH for "BH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BI">
             <summary>
             Enum BI for "BI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BJ">
             <summary>
             Enum BJ for "BJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BL">
             <summary>
             Enum BL for "BL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BM">
             <summary>
             Enum BM for "BM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BN">
             <summary>
             Enum BN for "BN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BO">
             <summary>
             Enum BO for "BO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BQ">
             <summary>
             Enum BQ for "BQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BR">
             <summary>
             Enum BR for "BR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BS">
             <summary>
             Enum BS for "BS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BT">
             <summary>
             Enum BT for "BT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BV">
             <summary>
             Enum BV for "BV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BW">
             <summary>
             Enum BW for "BW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BY">
             <summary>
             Enum BY for "BY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.BZ">
             <summary>
             Enum BZ for "BZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CA">
             <summary>
             Enum CA for "CA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CC">
             <summary>
             Enum CC for "CC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CD">
             <summary>
             Enum CD for "CD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CF">
             <summary>
             Enum CF for "CF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CG">
             <summary>
             Enum CG for "CG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CH">
             <summary>
             Enum CH for "CH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CI">
             <summary>
             Enum CI for "CI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CK">
             <summary>
             Enum CK for "CK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CL">
             <summary>
             Enum CL for "CL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CM">
             <summary>
             Enum CM for "CM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CN">
             <summary>
             Enum CN for "CN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CO">
             <summary>
             Enum CO for "CO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CR">
             <summary>
             Enum CR for "CR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CU">
             <summary>
             Enum CU for "CU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CV">
             <summary>
             Enum CV for "CV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CW">
             <summary>
             Enum CW for "CW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CX">
             <summary>
             Enum CX for "CX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CY">
             <summary>
             Enum CY for "CY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.CZ">
             <summary>
             Enum CZ for "CZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.DE">
             <summary>
             Enum DE for "DE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.DJ">
             <summary>
             Enum DJ for "DJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.DK">
             <summary>
             Enum DK for "DK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.DM">
             <summary>
             Enum DM for "DM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.DO">
             <summary>
             Enum DO for "DO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.DZ">
             <summary>
             Enum DZ for "DZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.EC">
             <summary>
             Enum EC for "EC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.EE">
             <summary>
             Enum EE for "EE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.EG">
             <summary>
             Enum EG for "EG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.EH">
             <summary>
             Enum EH for "EH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ER">
             <summary>
             Enum ER for "ER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ES">
             <summary>
             Enum ES for "ES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ET">
             <summary>
             Enum ET for "ET"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.FI">
             <summary>
             Enum FI for "FI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.FJ">
             <summary>
             Enum FJ for "FJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.FK">
             <summary>
             Enum FK for "FK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.FM">
             <summary>
             Enum FM for "FM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.FO">
             <summary>
             Enum FO for "FO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.FR">
             <summary>
             Enum FR for "FR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GA">
             <summary>
             Enum GA for "GA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GB">
             <summary>
             Enum GB for "GB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GD">
             <summary>
             Enum GD for "GD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GE">
             <summary>
             Enum GE for "GE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GF">
             <summary>
             Enum GF for "GF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GG">
             <summary>
             Enum GG for "GG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GH">
             <summary>
             Enum GH for "GH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GI">
             <summary>
             Enum GI for "GI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GL">
             <summary>
             Enum GL for "GL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GM">
             <summary>
             Enum GM for "GM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GN">
             <summary>
             Enum GN for "GN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GP">
             <summary>
             Enum GP for "GP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GQ">
             <summary>
             Enum GQ for "GQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GR">
             <summary>
             Enum GR for "GR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GS">
             <summary>
             Enum GS for "GS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GT">
             <summary>
             Enum GT for "GT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GU">
             <summary>
             Enum GU for "GU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GW">
             <summary>
             Enum GW for "GW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.GY">
             <summary>
             Enum GY for "GY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.HK">
             <summary>
             Enum HK for "HK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.HM">
             <summary>
             Enum HM for "HM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.HN">
             <summary>
             Enum HN for "HN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.HR">
             <summary>
             Enum HR for "HR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.HT">
             <summary>
             Enum HT for "HT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.HU">
             <summary>
             Enum HU for "HU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ID">
             <summary>
             Enum ID for "ID"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IE">
             <summary>
             Enum IE for "IE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IL">
             <summary>
             Enum IL for "IL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IM">
             <summary>
             Enum IM for "IM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IN">
             <summary>
             Enum IN for "IN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IO">
             <summary>
             Enum IO for "IO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IQ">
             <summary>
             Enum IQ for "IQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IR">
             <summary>
             Enum IR for "IR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IS">
             <summary>
             Enum IS for "IS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.IT">
             <summary>
             Enum IT for "IT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.JE">
             <summary>
             Enum JE for "JE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.JM">
             <summary>
             Enum JM for "JM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.JO">
             <summary>
             Enum JO for "JO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.JP">
             <summary>
             Enum JP for "JP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KE">
             <summary>
             Enum KE for "KE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KG">
             <summary>
             Enum KG for "KG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KH">
             <summary>
             Enum KH for "KH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KI">
             <summary>
             Enum KI for "KI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KM">
             <summary>
             Enum KM for "KM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KN">
             <summary>
             Enum KN for "KN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KP">
             <summary>
             Enum KP for "KP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KR">
             <summary>
             Enum KR for "KR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KW">
             <summary>
             Enum KW for "KW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KY">
             <summary>
             Enum KY for "KY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.KZ">
             <summary>
             Enum KZ for "KZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LA">
             <summary>
             Enum LA for "LA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LB">
             <summary>
             Enum LB for "LB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LC">
             <summary>
             Enum LC for "LC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LI">
             <summary>
             Enum LI for "LI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LK">
             <summary>
             Enum LK for "LK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LR">
             <summary>
             Enum LR for "LR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LS">
             <summary>
             Enum LS for "LS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LT">
             <summary>
             Enum LT for "LT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LU">
             <summary>
             Enum LU for "LU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LV">
             <summary>
             Enum LV for "LV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.LY">
             <summary>
             Enum LY for "LY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MA">
             <summary>
             Enum MA for "MA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MC">
             <summary>
             Enum MC for "MC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MD">
             <summary>
             Enum MD for "MD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ME">
             <summary>
             Enum ME for "ME"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MF">
             <summary>
             Enum MF for "MF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MG">
             <summary>
             Enum MG for "MG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MH">
             <summary>
             Enum MH for "MH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MK">
             <summary>
             Enum MK for "MK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ML">
             <summary>
             Enum ML for "ML"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MM">
             <summary>
             Enum MM for "MM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MN">
             <summary>
             Enum MN for "MN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MO">
             <summary>
             Enum MO for "MO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MP">
             <summary>
             Enum MP for "MP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MQ">
             <summary>
             Enum MQ for "MQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MR">
             <summary>
             Enum MR for "MR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MS">
             <summary>
             Enum MS for "MS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MT">
             <summary>
             Enum MT for "MT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MU">
             <summary>
             Enum MU for "MU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MV">
             <summary>
             Enum MV for "MV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MW">
             <summary>
             Enum MW for "MW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MX">
             <summary>
             Enum MX for "MX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MY">
             <summary>
             Enum MY for "MY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.MZ">
             <summary>
             Enum MZ for "MZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NA">
             <summary>
             Enum NA for "NA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NC">
             <summary>
             Enum NC for "NC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NE">
             <summary>
             Enum NE for "NE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NF">
             <summary>
             Enum NF for "NF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NG">
             <summary>
             Enum NG for "NG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NI">
             <summary>
             Enum NI for "NI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NL">
             <summary>
             Enum NL for "NL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NO">
             <summary>
             Enum NO for "NO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NP">
             <summary>
             Enum NP for "NP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NR">
             <summary>
             Enum NR for "NR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NU">
             <summary>
             Enum NU for "NU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.NZ">
             <summary>
             Enum NZ for "NZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.OM">
             <summary>
             Enum OM for "OM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PA">
             <summary>
             Enum PA for "PA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PE">
             <summary>
             Enum PE for "PE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PF">
             <summary>
             Enum PF for "PF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PG">
             <summary>
             Enum PG for "PG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PH">
             <summary>
             Enum PH for "PH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PK">
             <summary>
             Enum PK for "PK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PL">
             <summary>
             Enum PL for "PL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PM">
             <summary>
             Enum PM for "PM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PN">
             <summary>
             Enum PN for "PN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PR">
             <summary>
             Enum PR for "PR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PS">
             <summary>
             Enum PS for "PS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PT">
             <summary>
             Enum PT for "PT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PW">
             <summary>
             Enum PW for "PW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.PY">
             <summary>
             Enum PY for "PY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.QA">
             <summary>
             Enum QA for "QA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.RE">
             <summary>
             Enum RE for "RE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.RO">
             <summary>
             Enum RO for "RO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.RS">
             <summary>
             Enum RS for "RS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.RU">
             <summary>
             Enum RU for "RU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.RW">
             <summary>
             Enum RW for "RW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SA">
             <summary>
             Enum SA for "SA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SB">
             <summary>
             Enum SB for "SB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SC">
             <summary>
             Enum SC for "SC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SD">
             <summary>
             Enum SD for "SD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SE">
             <summary>
             Enum SE for "SE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SG">
             <summary>
             Enum SG for "SG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SH">
             <summary>
             Enum SH for "SH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SI">
             <summary>
             Enum SI for "SI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SJ">
             <summary>
             Enum SJ for "SJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SK">
             <summary>
             Enum SK for "SK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SL">
             <summary>
             Enum SL for "SL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SM">
             <summary>
             Enum SM for "SM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SN">
             <summary>
             Enum SN for "SN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SO">
             <summary>
             Enum SO for "SO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SR">
             <summary>
             Enum SR for "SR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SS">
             <summary>
             Enum SS for "SS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ST">
             <summary>
             Enum ST for "ST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SV">
             <summary>
             Enum SV for "SV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SX">
             <summary>
             Enum SX for "SX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SY">
             <summary>
             Enum SY for "SY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.SZ">
             <summary>
             Enum SZ for "SZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TC">
             <summary>
             Enum TC for "TC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TD">
             <summary>
             Enum TD for "TD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TF">
             <summary>
             Enum TF for "TF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TG">
             <summary>
             Enum TG for "TG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TH">
             <summary>
             Enum TH for "TH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TJ">
             <summary>
             Enum TJ for "TJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TK">
             <summary>
             Enum TK for "TK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TL">
             <summary>
             Enum TL for "TL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TM">
             <summary>
             Enum TM for "TM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TN">
             <summary>
             Enum TN for "TN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TO">
             <summary>
             Enum TO for "TO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TR">
             <summary>
             Enum TR for "TR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TT">
             <summary>
             Enum TT for "TT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TV">
             <summary>
             Enum TV for "TV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TW">
             <summary>
             Enum TW for "TW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.TZ">
             <summary>
             Enum TZ for "TZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.UA">
             <summary>
             Enum UA for "UA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.UG">
             <summary>
             Enum UG for "UG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.UM">
             <summary>
             Enum UM for "UM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.US">
             <summary>
             Enum US for "US"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.UY">
             <summary>
             Enum UY for "UY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.UZ">
             <summary>
             Enum UZ for "UZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.VA">
             <summary>
             Enum VA for "VA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.VC">
             <summary>
             Enum VC for "VC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.VE">
             <summary>
             Enum VE for "VE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.VG">
             <summary>
             Enum VG for "VG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.VI">
             <summary>
             Enum VI for "VI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.VN">
             <summary>
             Enum VN for "VN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.VU">
             <summary>
             Enum VU for "VU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.WF">
             <summary>
             Enum WF for "WF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.WS">
             <summary>
             Enum WS for "WS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.YE">
             <summary>
             Enum YE for "YE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.YT">
             <summary>
             Enum YT for "YT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ZA">
             <summary>
             Enum ZA for "ZA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ZM">
             <summary>
             Enum ZM for "ZM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Country.ZW">
             <summary>
             Enum ZW for "ZW"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CreateCheckoutRequest">
             <summary>
             Defines the parameters that can be included in the body of a request to the [CreateCheckout](#endpoint-createcheckout) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCheckoutRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.#ctor(System.String,Square.Connect.Model.CreateOrderRequest,System.Nullable{System.Boolean},System.String,System.String,Square.Connect.Model.Address,System.String,System.Collections.Generic.List{Square.Connect.Model.ChargeRequestAdditionalRecipient})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCheckoutRequest" /> class.
             </summary>
             <param name="IdempotencyKey">A unique string that identifies this checkout among others you've created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you're unsure whether a particular checkout was created successfully, you can reattempt it with the same idempotency key and all the same other parameters without worrying about creating duplicates.  We recommend using a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  See [Idempotency keys](#idempotencykeys) for more information. (required).</param>
             <param name="Order">The order including line items to be checked out. (required).</param>
             <param name="AskForShippingAddress">If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: `false`..</param>
             <param name="MerchantSupportEmail">The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default: none; only exists if explicitly set..</param>
             <param name="PrePopulateBuyerEmail">If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set..</param>
             <param name="PrePopulateShippingAddress">If provided, the buyer's shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set..</param>
             <param name="RedirectUrl">The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  `http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx`  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.  Default: none; only exists if explicitly set..</param>
             <param name="AdditionalRecipients">The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the `amount_money` value in your additional_recipients must not be more than 90% of the `total_money` calculated by Square for your order. The `location_id` must be the valid location of the app owner merchant.  This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.  This field is currently not supported in sandbox..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.IdempotencyKey">
             <summary>
             A unique string that identifies this checkout among others you've created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you're unsure whether a particular checkout was created successfully, you can reattempt it with the same idempotency key and all the same other parameters without worrying about creating duplicates.  We recommend using a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  See [Idempotency keys](#idempotencykeys) for more information.
             </summary>
             <value>A unique string that identifies this checkout among others you've created. It can be any valid string but must be unique for every order sent to Square Checkout for a given location ID.  The idempotency key is used to avoid processing the same order more than once. If you're unsure whether a particular checkout was created successfully, you can reattempt it with the same idempotency key and all the same other parameters without worrying about creating duplicates.  We recommend using a random number/string generator native to the language you are working in to generate strings for your idempotency keys.  See [Idempotency keys](#idempotencykeys) for more information.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.Order">
             <summary>
             The order including line items to be checked out.
             </summary>
             <value>The order including line items to be checked out.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.AskForShippingAddress">
             <summary>
             If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: `false`.
             </summary>
             <value>If `true`, Square Checkout will collect shipping information on your behalf and store that information with the transaction information in your Square Dashboard.  Default: `false`.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.MerchantSupportEmail">
             <summary>
             The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default: none; only exists if explicitly set.
             </summary>
             <value>The email address to display on the Square Checkout confirmation page and confirmation email that the buyer can use to contact the merchant.  If this value is not set, the confirmation page and email will display the primary email address associated with the merchant's Square account.  Default: none; only exists if explicitly set.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.PrePopulateBuyerEmail">
             <summary>
             If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.
             </summary>
             <value>If provided, the buyer's email is pre-populated on the checkout page as an editable text field.  Default: none; only exists if explicitly set.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.PrePopulateShippingAddress">
             <summary>
             If provided, the buyer's shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set.
             </summary>
             <value>If provided, the buyer's shipping info is pre-populated on the checkout page as editable text fields.  Default: none; only exists if explicitly set.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.RedirectUrl">
             <summary>
             The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  `http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx`  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.  Default: none; only exists if explicitly set.
             </summary>
             <value>The URL to redirect to after checkout is completed with `checkoutId`, Square's `orderId`, `transactionId`, and `referenceId` appended as URL parameters. For example, if the provided redirect_url is `http://www.example.com/order-complete`, a successful transaction redirects the customer to:  `http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx`  If you do not provide a redirect URL, Square Checkout will display an order confirmation page on your behalf; however Square strongly recommends that you provide a redirect URL so you can verify the transaction results and finalize the order through your existing/normal confirmation workflow.  Default: none; only exists if explicitly set.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutRequest.AdditionalRecipients">
             <summary>
             The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the `amount_money` value in your additional_recipients must not be more than 90% of the `total_money` calculated by Square for your order. The `location_id` must be the valid location of the app owner merchant.  This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.  This field is currently not supported in sandbox.
             </summary>
             <value>The basic primitive of multi-party transaction. The value is optional. The transaction facilitated by you can be split from here.  If you provide this value, the `amount_money` value in your additional_recipients must not be more than 90% of the `total_money` calculated by Square for your order. The `location_id` must be the valid location of the app owner merchant.  This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.  This field is currently not supported in sandbox.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.Equals(Square.Connect.Model.CreateCheckoutRequest)">
             <summary>
             Returns true if CreateCheckoutRequest instances are equal
             </summary>
             <param name="other">Instance of CreateCheckoutRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateCheckoutResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [CreateCheckout](#endpoint-createcheckout) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.#ctor(Square.Connect.Model.Checkout,System.Collections.Generic.List{Square.Connect.Model.Error})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCheckoutResponse" /> class.
             </summary>
             <param name="Checkout">The newly created checkout. If the same request was made with the same idempotency_key, this will be the checkout created with the idempotency_key..</param>
             <param name="Errors">Any errors that occurred during the request..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutResponse.Checkout">
             <summary>
             The newly created checkout. If the same request was made with the same idempotency_key, this will be the checkout created with the idempotency_key.
             </summary>
             <value>The newly created checkout. If the same request was made with the same idempotency_key, this will be the checkout created with the idempotency_key.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCheckoutResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.Equals(Square.Connect.Model.CreateCheckoutResponse)">
             <summary>
             Returns true if CreateCheckoutResponse instances are equal
             </summary>
             <param name="other">Instance of CreateCheckoutResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCheckoutResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateCustomerCardRequest">
             <summary>
             Defines the fields that are included in the request body of a request to the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerCardRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.#ctor(System.String,Square.Connect.Model.Address,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerCardRequest" /> class.
             </summary>
             <param name="CardNonce">A card nonce representing the credit card to link to the customer.  Card nonces are generated by the `SqPaymentForm` that buyers enter their card information into. See [Embedding the payment form](/articles/adding-payment-form/) for more information.  __Note:__ Card nonces generated by digital wallets (e.g., Apple Pay) cannot be used to create a customer card. (required).</param>
             <param name="BillingAddress">Address information for the card on file. Only the `postal_code` field is required for payments in the US and Canada..</param>
             <param name="CardholderName">The cardholder's name..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardRequest.CardNonce">
             <summary>
             A card nonce representing the credit card to link to the customer.  Card nonces are generated by the `SqPaymentForm` that buyers enter their card information into. See [Embedding the payment form](/articles/adding-payment-form/) for more information.  __Note:__ Card nonces generated by digital wallets (e.g., Apple Pay) cannot be used to create a customer card.
             </summary>
             <value>A card nonce representing the credit card to link to the customer.  Card nonces are generated by the `SqPaymentForm` that buyers enter their card information into. See [Embedding the payment form](/articles/adding-payment-form/) for more information.  __Note:__ Card nonces generated by digital wallets (e.g., Apple Pay) cannot be used to create a customer card.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardRequest.BillingAddress">
             <summary>
             Address information for the card on file. Only the `postal_code` field is required for payments in the US and Canada.
             </summary>
             <value>Address information for the card on file. Only the `postal_code` field is required for payments in the US and Canada.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardRequest.CardholderName">
             <summary>
             The cardholder's name.
             </summary>
             <value>The cardholder's name.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.Equals(Square.Connect.Model.CreateCustomerCardRequest)">
             <summary>
             Returns true if CreateCustomerCardRequest instances are equal
             </summary>
             <param name="other">Instance of CreateCustomerCardRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateCustomerCardResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.  One of `errors` or `card` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Card)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerCardResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Card">The created card on file..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerCardResponse.Card">
             <summary>
             The created card on file.
             </summary>
             <value>The created card on file.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.Equals(Square.Connect.Model.CreateCustomerCardResponse)">
             <summary>
             Returns true if CreateCustomerCardResponse instances are equal
             </summary>
             <param name="other">Instance of CreateCustomerCardResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerCardResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateCustomerRequest">
             <summary>
             Defines the body parameters that can be provided in a request to the [CreateCustomer](#endpoint-createcustomer) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.#ctor(System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Address,System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerRequest" /> class.
             </summary>
             <param name="GivenName">The customer's given (i.e., first) name..</param>
             <param name="FamilyName">The customer's family (i.e., last) name..</param>
             <param name="CompanyName">The name of the customer's company..</param>
             <param name="Nickname">A nickname for the customer..</param>
             <param name="EmailAddress">The customer's email address..</param>
             <param name="Address">The customer's physical address..</param>
             <param name="PhoneNumber">The customer's phone number..</param>
             <param name="ReferenceId">An optional second ID you can set to associate the customer with an entity in another system..</param>
             <param name="Note">An optional note to associate with the customer..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.GivenName">
             <summary>
             The customer's given (i.e., first) name.
             </summary>
             <value>The customer's given (i.e., first) name.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.FamilyName">
             <summary>
             The customer's family (i.e., last) name.
             </summary>
             <value>The customer's family (i.e., last) name.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.CompanyName">
             <summary>
             The name of the customer's company.
             </summary>
             <value>The name of the customer's company.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.Nickname">
             <summary>
             A nickname for the customer.
             </summary>
             <value>A nickname for the customer.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.EmailAddress">
             <summary>
             The customer's email address.
             </summary>
             <value>The customer's email address.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.Address">
             <summary>
             The customer's physical address.
             </summary>
             <value>The customer's physical address.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.PhoneNumber">
             <summary>
             The customer's phone number.
             </summary>
             <value>The customer's phone number.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.ReferenceId">
             <summary>
             An optional second ID you can set to associate the customer with an entity in another system.
             </summary>
             <value>An optional second ID you can set to associate the customer with an entity in another system.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerRequest.Note">
             <summary>
             An optional note to associate with the customer.
             </summary>
             <value>An optional note to associate with the customer.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.Equals(Square.Connect.Model.CreateCustomerRequest)">
             <summary>
             Returns true if CreateCustomerRequest instances are equal
             </summary>
             <param name="other">Instance of CreateCustomerRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateCustomerResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [CreateCustomer](#endpoint-createcustomer) endpoint.  One of `errors` or `customer` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Customer)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateCustomerResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Customer">The created customer..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateCustomerResponse.Customer">
             <summary>
             The created customer.
             </summary>
             <value>The created customer.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.Equals(Square.Connect.Model.CreateCustomerResponse)">
             <summary>
             Returns true if CreateCustomerResponse instances are equal
             </summary>
             <param name="other">Instance of CreateCustomerResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateCustomerResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateOrderRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.#ctor(System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.CreateOrderRequestLineItem},System.Collections.Generic.List{Square.Connect.Model.CreateOrderRequestTax},System.Collections.Generic.List{Square.Connect.Model.CreateOrderRequestDiscount})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequest" /> class.
             </summary>
             <param name="IdempotencyKey">A value you specify that uniquely identifies this order among orders you've created.  If you're unsure whether a particular order was created successfully, you can reattempt it with the same idempotency key without worrying about creating duplicate orders.  See [Idempotency keys](#idempotencykeys) for more information..</param>
             <param name="ReferenceId">An optional ID you can associate with the order for your own purposes (such as to associate the order with an entity ID in your own database).  This value cannot exceed 40 characters..</param>
             <param name="LineItems">The line items to associate with this order.  Each line item represents a different product to include in a purchase. (required).</param>
             <param name="Taxes">The taxes to include on the order..</param>
             <param name="Discounts">The discounts to include on the order..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequest.IdempotencyKey">
             <summary>
             A value you specify that uniquely identifies this order among orders you've created.  If you're unsure whether a particular order was created successfully, you can reattempt it with the same idempotency key without worrying about creating duplicate orders.  See [Idempotency keys](#idempotencykeys) for more information.
             </summary>
             <value>A value you specify that uniquely identifies this order among orders you've created.  If you're unsure whether a particular order was created successfully, you can reattempt it with the same idempotency key without worrying about creating duplicate orders.  See [Idempotency keys](#idempotencykeys) for more information.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequest.ReferenceId">
             <summary>
             An optional ID you can associate with the order for your own purposes (such as to associate the order with an entity ID in your own database).  This value cannot exceed 40 characters.
             </summary>
             <value>An optional ID you can associate with the order for your own purposes (such as to associate the order with an entity ID in your own database).  This value cannot exceed 40 characters.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequest.LineItems">
             <summary>
             The line items to associate with this order.  Each line item represents a different product to include in a purchase.
             </summary>
             <value>The line items to associate with this order.  Each line item represents a different product to include in a purchase.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequest.Taxes">
             <summary>
             The taxes to include on the order.
             </summary>
             <value>The taxes to include on the order.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequest.Discounts">
             <summary>
             The discounts to include on the order.
             </summary>
             <value>The discounts to include on the order.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.Equals(Square.Connect.Model.CreateOrderRequest)">
             <summary>
             Returns true if CreateOrderRequest instances are equal
             </summary>
             <param name="other">Instance of CreateOrderRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateOrderRequestDiscount">
             <summary>
             Represents a discount that can apply to either a single line item or an entire order.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestDiscount.#ctor(System.String,System.String,System.String,Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequestDiscount" /> class.
             </summary>
             <param name="CatalogObjectId">Only used for catalog taxes. The catalog object ID from exsiting [CatalogDiscount](#type-catalogdiscount).  Do not provide a value for this field if you provide values in other fields for an ad hoc discount..</param>
             <param name="Name">Only used for ad hoc discounts. The discount's name..</param>
             <param name="Percentage">Only used for ad hoc discounts. The percentage of the discount, as a string representation of a decimal number.  A value of `7.25` corresponds to a percentage of 7.25%. This value range between 0.0 up to 100.0.</param>
             <param name="AmountMoney">Only used for ad hoc discounts. The monetary amount of the discount..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestDiscount.CatalogObjectId">
             <summary>
             Only used for catalog taxes. The catalog object ID from exsiting [CatalogDiscount](#type-catalogdiscount).  Do not provide a value for this field if you provide values in other fields for an ad hoc discount.
             </summary>
             <value>Only used for catalog taxes. The catalog object ID from exsiting [CatalogDiscount](#type-catalogdiscount).  Do not provide a value for this field if you provide values in other fields for an ad hoc discount.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestDiscount.Name">
             <summary>
             Only used for ad hoc discounts. The discount's name.
             </summary>
             <value>Only used for ad hoc discounts. The discount's name.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestDiscount.Percentage">
             <summary>
             Only used for ad hoc discounts. The percentage of the discount, as a string representation of a decimal number.  A value of `7.25` corresponds to a percentage of 7.25%. This value range between 0.0 up to 100.0
             </summary>
             <value>Only used for ad hoc discounts. The percentage of the discount, as a string representation of a decimal number.  A value of `7.25` corresponds to a percentage of 7.25%. This value range between 0.0 up to 100.0</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestDiscount.AmountMoney">
             <summary>
             Only used for ad hoc discounts. The monetary amount of the discount.
             </summary>
             <value>Only used for ad hoc discounts. The monetary amount of the discount.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestDiscount.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestDiscount.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestDiscount.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestDiscount.Equals(Square.Connect.Model.CreateOrderRequestDiscount)">
             <summary>
             Returns true if CreateOrderRequestDiscount instances are equal
             </summary>
             <param name="other">Instance of CreateOrderRequestDiscount to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestDiscount.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateOrderRequestLineItem">
             <summary>
             Represents a line item to include in an order. Each line item describes a different product to purchase, with its own quantity and price details.  Line items can either reference objects from the merchant's catalog, or can alternatively specify a name and price instead.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequestLineItem" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.#ctor(System.String,System.String,Square.Connect.Model.Money,System.String,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.CreateOrderRequestModifier},System.Collections.Generic.List{Square.Connect.Model.CreateOrderRequestTax},System.Collections.Generic.List{Square.Connect.Model.CreateOrderRequestDiscount})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequestLineItem" /> class.
             </summary>
             <param name="Name">Only used for ad hoc line items. The name of the line item. This value cannot exceed 500 characters.  Do not provide a value for this field if you provide values in catalog_object_id..</param>
             <param name="Quantity">The quantity to purchase, as a string representation of a number.  This string must have a positive integer value. (required).</param>
             <param name="BasePriceMoney">Only used for ad hoc line items. The base price for a single unit of the line item's associated variation.  Do not provide a value for this field if you provide a value for the `catalog_object_id`..</param>
             <param name="VariationName">Only used for ad hoc line items. The variation name of the line item. This value cannot exceed 255 characters.  If this value is not set for an ad hoc line item, the default value of `Regular` is used.  Do not provide a value for this field if you provide a value for the `catalog_object_id`..</param>
             <param name="Note">The note of the line item. This value cannot exceed 50 characters..</param>
             <param name="CatalogObjectId">Only used for Catalog line items. The catalog object ID from existing [CatalogItemVariation](#type-catalogitemvariation).  Do not provide a value for this field if you provide a value for `name` and `base_price_money`..</param>
             <param name="Modifiers">Only used for Catalog line items. The modifiers to include on the line item..</param>
             <param name="Taxes">The taxes to include on the line item..</param>
             <param name="Discounts">The discounts to include on the line item..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.Name">
             <summary>
             Only used for ad hoc line items. The name of the line item. This value cannot exceed 500 characters.  Do not provide a value for this field if you provide values in catalog_object_id.
             </summary>
             <value>Only used for ad hoc line items. The name of the line item. This value cannot exceed 500 characters.  Do not provide a value for this field if you provide values in catalog_object_id.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.Quantity">
             <summary>
             The quantity to purchase, as a string representation of a number.  This string must have a positive integer value.
             </summary>
             <value>The quantity to purchase, as a string representation of a number.  This string must have a positive integer value.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.BasePriceMoney">
             <summary>
             Only used for ad hoc line items. The base price for a single unit of the line item's associated variation.  Do not provide a value for this field if you provide a value for the `catalog_object_id`.
             </summary>
             <value>Only used for ad hoc line items. The base price for a single unit of the line item's associated variation.  Do not provide a value for this field if you provide a value for the `catalog_object_id`.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.VariationName">
             <summary>
             Only used for ad hoc line items. The variation name of the line item. This value cannot exceed 255 characters.  If this value is not set for an ad hoc line item, the default value of `Regular` is used.  Do not provide a value for this field if you provide a value for the `catalog_object_id`.
             </summary>
             <value>Only used for ad hoc line items. The variation name of the line item. This value cannot exceed 255 characters.  If this value is not set for an ad hoc line item, the default value of `Regular` is used.  Do not provide a value for this field if you provide a value for the `catalog_object_id`.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.Note">
             <summary>
             The note of the line item. This value cannot exceed 50 characters.
             </summary>
             <value>The note of the line item. This value cannot exceed 50 characters.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.CatalogObjectId">
             <summary>
             Only used for Catalog line items. The catalog object ID from existing [CatalogItemVariation](#type-catalogitemvariation).  Do not provide a value for this field if you provide a value for `name` and `base_price_money`.
             </summary>
             <value>Only used for Catalog line items. The catalog object ID from existing [CatalogItemVariation](#type-catalogitemvariation).  Do not provide a value for this field if you provide a value for `name` and `base_price_money`.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.Modifiers">
             <summary>
             Only used for Catalog line items. The modifiers to include on the line item.
             </summary>
             <value>Only used for Catalog line items. The modifiers to include on the line item.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.Taxes">
             <summary>
             The taxes to include on the line item.
             </summary>
             <value>The taxes to include on the line item.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestLineItem.Discounts">
             <summary>
             The discounts to include on the line item.
             </summary>
             <value>The discounts to include on the line item.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.Equals(Square.Connect.Model.CreateOrderRequestLineItem)">
             <summary>
             Returns true if CreateOrderRequestLineItem instances are equal
             </summary>
             <param name="other">Instance of CreateOrderRequestLineItem to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestLineItem.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateOrderRequestModifier">
             <summary>
             Represents a modifier applied to a single line item.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestModifier.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequestModifier" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestModifier.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequestModifier" /> class.
             </summary>
             <param name="CatalogObjectId">The catalog object ID of a [CatalogModifier](#type-catalogmodifier). (required).</param>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestModifier.CatalogObjectId">
             <summary>
             The catalog object ID of a [CatalogModifier](#type-catalogmodifier).
             </summary>
             <value>The catalog object ID of a [CatalogModifier](#type-catalogmodifier).</value>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestModifier.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestModifier.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestModifier.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestModifier.Equals(Square.Connect.Model.CreateOrderRequestModifier)">
             <summary>
             Returns true if CreateOrderRequestModifier instances are equal
             </summary>
             <param name="other">Instance of CreateOrderRequestModifier to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestModifier.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateOrderRequestTax">
             <summary>
             Represents a tax that can apply to either a single line item or an entire order.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.CreateOrderRequestTax.TypeEnum">
             <summary>
             Only used for ad hoc taxes. Indicates the calculation method used to apply the line item tax.  Default: `ADDITIVE`; See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values.
             </summary>
             <value>Only used for ad hoc taxes. Indicates the calculation method used to apply the line item tax.  Default: `ADDITIVE`; See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.CreateOrderRequestTax.TypeEnum.UNKNOWNTAX">
             <summary>
             Enum UNKNOWNTAX for "UNKNOWN_TAX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CreateOrderRequestTax.TypeEnum.ADDITIVE">
             <summary>
             Enum ADDITIVE for "ADDITIVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.CreateOrderRequestTax.TypeEnum.INCLUSIVE">
             <summary>
             Enum INCLUSIVE for "INCLUSIVE"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestTax.Type">
             <summary>
             Only used for ad hoc taxes. Indicates the calculation method used to apply the line item tax.  Default: `ADDITIVE`; See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values.
             </summary>
             <value>Only used for ad hoc taxes. Indicates the calculation method used to apply the line item tax.  Default: `ADDITIVE`; See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestTax.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.CreateOrderRequestTax.TypeEnum},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderRequestTax" /> class.
             </summary>
             <param name="CatalogObjectId">Only used for catalog taxes. The catalog object ID of an existing [CatalogTax](#type-catalogtax).  Do not provide a value for this field if you provide values in other fields for an ad hoc tax..</param>
             <param name="Name">Only used for ad hoc taxes. The tax's name.  Do not provide a value for this field if you set catalog_object_id..</param>
             <param name="Type">Only used for ad hoc taxes. Indicates the calculation method used to apply the line item tax.  Default: `ADDITIVE`; See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values..</param>
             <param name="Percentage">Only used for ad hoc taxes. The percentage of the tax, as a string representation of a decimal number.  A value of `7.25` corresponds to a percentage of 7.25%. This value range between 0.0 up to 100.0.</param>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestTax.CatalogObjectId">
             <summary>
             Only used for catalog taxes. The catalog object ID of an existing [CatalogTax](#type-catalogtax).  Do not provide a value for this field if you provide values in other fields for an ad hoc tax.
             </summary>
             <value>Only used for catalog taxes. The catalog object ID of an existing [CatalogTax](#type-catalogtax).  Do not provide a value for this field if you provide values in other fields for an ad hoc tax.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestTax.Name">
             <summary>
             Only used for ad hoc taxes. The tax's name.  Do not provide a value for this field if you set catalog_object_id.
             </summary>
             <value>Only used for ad hoc taxes. The tax's name.  Do not provide a value for this field if you set catalog_object_id.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderRequestTax.Percentage">
             <summary>
             Only used for ad hoc taxes. The percentage of the tax, as a string representation of a decimal number.  A value of `7.25` corresponds to a percentage of 7.25%. This value range between 0.0 up to 100.0
             </summary>
             <value>Only used for ad hoc taxes. The percentage of the tax, as a string representation of a decimal number.  A value of `7.25` corresponds to a percentage of 7.25%. This value range between 0.0 up to 100.0</value>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestTax.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestTax.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestTax.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestTax.Equals(Square.Connect.Model.CreateOrderRequestTax)">
             <summary>
             Returns true if CreateOrderRequestTax instances are equal
             </summary>
             <param name="other">Instance of CreateOrderRequestTax to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderRequestTax.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateOrderResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [CreateOrder](#endpoint-createorder) endpoint.  One of `errors` or `order` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderResponse.#ctor(Square.Connect.Model.Order,System.Collections.Generic.List{Square.Connect.Model.Error})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateOrderResponse" /> class.
             </summary>
             <param name="Order">The newly created order..</param>
             <param name="Errors">Any errors that occurred during the request..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderResponse.Order">
             <summary>
             The newly created order.
             </summary>
             <value>The newly created order.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateOrderResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderResponse.Equals(Square.Connect.Model.CreateOrderResponse)">
             <summary>
             Returns true if CreateOrderResponse instances are equal
             </summary>
             <param name="other">Instance of CreateOrderResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateOrderResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateRefundRequest">
             <summary>
             Defines the body parameters that can be included in a request to the [CreateRefund](#endpoint-createrefund) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateRefundRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.#ctor(System.String,System.String,System.String,Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateRefundRequest" /> class.
             </summary>
             <param name="IdempotencyKey">A value you specify that uniquely identifies this refund among refunds you've created for the tender.  If you're unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund.  See [Idempotency keys](#idempotencykeys) for more information. (required).</param>
             <param name="TenderId">The ID of the tender to refund.  A [`Transaction`](#type-transaction) has one or more `tenders` (i.e., methods of payment) associated with it, and you refund each tender separately with the Connect API. (required).</param>
             <param name="Reason">A description of the reason for the refund.  Default value: `Refund via API`.</param>
             <param name="AmountMoney">The amount of money to refund.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  This amount cannot exceed the amount that was originally charged to the tender that corresponds to `tender_id`. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundRequest.IdempotencyKey">
             <summary>
             A value you specify that uniquely identifies this refund among refunds you've created for the tender.  If you're unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund.  See [Idempotency keys](#idempotencykeys) for more information.
             </summary>
             <value>A value you specify that uniquely identifies this refund among refunds you've created for the tender.  If you're unsure whether a particular refund succeeded, you can reattempt it with the same idempotency key without worrying about duplicating the refund.  See [Idempotency keys](#idempotencykeys) for more information.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundRequest.TenderId">
             <summary>
             The ID of the tender to refund.  A [`Transaction`](#type-transaction) has one or more `tenders` (i.e., methods of payment) associated with it, and you refund each tender separately with the Connect API.
             </summary>
             <value>The ID of the tender to refund.  A [`Transaction`](#type-transaction) has one or more `tenders` (i.e., methods of payment) associated with it, and you refund each tender separately with the Connect API.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundRequest.Reason">
             <summary>
             A description of the reason for the refund.  Default value: `Refund via API`
             </summary>
             <value>A description of the reason for the refund.  Default value: `Refund via API`</value>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundRequest.AmountMoney">
             <summary>
             The amount of money to refund.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  This amount cannot exceed the amount that was originally charged to the tender that corresponds to `tender_id`.
             </summary>
             <value>The amount of money to refund.  Note that you specify the amount in the __smallest denomination of the applicable currency__. For example, US dollar amounts are specified in cents. See [Working with monetary amounts](#workingwithmonetaryamounts) for details.  This amount cannot exceed the amount that was originally charged to the tender that corresponds to `tender_id`.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.Equals(Square.Connect.Model.CreateRefundRequest)">
             <summary>
             Returns true if CreateRefundRequest instances are equal
             </summary>
             <param name="other">Instance of CreateRefundRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CreateRefundResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [CreateRefund](#endpoint-createrefund) endpoint.  One of `errors` or `refund` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Refund)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CreateRefundResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Refund">The created refund..</param>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.CreateRefundResponse.Refund">
             <summary>
             The created refund.
             </summary>
             <value>The created refund.</value>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.Equals(Square.Connect.Model.CreateRefundResponse)">
             <summary>
             Returns true if CreateRefundResponse instances are equal
             </summary>
             <param name="other">Instance of CreateRefundResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CreateRefundResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Currency">
             <summary>
             Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).
             </summary>
             <value>Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).</value>
            </member>
        <member name="F:Square.Connect.Model.Currency.UNKNOWNCURRENCY">
             <summary>
             Enum UNKNOWNCURRENCY for "UNKNOWN_CURRENCY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.AED">
             <summary>
             Enum AED for "AED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.AFN">
             <summary>
             Enum AFN for "AFN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ALL">
             <summary>
             Enum ALL for "ALL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.AMD">
             <summary>
             Enum AMD for "AMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ANG">
             <summary>
             Enum ANG for "ANG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.AOA">
             <summary>
             Enum AOA for "AOA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ARS">
             <summary>
             Enum ARS for "ARS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.AUD">
             <summary>
             Enum AUD for "AUD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.AWG">
             <summary>
             Enum AWG for "AWG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.AZN">
             <summary>
             Enum AZN for "AZN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BAM">
             <summary>
             Enum BAM for "BAM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BBD">
             <summary>
             Enum BBD for "BBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BDT">
             <summary>
             Enum BDT for "BDT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BGN">
             <summary>
             Enum BGN for "BGN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BHD">
             <summary>
             Enum BHD for "BHD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BIF">
             <summary>
             Enum BIF for "BIF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BMD">
             <summary>
             Enum BMD for "BMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BND">
             <summary>
             Enum BND for "BND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BOB">
             <summary>
             Enum BOB for "BOB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BOV">
             <summary>
             Enum BOV for "BOV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BRL">
             <summary>
             Enum BRL for "BRL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BSD">
             <summary>
             Enum BSD for "BSD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BTN">
             <summary>
             Enum BTN for "BTN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BWP">
             <summary>
             Enum BWP for "BWP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BYR">
             <summary>
             Enum BYR for "BYR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BZD">
             <summary>
             Enum BZD for "BZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CAD">
             <summary>
             Enum CAD for "CAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CDF">
             <summary>
             Enum CDF for "CDF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CHE">
             <summary>
             Enum CHE for "CHE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CHF">
             <summary>
             Enum CHF for "CHF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CHW">
             <summary>
             Enum CHW for "CHW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CLF">
             <summary>
             Enum CLF for "CLF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CLP">
             <summary>
             Enum CLP for "CLP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CNY">
             <summary>
             Enum CNY for "CNY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.COP">
             <summary>
             Enum COP for "COP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.COU">
             <summary>
             Enum COU for "COU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CRC">
             <summary>
             Enum CRC for "CRC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CUC">
             <summary>
             Enum CUC for "CUC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CUP">
             <summary>
             Enum CUP for "CUP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CVE">
             <summary>
             Enum CVE for "CVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.CZK">
             <summary>
             Enum CZK for "CZK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.DJF">
             <summary>
             Enum DJF for "DJF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.DKK">
             <summary>
             Enum DKK for "DKK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.DOP">
             <summary>
             Enum DOP for "DOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.DZD">
             <summary>
             Enum DZD for "DZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.EGP">
             <summary>
             Enum EGP for "EGP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ERN">
             <summary>
             Enum ERN for "ERN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ETB">
             <summary>
             Enum ETB for "ETB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.EUR">
             <summary>
             Enum EUR for "EUR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.FJD">
             <summary>
             Enum FJD for "FJD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.FKP">
             <summary>
             Enum FKP for "FKP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.GBP">
             <summary>
             Enum GBP for "GBP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.GEL">
             <summary>
             Enum GEL for "GEL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.GHS">
             <summary>
             Enum GHS for "GHS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.GIP">
             <summary>
             Enum GIP for "GIP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.GMD">
             <summary>
             Enum GMD for "GMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.GNF">
             <summary>
             Enum GNF for "GNF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.GTQ">
             <summary>
             Enum GTQ for "GTQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.GYD">
             <summary>
             Enum GYD for "GYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.HKD">
             <summary>
             Enum HKD for "HKD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.HNL">
             <summary>
             Enum HNL for "HNL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.HRK">
             <summary>
             Enum HRK for "HRK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.HTG">
             <summary>
             Enum HTG for "HTG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.HUF">
             <summary>
             Enum HUF for "HUF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.IDR">
             <summary>
             Enum IDR for "IDR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ILS">
             <summary>
             Enum ILS for "ILS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.INR">
             <summary>
             Enum INR for "INR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.IQD">
             <summary>
             Enum IQD for "IQD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.IRR">
             <summary>
             Enum IRR for "IRR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ISK">
             <summary>
             Enum ISK for "ISK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.JMD">
             <summary>
             Enum JMD for "JMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.JOD">
             <summary>
             Enum JOD for "JOD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.JPY">
             <summary>
             Enum JPY for "JPY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KES">
             <summary>
             Enum KES for "KES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KGS">
             <summary>
             Enum KGS for "KGS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KHR">
             <summary>
             Enum KHR for "KHR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KMF">
             <summary>
             Enum KMF for "KMF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KPW">
             <summary>
             Enum KPW for "KPW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KRW">
             <summary>
             Enum KRW for "KRW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KWD">
             <summary>
             Enum KWD for "KWD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KYD">
             <summary>
             Enum KYD for "KYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.KZT">
             <summary>
             Enum KZT for "KZT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.LAK">
             <summary>
             Enum LAK for "LAK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.LBP">
             <summary>
             Enum LBP for "LBP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.LKR">
             <summary>
             Enum LKR for "LKR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.LRD">
             <summary>
             Enum LRD for "LRD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.LSL">
             <summary>
             Enum LSL for "LSL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.LTL">
             <summary>
             Enum LTL for "LTL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.LVL">
             <summary>
             Enum LVL for "LVL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.LYD">
             <summary>
             Enum LYD for "LYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MAD">
             <summary>
             Enum MAD for "MAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MDL">
             <summary>
             Enum MDL for "MDL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MGA">
             <summary>
             Enum MGA for "MGA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MKD">
             <summary>
             Enum MKD for "MKD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MMK">
             <summary>
             Enum MMK for "MMK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MNT">
             <summary>
             Enum MNT for "MNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MOP">
             <summary>
             Enum MOP for "MOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MRO">
             <summary>
             Enum MRO for "MRO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MUR">
             <summary>
             Enum MUR for "MUR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MVR">
             <summary>
             Enum MVR for "MVR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MWK">
             <summary>
             Enum MWK for "MWK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MXN">
             <summary>
             Enum MXN for "MXN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MXV">
             <summary>
             Enum MXV for "MXV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MYR">
             <summary>
             Enum MYR for "MYR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.MZN">
             <summary>
             Enum MZN for "MZN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.NAD">
             <summary>
             Enum NAD for "NAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.NGN">
             <summary>
             Enum NGN for "NGN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.NIO">
             <summary>
             Enum NIO for "NIO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.NOK">
             <summary>
             Enum NOK for "NOK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.NPR">
             <summary>
             Enum NPR for "NPR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.NZD">
             <summary>
             Enum NZD for "NZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.OMR">
             <summary>
             Enum OMR for "OMR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.PAB">
             <summary>
             Enum PAB for "PAB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.PEN">
             <summary>
             Enum PEN for "PEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.PGK">
             <summary>
             Enum PGK for "PGK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.PHP">
             <summary>
             Enum PHP for "PHP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.PKR">
             <summary>
             Enum PKR for "PKR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.PLN">
             <summary>
             Enum PLN for "PLN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.PYG">
             <summary>
             Enum PYG for "PYG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.QAR">
             <summary>
             Enum QAR for "QAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.RON">
             <summary>
             Enum RON for "RON"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.RSD">
             <summary>
             Enum RSD for "RSD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.RUB">
             <summary>
             Enum RUB for "RUB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.RWF">
             <summary>
             Enum RWF for "RWF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SAR">
             <summary>
             Enum SAR for "SAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SBD">
             <summary>
             Enum SBD for "SBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SCR">
             <summary>
             Enum SCR for "SCR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SDG">
             <summary>
             Enum SDG for "SDG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SEK">
             <summary>
             Enum SEK for "SEK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SGD">
             <summary>
             Enum SGD for "SGD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SHP">
             <summary>
             Enum SHP for "SHP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SLL">
             <summary>
             Enum SLL for "SLL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SOS">
             <summary>
             Enum SOS for "SOS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SRD">
             <summary>
             Enum SRD for "SRD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SSP">
             <summary>
             Enum SSP for "SSP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.STD">
             <summary>
             Enum STD for "STD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SVC">
             <summary>
             Enum SVC for "SVC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SYP">
             <summary>
             Enum SYP for "SYP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.SZL">
             <summary>
             Enum SZL for "SZL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.THB">
             <summary>
             Enum THB for "THB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.TJS">
             <summary>
             Enum TJS for "TJS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.TMT">
             <summary>
             Enum TMT for "TMT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.TND">
             <summary>
             Enum TND for "TND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.TOP">
             <summary>
             Enum TOP for "TOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.TRY">
             <summary>
             Enum TRY for "TRY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.TTD">
             <summary>
             Enum TTD for "TTD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.TWD">
             <summary>
             Enum TWD for "TWD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.TZS">
             <summary>
             Enum TZS for "TZS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.UAH">
             <summary>
             Enum UAH for "UAH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.UGX">
             <summary>
             Enum UGX for "UGX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.USD">
             <summary>
             Enum USD for "USD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.USN">
             <summary>
             Enum USN for "USN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.USS">
             <summary>
             Enum USS for "USS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.UYI">
             <summary>
             Enum UYI for "UYI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.UYU">
             <summary>
             Enum UYU for "UYU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.UZS">
             <summary>
             Enum UZS for "UZS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.VEF">
             <summary>
             Enum VEF for "VEF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.VND">
             <summary>
             Enum VND for "VND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.VUV">
             <summary>
             Enum VUV for "VUV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.WST">
             <summary>
             Enum WST for "WST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XAF">
             <summary>
             Enum XAF for "XAF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XAG">
             <summary>
             Enum XAG for "XAG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XAU">
             <summary>
             Enum XAU for "XAU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XBA">
             <summary>
             Enum XBA for "XBA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XBB">
             <summary>
             Enum XBB for "XBB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XBC">
             <summary>
             Enum XBC for "XBC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XBD">
             <summary>
             Enum XBD for "XBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XCD">
             <summary>
             Enum XCD for "XCD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XDR">
             <summary>
             Enum XDR for "XDR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XOF">
             <summary>
             Enum XOF for "XOF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XPD">
             <summary>
             Enum XPD for "XPD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XPF">
             <summary>
             Enum XPF for "XPF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XPT">
             <summary>
             Enum XPT for "XPT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XTS">
             <summary>
             Enum XTS for "XTS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.XXX">
             <summary>
             Enum XXX for "XXX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.YER">
             <summary>
             Enum YER for "YER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ZAR">
             <summary>
             Enum ZAR for "ZAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ZMK">
             <summary>
             Enum ZMK for "ZMK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.ZMW">
             <summary>
             Enum ZMW for "ZMW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Currency.BTC">
             <summary>
             Enum BTC for "BTC"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Customer">
             <summary>
             Represents one of a business's customers, which can have one or more cards on file associated with it.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Customer.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Customer" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Customer.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.Card},System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Address,System.String,System.String,System.String,Square.Connect.Model.CustomerPreferences,System.Collections.Generic.List{Square.Connect.Model.CustomerGroupInfo})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Customer" /> class.
             </summary>
             <param name="Id">The customer's unique ID. (required).</param>
             <param name="CreatedAt">The time when the customer was created, in RFC 3339 format. (required).</param>
             <param name="UpdatedAt">The time when the customer was last updated, in RFC 3339 format. (required).</param>
             <param name="Cards">The non-confidential details of the customer's cards on file..</param>
             <param name="GivenName">The customer's given (i.e., first) name..</param>
             <param name="FamilyName">The customer's family (i.e., last) name..</param>
             <param name="Nickname">The customer's nickname..</param>
             <param name="CompanyName">The name of the customer's company..</param>
             <param name="EmailAddress">The customer's email address..</param>
             <param name="Address">The customer's physical address..</param>
             <param name="PhoneNumber">The customer's phone number..</param>
             <param name="ReferenceId">A second ID you can set to associate the customer with an entity in another system..</param>
             <param name="Note">A note to associate with the customer..</param>
             <param name="Preferences">The customer's preferences..</param>
             <param name="Groups">The groups the customer belongs to..</param>
            </member>
        <member name="P:Square.Connect.Model.Customer.Id">
             <summary>
             The customer's unique ID.
             </summary>
             <value>The customer's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.CreatedAt">
             <summary>
             The time when the customer was created, in RFC 3339 format.
             </summary>
             <value>The time when the customer was created, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.UpdatedAt">
             <summary>
             The time when the customer was last updated, in RFC 3339 format.
             </summary>
             <value>The time when the customer was last updated, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.Cards">
             <summary>
             The non-confidential details of the customer's cards on file.
             </summary>
             <value>The non-confidential details of the customer's cards on file.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.GivenName">
             <summary>
             The customer's given (i.e., first) name.
             </summary>
             <value>The customer's given (i.e., first) name.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.FamilyName">
             <summary>
             The customer's family (i.e., last) name.
             </summary>
             <value>The customer's family (i.e., last) name.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.Nickname">
             <summary>
             The customer's nickname.
             </summary>
             <value>The customer's nickname.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.CompanyName">
             <summary>
             The name of the customer's company.
             </summary>
             <value>The name of the customer's company.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.EmailAddress">
             <summary>
             The customer's email address.
             </summary>
             <value>The customer's email address.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.Address">
             <summary>
             The customer's physical address.
             </summary>
             <value>The customer's physical address.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.PhoneNumber">
             <summary>
             The customer's phone number.
             </summary>
             <value>The customer's phone number.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.ReferenceId">
             <summary>
             A second ID you can set to associate the customer with an entity in another system.
             </summary>
             <value>A second ID you can set to associate the customer with an entity in another system.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.Note">
             <summary>
             A note to associate with the customer.
             </summary>
             <value>A note to associate with the customer.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.Preferences">
             <summary>
             The customer's preferences.
             </summary>
             <value>The customer's preferences.</value>
            </member>
        <member name="P:Square.Connect.Model.Customer.Groups">
             <summary>
             The groups the customer belongs to.
             </summary>
             <value>The groups the customer belongs to.</value>
            </member>
        <member name="M:Square.Connect.Model.Customer.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Customer.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Customer.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Customer.Equals(Square.Connect.Model.Customer)">
             <summary>
             Returns true if Customer instances are equal
             </summary>
             <param name="other">Instance of Customer to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Customer.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CustomerGroupInfo">
             <summary>
             Contains some brief information about a customer group with its identifier included.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CustomerGroupInfo" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CustomerGroupInfo" /> class.
             </summary>
             <param name="Id">The ID of the customer group. (required).</param>
             <param name="Name">The name of the customer group. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.CustomerGroupInfo.Id">
             <summary>
             The ID of the customer group.
             </summary>
             <value>The ID of the customer group.</value>
            </member>
        <member name="P:Square.Connect.Model.CustomerGroupInfo.Name">
             <summary>
             The name of the customer group.
             </summary>
             <value>The name of the customer group.</value>
            </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.Equals(Square.Connect.Model.CustomerGroupInfo)">
             <summary>
             Returns true if CustomerGroupInfo instances are equal
             </summary>
             <param name="other">Instance of CustomerGroupInfo to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CustomerGroupInfo.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.CustomerPreferences">
             <summary>
             Represents a particular customer's preferences.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.#ctor(System.Nullable{System.Boolean})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.CustomerPreferences" /> class.
             </summary>
             <param name="EmailUnsubscribed">The customer has unsubscribed from receiving marketing campaign emails..</param>
            </member>
        <member name="P:Square.Connect.Model.CustomerPreferences.EmailUnsubscribed">
             <summary>
             The customer has unsubscribed from receiving marketing campaign emails.
             </summary>
             <value>The customer has unsubscribed from receiving marketing campaign emails.</value>
            </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.Equals(Square.Connect.Model.CustomerPreferences)">
             <summary>
             Returns true if CustomerPreferences instances are equal
             </summary>
             <param name="other">Instance of CustomerPreferences to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.CustomerPreferences.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.DeleteCatalogObjectRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCatalogObjectRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectRequest.Equals(Square.Connect.Model.DeleteCatalogObjectRequest)">
             <summary>
             Returns true if DeleteCatalogObjectRequest instances are equal
             </summary>
             <param name="other">Instance of DeleteCatalogObjectRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.DeleteCatalogObjectResponse">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCatalogObjectResponse" /> class.
             </summary>
             <param name="Errors">The set of [Error](#type-error)s encountered..</param>
             <param name="DeletedObjectIds">The IDs of all [CatalogObject](#type-catalogobject)s deleted by this request. Multiple IDs may be returned when associated objects are also deleted, for example a [CatalogItemVariation](#type-catalogitemvariation) will be deleted (and its ID included in this field) when its parent [CatalogItem](#type-catalogitem) is deleted..</param>
             <param name="DeletedAt">The database [timestamp](#workingwithdates) of this deletion in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\"..</param>
            </member>
        <member name="P:Square.Connect.Model.DeleteCatalogObjectResponse.Errors">
             <summary>
             The set of [Error](#type-error)s encountered.
             </summary>
             <value>The set of [Error](#type-error)s encountered.</value>
            </member>
        <member name="P:Square.Connect.Model.DeleteCatalogObjectResponse.DeletedObjectIds">
             <summary>
             The IDs of all [CatalogObject](#type-catalogobject)s deleted by this request. Multiple IDs may be returned when associated objects are also deleted, for example a [CatalogItemVariation](#type-catalogitemvariation) will be deleted (and its ID included in this field) when its parent [CatalogItem](#type-catalogitem) is deleted.
             </summary>
             <value>The IDs of all [CatalogObject](#type-catalogobject)s deleted by this request. Multiple IDs may be returned when associated objects are also deleted, for example a [CatalogItemVariation](#type-catalogitemvariation) will be deleted (and its ID included in this field) when its parent [CatalogItem](#type-catalogitem) is deleted.</value>
            </member>
        <member name="P:Square.Connect.Model.DeleteCatalogObjectResponse.DeletedAt">
             <summary>
             The database [timestamp](#workingwithdates) of this deletion in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\".
             </summary>
             <value>The database [timestamp](#workingwithdates) of this deletion in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\".</value>
            </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectResponse.Equals(Square.Connect.Model.DeleteCatalogObjectResponse)">
             <summary>
             Returns true if DeleteCatalogObjectResponse instances are equal
             </summary>
             <param name="other">Instance of DeleteCatalogObjectResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCatalogObjectResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.DeleteCustomerCardRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCustomerCardRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.Equals(Square.Connect.Model.DeleteCustomerCardRequest)">
             <summary>
             Returns true if DeleteCustomerCardRequest instances are equal
             </summary>
             <param name="other">Instance of DeleteCustomerCardRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.DeleteCustomerCardResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCustomerCardResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
            </member>
        <member name="P:Square.Connect.Model.DeleteCustomerCardResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.Equals(Square.Connect.Model.DeleteCustomerCardResponse)">
             <summary>
             Returns true if DeleteCustomerCardResponse instances are equal
             </summary>
             <param name="other">Instance of DeleteCustomerCardResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerCardResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.DeleteCustomerRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCustomerRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.Equals(Square.Connect.Model.DeleteCustomerRequest)">
             <summary>
             Returns true if DeleteCustomerRequest instances are equal
             </summary>
             <param name="other">Instance of DeleteCustomerRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.DeleteCustomerResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.DeleteCustomerResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
            </member>
        <member name="P:Square.Connect.Model.DeleteCustomerResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.Equals(Square.Connect.Model.DeleteCustomerResponse)">
             <summary>
             Returns true if DeleteCustomerResponse instances are equal
             </summary>
             <param name="other">Instance of DeleteCustomerResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.DeleteCustomerResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Device">
             <summary>
             Device
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Device.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Device" /> class.
             </summary>
             <param name="Id">The device's Square-issued ID..</param>
             <param name="Name">The device's merchant-specified name..</param>
            </member>
        <member name="P:Square.Connect.Model.Device.Id">
             <summary>
             The device's Square-issued ID.
             </summary>
             <value>The device's Square-issued ID.</value>
            </member>
        <member name="P:Square.Connect.Model.Device.Name">
             <summary>
             The device's merchant-specified name.
             </summary>
             <value>The device's merchant-specified name.</value>
            </member>
        <member name="M:Square.Connect.Model.Device.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Device.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Device.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Device.Equals(Square.Connect.Model.Device)">
             <summary>
             Returns true if Device instances are equal
             </summary>
             <param name="other">Instance of Device to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Device.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Error">
             <summary>
             Represents an error encountered during a request to the Connect API.  See [Handling errors](#handlingerrors) for more information.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Error.CategoryEnum">
             <summary>
             The error's high-level category. See [ErrorCategory](#type-errorcategory) for possible values.
             </summary>
             <value>The error's high-level category. See [ErrorCategory](#type-errorcategory) for possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.APIERROR">
             <summary>
             Enum APIERROR for "API_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.AUTHENTICATIONERROR">
             <summary>
             Enum AUTHENTICATIONERROR for "AUTHENTICATION_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.INVALIDREQUESTERROR">
             <summary>
             Enum INVALIDREQUESTERROR for "INVALID_REQUEST_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.RATELIMITERROR">
             <summary>
             Enum RATELIMITERROR for "RATE_LIMIT_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.PAYMENTMETHODERROR">
             <summary>
             Enum PAYMENTMETHODERROR for "PAYMENT_METHOD_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CategoryEnum.REFUNDERROR">
             <summary>
             Enum REFUNDERROR for "REFUND_ERROR"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Error.CodeEnum">
             <summary>
             The error's specific code. See [ErrorCode](#type-errorcode) for possible values
             </summary>
             <value>The error's specific code. See [ErrorCode](#type-errorcode) for possible values</value>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INTERNALSERVERERROR">
             <summary>
             Enum INTERNALSERVERERROR for "INTERNAL_SERVER_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNAUTHORIZED">
             <summary>
             Enum UNAUTHORIZED for "UNAUTHORIZED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ACCESSTOKENEXPIRED">
             <summary>
             Enum ACCESSTOKENEXPIRED for "ACCESS_TOKEN_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ACCESSTOKENREVOKED">
             <summary>
             Enum ACCESSTOKENREVOKED for "ACCESS_TOKEN_REVOKED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.FORBIDDEN">
             <summary>
             Enum FORBIDDEN for "FORBIDDEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INSUFFICIENTSCOPES">
             <summary>
             Enum INSUFFICIENTSCOPES for "INSUFFICIENT_SCOPES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.APPLICATIONDISABLED">
             <summary>
             Enum APPLICATIONDISABLED for "APPLICATION_DISABLED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.V1APPLICATION">
             <summary>
             Enum V1APPLICATION for "V1_APPLICATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.V1ACCESSTOKEN">
             <summary>
             Enum V1ACCESSTOKEN for "V1_ACCESS_TOKEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDPROCESSINGNOTENABLED">
             <summary>
             Enum CARDPROCESSINGNOTENABLED for "CARD_PROCESSING_NOT_ENABLED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.BADREQUEST">
             <summary>
             Enum BADREQUEST for "BAD_REQUEST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.MISSINGREQUIREDPARAMETER">
             <summary>
             Enum MISSINGREQUIREDPARAMETER for "MISSING_REQUIRED_PARAMETER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INCORRECTTYPE">
             <summary>
             Enum INCORRECTTYPE for "INCORRECT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDTIME">
             <summary>
             Enum INVALIDTIME for "INVALID_TIME"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDTIMERANGE">
             <summary>
             Enum INVALIDTIMERANGE for "INVALID_TIME_RANGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDVALUE">
             <summary>
             Enum INVALIDVALUE for "INVALID_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDCURSOR">
             <summary>
             Enum INVALIDCURSOR for "INVALID_CURSOR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNKNOWNQUERYPARAMETER">
             <summary>
             Enum UNKNOWNQUERYPARAMETER for "UNKNOWN_QUERY_PARAMETER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CONFLICTINGPARAMETERS">
             <summary>
             Enum CONFLICTINGPARAMETERS for "CONFLICTING_PARAMETERS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDJSONBODY">
             <summary>
             Enum EXPECTEDJSONBODY for "EXPECTED_JSON_BODY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDSORTORDER">
             <summary>
             Enum INVALIDSORTORDER for "INVALID_SORT_ORDER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUEREGEXMISMATCH">
             <summary>
             Enum VALUEREGEXMISMATCH for "VALUE_REGEX_MISMATCH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUETOOSHORT">
             <summary>
             Enum VALUETOOSHORT for "VALUE_TOO_SHORT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUETOOLONG">
             <summary>
             Enum VALUETOOLONG for "VALUE_TOO_LONG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUETOOLOW">
             <summary>
             Enum VALUETOOLOW for "VALUE_TOO_LOW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUETOOHIGH">
             <summary>
             Enum VALUETOOHIGH for "VALUE_TOO_HIGH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VALUEEMPTY">
             <summary>
             Enum VALUEEMPTY for "VALUE_EMPTY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ARRAYLENGTHTOOLONG">
             <summary>
             Enum ARRAYLENGTHTOOLONG for "ARRAY_LENGTH_TOO_LONG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ARRAYLENGTHTOOSHORT">
             <summary>
             Enum ARRAYLENGTHTOOSHORT for "ARRAY_LENGTH_TOO_SHORT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ARRAYEMPTY">
             <summary>
             Enum ARRAYEMPTY for "ARRAY_EMPTY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDBOOLEAN">
             <summary>
             Enum EXPECTEDBOOLEAN for "EXPECTED_BOOLEAN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDINTEGER">
             <summary>
             Enum EXPECTEDINTEGER for "EXPECTED_INTEGER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDFLOAT">
             <summary>
             Enum EXPECTEDFLOAT for "EXPECTED_FLOAT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDSTRING">
             <summary>
             Enum EXPECTEDSTRING for "EXPECTED_STRING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDOBJECT">
             <summary>
             Enum EXPECTEDOBJECT for "EXPECTED_OBJECT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDARRAY">
             <summary>
             Enum EXPECTEDARRAY for "EXPECTED_ARRAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.EXPECTEDBASE64ENCODEDBYTEARRAY">
             <summary>
             Enum EXPECTEDBASE64ENCODEDBYTEARRAY for "EXPECTED_BASE64_ENCODED_BYTE_ARRAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDARRAYVALUE">
             <summary>
             Enum INVALIDARRAYVALUE for "INVALID_ARRAY_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDENUMVALUE">
             <summary>
             Enum INVALIDENUMVALUE for "INVALID_ENUM_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDCONTENTTYPE">
             <summary>
             Enum INVALIDCONTENTTYPE for "INVALID_CONTENT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDFORMVALUE">
             <summary>
             Enum INVALIDFORMVALUE for "INVALID_FORM_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.ONEINSTRUMENTEXPECTED">
             <summary>
             Enum ONEINSTRUMENTEXPECTED for "ONE_INSTRUMENT_EXPECTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.NOFIELDSSET">
             <summary>
             Enum NOFIELDSSET for "NO_FIELDS_SET"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDEXPIRED">
             <summary>
             Enum CARDEXPIRED for "CARD_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDEXPIRATION">
             <summary>
             Enum INVALIDEXPIRATION for "INVALID_EXPIRATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDEXPIRATIONYEAR">
             <summary>
             Enum INVALIDEXPIRATIONYEAR for "INVALID_EXPIRATION_YEAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDEXPIRATIONDATE">
             <summary>
             Enum INVALIDEXPIRATIONDATE for "INVALID_EXPIRATION_DATE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNSUPPORTEDCARDBRAND">
             <summary>
             Enum UNSUPPORTEDCARDBRAND for "UNSUPPORTED_CARD_BRAND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNSUPPORTEDENTRYMETHOD">
             <summary>
             Enum UNSUPPORTEDENTRYMETHOD for "UNSUPPORTED_ENTRY_METHOD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDCARD">
             <summary>
             Enum INVALIDCARD for "INVALID_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DELAYEDTRANSACTIONEXPIRED">
             <summary>
             Enum DELAYEDTRANSACTIONEXPIRED for "DELAYED_TRANSACTION_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DELAYEDTRANSACTIONCANCELED">
             <summary>
             Enum DELAYEDTRANSACTIONCANCELED for "DELAYED_TRANSACTION_CANCELED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DELAYEDTRANSACTIONCAPTURED">
             <summary>
             Enum DELAYEDTRANSACTIONCAPTURED for "DELAYED_TRANSACTION_CAPTURED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.DELAYEDTRANSACTIONFAILED">
             <summary>
             Enum DELAYEDTRANSACTIONFAILED for "DELAYED_TRANSACTION_FAILED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDTOKENEXPIRED">
             <summary>
             Enum CARDTOKENEXPIRED for "CARD_TOKEN_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDTOKENUSED">
             <summary>
             Enum CARDTOKENUSED for "CARD_TOKEN_USED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.AMOUNTTOOHIGH">
             <summary>
             Enum AMOUNTTOOHIGH for "AMOUNT_TOO_HIGH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNSUPPORTEDINSTRUMENTTYPE">
             <summary>
             Enum UNSUPPORTEDINSTRUMENTTYPE for "UNSUPPORTED_INSTRUMENT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.REFUNDAMOUNTINVALID">
             <summary>
             Enum REFUNDAMOUNTINVALID for "REFUND_AMOUNT_INVALID"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.REFUNDALREADYPENDING">
             <summary>
             Enum REFUNDALREADYPENDING for "REFUND_ALREADY_PENDING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.PAYMENTNOTREFUNDABLE">
             <summary>
             Enum PAYMENTNOTREFUNDABLE for "PAYMENT_NOT_REFUNDABLE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDCARDDATA">
             <summary>
             Enum INVALIDCARDDATA for "INVALID_CARD_DATA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.IDEMPOTENCYKEYREUSED">
             <summary>
             Enum IDEMPOTENCYKEYREUSED for "IDEMPOTENCY_KEY_REUSED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNEXPECTEDVALUE">
             <summary>
             Enum UNEXPECTEDVALUE for "UNEXPECTED_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.SANDBOXNOTSUPPORTED">
             <summary>
             Enum SANDBOXNOTSUPPORTED for "SANDBOX_NOT_SUPPORTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDEMAILADDRESS">
             <summary>
             Enum INVALIDEMAILADDRESS for "INVALID_EMAIL_ADDRESS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.INVALIDPHONENUMBER">
             <summary>
             Enum INVALIDPHONENUMBER for "INVALID_PHONE_NUMBER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CHECKOUTEXPIRED">
             <summary>
             Enum CHECKOUTEXPIRED for "CHECKOUT_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDDECLINED">
             <summary>
             Enum CARDDECLINED for "CARD_DECLINED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VERIFYCVVFAILURE">
             <summary>
             Enum VERIFYCVVFAILURE for "VERIFY_CVV_FAILURE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.VERIFYAVSFAILURE">
             <summary>
             Enum VERIFYAVSFAILURE for "VERIFY_AVS_FAILURE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CARDDECLINEDCALLISSUER">
             <summary>
             Enum CARDDECLINEDCALLISSUER for "CARD_DECLINED_CALL_ISSUER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.NOTFOUND">
             <summary>
             Enum NOTFOUND for "NOT_FOUND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.REQUESTTIMEOUT">
             <summary>
             Enum REQUESTTIMEOUT for "REQUEST_TIMEOUT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.CONFLICT">
             <summary>
             Enum CONFLICT for "CONFLICT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.REQUESTENTITYTOOLARGE">
             <summary>
             Enum REQUESTENTITYTOOLARGE for "REQUEST_ENTITY_TOO_LARGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.UNSUPPORTEDMEDIATYPE">
             <summary>
             Enum UNSUPPORTEDMEDIATYPE for "UNSUPPORTED_MEDIA_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.RATELIMITED">
             <summary>
             Enum RATELIMITED for "RATE_LIMITED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.NOTIMPLEMENTED">
             <summary>
             Enum NOTIMPLEMENTED for "NOT_IMPLEMENTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Error.CodeEnum.SERVICEUNAVAILABLE">
             <summary>
             Enum SERVICEUNAVAILABLE for "SERVICE_UNAVAILABLE"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Error.Category">
             <summary>
             The error's high-level category. See [ErrorCategory](#type-errorcategory) for possible values.
             </summary>
             <value>The error's high-level category. See [ErrorCategory](#type-errorcategory) for possible values.</value>
            </member>
        <member name="P:Square.Connect.Model.Error.Code">
             <summary>
             The error's specific code. See [ErrorCode](#type-errorcode) for possible values
             </summary>
             <value>The error's specific code. See [ErrorCode](#type-errorcode) for possible values</value>
            </member>
        <member name="M:Square.Connect.Model.Error.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Error" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Error.#ctor(System.Nullable{Square.Connect.Model.Error.CategoryEnum},System.Nullable{Square.Connect.Model.Error.CodeEnum},System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Error" /> class.
             </summary>
             <param name="Category">The error's high-level category. See [ErrorCategory](#type-errorcategory) for possible values. (required).</param>
             <param name="Code">The error's specific code. See [ErrorCode](#type-errorcode) for possible values (required).</param>
             <param name="Detail">A human-readable description of the error for debugging purposes..</param>
             <param name="Field">The name of the field provided in the original request that the error pertains to, if any..</param>
            </member>
        <member name="P:Square.Connect.Model.Error.Detail">
             <summary>
             A human-readable description of the error for debugging purposes.
             </summary>
             <value>A human-readable description of the error for debugging purposes.</value>
            </member>
        <member name="P:Square.Connect.Model.Error.Field">
             <summary>
             The name of the field provided in the original request that the error pertains to, if any.
             </summary>
             <value>The name of the field provided in the original request that the error pertains to, if any.</value>
            </member>
        <member name="M:Square.Connect.Model.Error.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Error.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Error.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Error.Equals(Square.Connect.Model.Error)">
             <summary>
             Returns true if Error instances are equal
             </summary>
             <param name="other">Instance of Error to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Error.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ErrorCategory">
             <summary>
             Indicates which high-level category of error has occurred during a request to the Connect API.
             </summary>
             <value>Indicates which high-level category of error has occurred during a request to the Connect API.</value>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.APIERROR">
             <summary>
             Enum APIERROR for "API_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.AUTHENTICATIONERROR">
             <summary>
             Enum AUTHENTICATIONERROR for "AUTHENTICATION_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.INVALIDREQUESTERROR">
             <summary>
             Enum INVALIDREQUESTERROR for "INVALID_REQUEST_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.RATELIMITERROR">
             <summary>
             Enum RATELIMITERROR for "RATE_LIMIT_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.PAYMENTMETHODERROR">
             <summary>
             Enum PAYMENTMETHODERROR for "PAYMENT_METHOD_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCategory.REFUNDERROR">
             <summary>
             Enum REFUNDERROR for "REFUND_ERROR"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ErrorCode">
             <summary>
             Indicates specific errors that can occur during a request to the Connect API.
             </summary>
             <value>Indicates specific errors that can occur during a request to the Connect API.</value>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INTERNALSERVERERROR">
             <summary>
             Enum INTERNALSERVERERROR for "INTERNAL_SERVER_ERROR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNAUTHORIZED">
             <summary>
             Enum UNAUTHORIZED for "UNAUTHORIZED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ACCESSTOKENEXPIRED">
             <summary>
             Enum ACCESSTOKENEXPIRED for "ACCESS_TOKEN_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ACCESSTOKENREVOKED">
             <summary>
             Enum ACCESSTOKENREVOKED for "ACCESS_TOKEN_REVOKED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.FORBIDDEN">
             <summary>
             Enum FORBIDDEN for "FORBIDDEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INSUFFICIENTSCOPES">
             <summary>
             Enum INSUFFICIENTSCOPES for "INSUFFICIENT_SCOPES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.APPLICATIONDISABLED">
             <summary>
             Enum APPLICATIONDISABLED for "APPLICATION_DISABLED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.V1APPLICATION">
             <summary>
             Enum V1APPLICATION for "V1_APPLICATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.V1ACCESSTOKEN">
             <summary>
             Enum V1ACCESSTOKEN for "V1_ACCESS_TOKEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDPROCESSINGNOTENABLED">
             <summary>
             Enum CARDPROCESSINGNOTENABLED for "CARD_PROCESSING_NOT_ENABLED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.BADREQUEST">
             <summary>
             Enum BADREQUEST for "BAD_REQUEST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.MISSINGREQUIREDPARAMETER">
             <summary>
             Enum MISSINGREQUIREDPARAMETER for "MISSING_REQUIRED_PARAMETER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INCORRECTTYPE">
             <summary>
             Enum INCORRECTTYPE for "INCORRECT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDTIME">
             <summary>
             Enum INVALIDTIME for "INVALID_TIME"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDTIMERANGE">
             <summary>
             Enum INVALIDTIMERANGE for "INVALID_TIME_RANGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDVALUE">
             <summary>
             Enum INVALIDVALUE for "INVALID_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDCURSOR">
             <summary>
             Enum INVALIDCURSOR for "INVALID_CURSOR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNKNOWNQUERYPARAMETER">
             <summary>
             Enum UNKNOWNQUERYPARAMETER for "UNKNOWN_QUERY_PARAMETER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CONFLICTINGPARAMETERS">
             <summary>
             Enum CONFLICTINGPARAMETERS for "CONFLICTING_PARAMETERS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDJSONBODY">
             <summary>
             Enum EXPECTEDJSONBODY for "EXPECTED_JSON_BODY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDSORTORDER">
             <summary>
             Enum INVALIDSORTORDER for "INVALID_SORT_ORDER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUEREGEXMISMATCH">
             <summary>
             Enum VALUEREGEXMISMATCH for "VALUE_REGEX_MISMATCH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUETOOSHORT">
             <summary>
             Enum VALUETOOSHORT for "VALUE_TOO_SHORT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUETOOLONG">
             <summary>
             Enum VALUETOOLONG for "VALUE_TOO_LONG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUETOOLOW">
             <summary>
             Enum VALUETOOLOW for "VALUE_TOO_LOW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUETOOHIGH">
             <summary>
             Enum VALUETOOHIGH for "VALUE_TOO_HIGH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VALUEEMPTY">
             <summary>
             Enum VALUEEMPTY for "VALUE_EMPTY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ARRAYLENGTHTOOLONG">
             <summary>
             Enum ARRAYLENGTHTOOLONG for "ARRAY_LENGTH_TOO_LONG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ARRAYLENGTHTOOSHORT">
             <summary>
             Enum ARRAYLENGTHTOOSHORT for "ARRAY_LENGTH_TOO_SHORT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ARRAYEMPTY">
             <summary>
             Enum ARRAYEMPTY for "ARRAY_EMPTY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDBOOLEAN">
             <summary>
             Enum EXPECTEDBOOLEAN for "EXPECTED_BOOLEAN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDINTEGER">
             <summary>
             Enum EXPECTEDINTEGER for "EXPECTED_INTEGER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDFLOAT">
             <summary>
             Enum EXPECTEDFLOAT for "EXPECTED_FLOAT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDSTRING">
             <summary>
             Enum EXPECTEDSTRING for "EXPECTED_STRING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDOBJECT">
             <summary>
             Enum EXPECTEDOBJECT for "EXPECTED_OBJECT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDARRAY">
             <summary>
             Enum EXPECTEDARRAY for "EXPECTED_ARRAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.EXPECTEDBASE64ENCODEDBYTEARRAY">
             <summary>
             Enum EXPECTEDBASE64ENCODEDBYTEARRAY for "EXPECTED_BASE64_ENCODED_BYTE_ARRAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDARRAYVALUE">
             <summary>
             Enum INVALIDARRAYVALUE for "INVALID_ARRAY_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDENUMVALUE">
             <summary>
             Enum INVALIDENUMVALUE for "INVALID_ENUM_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDCONTENTTYPE">
             <summary>
             Enum INVALIDCONTENTTYPE for "INVALID_CONTENT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDFORMVALUE">
             <summary>
             Enum INVALIDFORMVALUE for "INVALID_FORM_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.ONEINSTRUMENTEXPECTED">
             <summary>
             Enum ONEINSTRUMENTEXPECTED for "ONE_INSTRUMENT_EXPECTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.NOFIELDSSET">
             <summary>
             Enum NOFIELDSSET for "NO_FIELDS_SET"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDEXPIRED">
             <summary>
             Enum CARDEXPIRED for "CARD_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDEXPIRATION">
             <summary>
             Enum INVALIDEXPIRATION for "INVALID_EXPIRATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDEXPIRATIONYEAR">
             <summary>
             Enum INVALIDEXPIRATIONYEAR for "INVALID_EXPIRATION_YEAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDEXPIRATIONDATE">
             <summary>
             Enum INVALIDEXPIRATIONDATE for "INVALID_EXPIRATION_DATE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNSUPPORTEDCARDBRAND">
             <summary>
             Enum UNSUPPORTEDCARDBRAND for "UNSUPPORTED_CARD_BRAND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNSUPPORTEDENTRYMETHOD">
             <summary>
             Enum UNSUPPORTEDENTRYMETHOD for "UNSUPPORTED_ENTRY_METHOD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDCARD">
             <summary>
             Enum INVALIDCARD for "INVALID_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.DELAYEDTRANSACTIONEXPIRED">
             <summary>
             Enum DELAYEDTRANSACTIONEXPIRED for "DELAYED_TRANSACTION_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.DELAYEDTRANSACTIONCANCELED">
             <summary>
             Enum DELAYEDTRANSACTIONCANCELED for "DELAYED_TRANSACTION_CANCELED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.DELAYEDTRANSACTIONCAPTURED">
             <summary>
             Enum DELAYEDTRANSACTIONCAPTURED for "DELAYED_TRANSACTION_CAPTURED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.DELAYEDTRANSACTIONFAILED">
             <summary>
             Enum DELAYEDTRANSACTIONFAILED for "DELAYED_TRANSACTION_FAILED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDTOKENEXPIRED">
             <summary>
             Enum CARDTOKENEXPIRED for "CARD_TOKEN_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDTOKENUSED">
             <summary>
             Enum CARDTOKENUSED for "CARD_TOKEN_USED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.AMOUNTTOOHIGH">
             <summary>
             Enum AMOUNTTOOHIGH for "AMOUNT_TOO_HIGH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNSUPPORTEDINSTRUMENTTYPE">
             <summary>
             Enum UNSUPPORTEDINSTRUMENTTYPE for "UNSUPPORTED_INSTRUMENT_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.REFUNDAMOUNTINVALID">
             <summary>
             Enum REFUNDAMOUNTINVALID for "REFUND_AMOUNT_INVALID"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.REFUNDALREADYPENDING">
             <summary>
             Enum REFUNDALREADYPENDING for "REFUND_ALREADY_PENDING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.PAYMENTNOTREFUNDABLE">
             <summary>
             Enum PAYMENTNOTREFUNDABLE for "PAYMENT_NOT_REFUNDABLE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDCARDDATA">
             <summary>
             Enum INVALIDCARDDATA for "INVALID_CARD_DATA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.IDEMPOTENCYKEYREUSED">
             <summary>
             Enum IDEMPOTENCYKEYREUSED for "IDEMPOTENCY_KEY_REUSED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNEXPECTEDVALUE">
             <summary>
             Enum UNEXPECTEDVALUE for "UNEXPECTED_VALUE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.SANDBOXNOTSUPPORTED">
             <summary>
             Enum SANDBOXNOTSUPPORTED for "SANDBOX_NOT_SUPPORTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDEMAILADDRESS">
             <summary>
             Enum INVALIDEMAILADDRESS for "INVALID_EMAIL_ADDRESS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.INVALIDPHONENUMBER">
             <summary>
             Enum INVALIDPHONENUMBER for "INVALID_PHONE_NUMBER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CHECKOUTEXPIRED">
             <summary>
             Enum CHECKOUTEXPIRED for "CHECKOUT_EXPIRED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDDECLINED">
             <summary>
             Enum CARDDECLINED for "CARD_DECLINED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VERIFYCVVFAILURE">
             <summary>
             Enum VERIFYCVVFAILURE for "VERIFY_CVV_FAILURE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.VERIFYAVSFAILURE">
             <summary>
             Enum VERIFYAVSFAILURE for "VERIFY_AVS_FAILURE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CARDDECLINEDCALLISSUER">
             <summary>
             Enum CARDDECLINEDCALLISSUER for "CARD_DECLINED_CALL_ISSUER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.NOTFOUND">
             <summary>
             Enum NOTFOUND for "NOT_FOUND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.REQUESTTIMEOUT">
             <summary>
             Enum REQUESTTIMEOUT for "REQUEST_TIMEOUT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.CONFLICT">
             <summary>
             Enum CONFLICT for "CONFLICT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.REQUESTENTITYTOOLARGE">
             <summary>
             Enum REQUESTENTITYTOOLARGE for "REQUEST_ENTITY_TOO_LARGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.UNSUPPORTEDMEDIATYPE">
             <summary>
             Enum UNSUPPORTEDMEDIATYPE for "UNSUPPORTED_MEDIA_TYPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.RATELIMITED">
             <summary>
             Enum RATELIMITED for "RATE_LIMITED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.NOTIMPLEMENTED">
             <summary>
             Enum NOTIMPLEMENTED for "NOT_IMPLEMENTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ErrorCode.SERVICEUNAVAILABLE">
             <summary>
             Enum SERVICEUNAVAILABLE for "SERVICE_UNAVAILABLE"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.InventoryAlertType">
             <summary>
             Indicates whether Square should alert the merchant when the inventory quantity of a [CatalogItemVariation](#type-catalogitemvariation) is low.
             </summary>
             <value>Indicates whether Square should alert the merchant when the inventory quantity of a [CatalogItemVariation](#type-catalogitemvariation) is low.</value>
            </member>
        <member name="F:Square.Connect.Model.InventoryAlertType.NONE">
             <summary>
             Enum NONE for "NONE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.InventoryAlertType.LOWQUANTITY">
             <summary>
             Enum LOWQUANTITY for "LOW_QUANTITY"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ItemVariationLocationOverrides">
             <summary>
             Price and inventory alerting overrides for a [CatalogItemVariation](#type-catalogitemvariation) at a specific [location](#type-location).
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ItemVariationLocationOverrides.PricingTypeEnum">
             <summary>
             The pricing type (fixed or variable) for the [CatalogItemVariation](#type-catalogitemvariation) at the given [location](#type-location). See [CatalogPricingType](#type-catalogpricingtype) for all possible values.
             </summary>
             <value>The pricing type (fixed or variable) for the [CatalogItemVariation](#type-catalogitemvariation) at the given [location](#type-location). See [CatalogPricingType](#type-catalogpricingtype) for all possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.ItemVariationLocationOverrides.PricingTypeEnum.FIXEDPRICING">
             <summary>
             Enum FIXEDPRICING for "FIXED_PRICING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ItemVariationLocationOverrides.PricingTypeEnum.VARIABLEPRICING">
             <summary>
             Enum VARIABLEPRICING for "VARIABLE_PRICING"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ItemVariationLocationOverrides.InventoryAlertTypeEnum">
             <summary>
             Indicates whether the [CatalogItemVariation](#type-catalogitemvariation) displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for all possible values.
             </summary>
             <value>Indicates whether the [CatalogItemVariation](#type-catalogitemvariation) displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for all possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.ItemVariationLocationOverrides.InventoryAlertTypeEnum.NONE">
             <summary>
             Enum NONE for "NONE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ItemVariationLocationOverrides.InventoryAlertTypeEnum.LOWQUANTITY">
             <summary>
             Enum LOWQUANTITY for "LOW_QUANTITY"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.ItemVariationLocationOverrides.PricingType">
             <summary>
             The pricing type (fixed or variable) for the [CatalogItemVariation](#type-catalogitemvariation) at the given [location](#type-location). See [CatalogPricingType](#type-catalogpricingtype) for all possible values.
             </summary>
             <value>The pricing type (fixed or variable) for the [CatalogItemVariation](#type-catalogitemvariation) at the given [location](#type-location). See [CatalogPricingType](#type-catalogpricingtype) for all possible values.</value>
            </member>
        <member name="P:Square.Connect.Model.ItemVariationLocationOverrides.InventoryAlertType">
             <summary>
             Indicates whether the [CatalogItemVariation](#type-catalogitemvariation) displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for all possible values.
             </summary>
             <value>Indicates whether the [CatalogItemVariation](#type-catalogitemvariation) displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for all possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.ItemVariationLocationOverrides.#ctor(System.String,Square.Connect.Model.Money,System.Nullable{Square.Connect.Model.ItemVariationLocationOverrides.PricingTypeEnum},System.Nullable{System.Boolean},System.Nullable{Square.Connect.Model.ItemVariationLocationOverrides.InventoryAlertTypeEnum},System.Nullable{System.Int64})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ItemVariationLocationOverrides" /> class.
             </summary>
             <param name="LocationId">The ID of the [location](#type-location)..</param>
             <param name="PriceMoney">The price of the [CatalogItemVariation](#type-catalogitemvariation) at the given [location](#type-location), or blank for variable pricing..</param>
             <param name="PricingType">The pricing type (fixed or variable) for the [CatalogItemVariation](#type-catalogitemvariation) at the given [location](#type-location). See [CatalogPricingType](#type-catalogpricingtype) for all possible values..</param>
             <param name="TrackInventory">If `true`, inventory tracking is active for the [CatalogItemVariation](#type-catalogitemvariation) at this [location](#type-location)..</param>
             <param name="InventoryAlertType">Indicates whether the [CatalogItemVariation](#type-catalogitemvariation) displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for all possible values..</param>
             <param name="InventoryAlertThreshold">If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type` is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.  This value is always an integer..</param>
            </member>
        <member name="P:Square.Connect.Model.ItemVariationLocationOverrides.LocationId">
             <summary>
             The ID of the [location](#type-location).
             </summary>
             <value>The ID of the [location](#type-location).</value>
            </member>
        <member name="P:Square.Connect.Model.ItemVariationLocationOverrides.PriceMoney">
             <summary>
             The price of the [CatalogItemVariation](#type-catalogitemvariation) at the given [location](#type-location), or blank for variable pricing.
             </summary>
             <value>The price of the [CatalogItemVariation](#type-catalogitemvariation) at the given [location](#type-location), or blank for variable pricing.</value>
            </member>
        <member name="P:Square.Connect.Model.ItemVariationLocationOverrides.TrackInventory">
             <summary>
             If `true`, inventory tracking is active for the [CatalogItemVariation](#type-catalogitemvariation) at this [location](#type-location).
             </summary>
             <value>If `true`, inventory tracking is active for the [CatalogItemVariation](#type-catalogitemvariation) at this [location](#type-location).</value>
            </member>
        <member name="P:Square.Connect.Model.ItemVariationLocationOverrides.InventoryAlertThreshold">
             <summary>
             If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type` is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.  This value is always an integer.
             </summary>
             <value>If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type` is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.  This value is always an integer.</value>
            </member>
        <member name="M:Square.Connect.Model.ItemVariationLocationOverrides.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ItemVariationLocationOverrides.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ItemVariationLocationOverrides.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ItemVariationLocationOverrides.Equals(Square.Connect.Model.ItemVariationLocationOverrides)">
             <summary>
             Returns true if ItemVariationLocationOverrides instances are equal
             </summary>
             <param name="other">Instance of ItemVariationLocationOverrides to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ItemVariationLocationOverrides.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest">
             <summary>
             Defines the query parameters that can be included in a request to the [ListAdditionalRecipientReceivableRefunds](#endpoint-listadditionalrecipientreceivablerefunds) endpoint.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.SortOrderEnum">
             <summary>
             The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`
             </summary>
             <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`</value>
            </member>
        <member name="F:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.SortOrderEnum.DESC">
             <summary>
             Enum DESC for "DESC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.SortOrderEnum.ASC">
             <summary>
             Enum ASC for "ASC"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.SortOrder">
             <summary>
             The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`
             </summary>
             <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`</value>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.SortOrderEnum},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest" /> class.
             </summary>
             <param name="BeginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year..</param>
             <param name="EndTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time..</param>
             <param name="SortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`.</param>
             <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information..</param>
            </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.BeginTime">
             <summary>
             The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
             </summary>
             <value>The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.</value>
            </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.EndTime">
             <summary>
             The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
             </summary>
             <value>The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.</value>
            </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.Cursor">
             <summary>
             A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.Equals(Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest)">
             <summary>
             Returns true if ListAdditionalRecipientReceivableRefundsRequest instances are equal
             </summary>
             <param name="other">Instance of ListAdditionalRecipientReceivableRefundsRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [ListAdditionalRecipientReceivableRefunds](#endpoint-listadditionalrecipientreceivablerefunds) endpoint.  One of `errors` or `additional_recipient_receivable_refunds` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.AdditionalRecipientReceivableRefund},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="ReceivableRefunds">An array of AdditionalRecipientReceivableRefunds that match your query..</param>
             <param name="Cursor">A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information..</param>
            </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.ReceivableRefunds">
             <summary>
             An array of AdditionalRecipientReceivableRefunds that match your query.
             </summary>
             <value>An array of AdditionalRecipientReceivableRefunds that match your query.</value>
            </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.Cursor">
             <summary>
             A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.Equals(Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse)">
             <summary>
             Returns true if ListAdditionalRecipientReceivableRefundsResponse instances are equal
             </summary>
             <param name="other">Instance of ListAdditionalRecipientReceivableRefundsResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivableRefundsResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest">
             <summary>
             Defines the query parameters that can be included in a request to the [ListAdditionalRecipientReceivables](#endpoint-listadditionalrecipientreceivables) endpoint.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.SortOrderEnum">
             <summary>
             The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`
             </summary>
             <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`</value>
            </member>
        <member name="F:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.SortOrderEnum.DESC">
             <summary>
             Enum DESC for "DESC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.SortOrderEnum.ASC">
             <summary>
             Enum ASC for "ASC"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.SortOrder">
             <summary>
             The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`
             </summary>
             <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`</value>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.SortOrderEnum},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest" /> class.
             </summary>
             <param name="BeginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year..</param>
             <param name="EndTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time..</param>
             <param name="SortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`.</param>
             <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information..</param>
            </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.BeginTime">
             <summary>
             The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
             </summary>
             <value>The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.</value>
            </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.EndTime">
             <summary>
             The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
             </summary>
             <value>The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.</value>
            </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.Cursor">
             <summary>
             A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.Equals(Square.Connect.Model.ListAdditionalRecipientReceivablesRequest)">
             <summary>
             Returns true if ListAdditionalRecipientReceivablesRequest instances are equal
             </summary>
             <param name="other">Instance of ListAdditionalRecipientReceivablesRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [ListAdditionalRecipientReceivables](#endpoint-listadditionalrecipientreceivables) endpoint.  One of `errors` or `additional_recipient_receivables` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.AdditionalRecipientReceivable},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Receivables">An array of AdditionalRecipientReceivables that match your query..</param>
             <param name="Cursor">A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information..</param>
            </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.Receivables">
             <summary>
             An array of AdditionalRecipientReceivables that match your query.
             </summary>
             <value>An array of AdditionalRecipientReceivables that match your query.</value>
            </member>
        <member name="P:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.Cursor">
             <summary>
             A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.Equals(Square.Connect.Model.ListAdditionalRecipientReceivablesResponse)">
             <summary>
             Returns true if ListAdditionalRecipientReceivablesResponse instances are equal
             </summary>
             <param name="other">Instance of ListAdditionalRecipientReceivablesResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListAdditionalRecipientReceivablesResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListCatalogRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListCatalogRequest.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListCatalogRequest" /> class.
             </summary>
             <param name="Cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Paginating results](#paginatingresults) for more information..</param>
             <param name="Types">An optional case-insensitive, comma-separated list of object types to retrieve, for example `ITEM,ITEM_VARIATION,CATEGORY`.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`..</param>
            </member>
        <member name="P:Square.Connect.Model.ListCatalogRequest.Cursor">
             <summary>
             The pagination cursor returned in the previous response. Leave unset for an initial request. See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>The pagination cursor returned in the previous response. Leave unset for an initial request. See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="P:Square.Connect.Model.ListCatalogRequest.Types">
             <summary>
             An optional case-insensitive, comma-separated list of object types to retrieve, for example `ITEM,ITEM_VARIATION,CATEGORY`.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`.
             </summary>
             <value>An optional case-insensitive, comma-separated list of object types to retrieve, for example `ITEM,ITEM_VARIATION,CATEGORY`.  The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`.</value>
            </member>
        <member name="M:Square.Connect.Model.ListCatalogRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCatalogRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCatalogRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCatalogRequest.Equals(Square.Connect.Model.ListCatalogRequest)">
             <summary>
             Returns true if ListCatalogRequest instances are equal
             </summary>
             <param name="other">Instance of ListCatalogRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCatalogRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListCatalogResponse">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListCatalogResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.String,System.Collections.Generic.List{Square.Connect.Model.CatalogObject})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListCatalogResponse" /> class.
             </summary>
             <param name="Errors">The set of [Error](#type-error)s encountered..</param>
             <param name="Cursor">The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Paginating results](#paginatingresults) for more information..</param>
             <param name="Objects">The [CatalogObject](#type-catalogobject)s returned..</param>
            </member>
        <member name="P:Square.Connect.Model.ListCatalogResponse.Errors">
             <summary>
             The set of [Error](#type-error)s encountered.
             </summary>
             <value>The set of [Error](#type-error)s encountered.</value>
            </member>
        <member name="P:Square.Connect.Model.ListCatalogResponse.Cursor">
             <summary>
             The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="P:Square.Connect.Model.ListCatalogResponse.Objects">
             <summary>
             The [CatalogObject](#type-catalogobject)s returned.
             </summary>
             <value>The [CatalogObject](#type-catalogobject)s returned.</value>
            </member>
        <member name="M:Square.Connect.Model.ListCatalogResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCatalogResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCatalogResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCatalogResponse.Equals(Square.Connect.Model.ListCatalogResponse)">
             <summary>
             Returns true if ListCatalogResponse instances are equal
             </summary>
             <param name="other">Instance of ListCatalogResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCatalogResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListCustomersRequest">
             <summary>
             Defines the query parameters that can be provided in a request to the [ListCustomers](#endpoint-listcustomers) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListCustomersRequest" /> class.
             </summary>
             <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information..</param>
            </member>
        <member name="P:Square.Connect.Model.ListCustomersRequest.Cursor">
             <summary>
             A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.Equals(Square.Connect.Model.ListCustomersRequest)">
             <summary>
             Returns true if ListCustomersRequest instances are equal
             </summary>
             <param name="other">Instance of ListCustomersRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListCustomersResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [ListCustomers](#endpoint-listcustomers) endpoint.  One of `errors` or `customers` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Customer},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListCustomersResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Customers">An array of `Customer` objects that match your query..</param>
             <param name="Cursor">A pagination cursor to retrieve the next set of results for your original query to the endpoint. This value is present only if the request succeeded and additional results are available.  See [Paginating results](#paginatingresults) for more information..</param>
            </member>
        <member name="P:Square.Connect.Model.ListCustomersResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.ListCustomersResponse.Customers">
             <summary>
             An array of `Customer` objects that match your query.
             </summary>
             <value>An array of `Customer` objects that match your query.</value>
            </member>
        <member name="P:Square.Connect.Model.ListCustomersResponse.Cursor">
             <summary>
             A pagination cursor to retrieve the next set of results for your original query to the endpoint. This value is present only if the request succeeded and additional results are available.  See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>A pagination cursor to retrieve the next set of results for your original query to the endpoint. This value is present only if the request succeeded and additional results are available.  See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.Equals(Square.Connect.Model.ListCustomersResponse)">
             <summary>
             Returns true if ListCustomersResponse instances are equal
             </summary>
             <param name="other">Instance of ListCustomersResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListCustomersResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListLocationsRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListLocationsRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.Equals(Square.Connect.Model.ListLocationsRequest)">
             <summary>
             Returns true if ListLocationsRequest instances are equal
             </summary>
             <param name="other">Instance of ListLocationsRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListLocationsResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [ListLocations](#endpoint-listlocations) endpoint.  One of `errors` or `locations` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Location})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListLocationsResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Locations">The business's locations..</param>
            </member>
        <member name="P:Square.Connect.Model.ListLocationsResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.ListLocationsResponse.Locations">
             <summary>
             The business's locations.
             </summary>
             <value>The business's locations.</value>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.Equals(Square.Connect.Model.ListLocationsResponse)">
             <summary>
             Returns true if ListLocationsResponse instances are equal
             </summary>
             <param name="other">Instance of ListLocationsResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListLocationsResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListRefundsRequest">
             <summary>
             Defines the query parameters that can be included in a request to the [ListRefunds](#endpoint-listrefunds) endpoint.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ListRefundsRequest.SortOrderEnum">
             <summary>
             The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`
             </summary>
             <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`</value>
            </member>
        <member name="F:Square.Connect.Model.ListRefundsRequest.SortOrderEnum.DESC">
             <summary>
             Enum DESC for "DESC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ListRefundsRequest.SortOrderEnum.ASC">
             <summary>
             Enum ASC for "ASC"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsRequest.SortOrder">
             <summary>
             The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`
             </summary>
             <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`</value>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.ListRefundsRequest.SortOrderEnum},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListRefundsRequest" /> class.
             </summary>
             <param name="BeginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year..</param>
             <param name="EndTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time..</param>
             <param name="SortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`.</param>
             <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information..</param>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsRequest.BeginTime">
             <summary>
             The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
             </summary>
             <value>The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.</value>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsRequest.EndTime">
             <summary>
             The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
             </summary>
             <value>The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.</value>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsRequest.Cursor">
             <summary>
             A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.Equals(Square.Connect.Model.ListRefundsRequest)">
             <summary>
             Returns true if ListRefundsRequest instances are equal
             </summary>
             <param name="other">Instance of ListRefundsRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListRefundsResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [ListRefunds](#endpoint-listrefunds) endpoint.  One of `errors` or `refunds` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Refund},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListRefundsResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Refunds">An array of refunds that match your query..</param>
             <param name="Cursor">A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information..</param>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsResponse.Refunds">
             <summary>
             An array of refunds that match your query.
             </summary>
             <value>An array of refunds that match your query.</value>
            </member>
        <member name="P:Square.Connect.Model.ListRefundsResponse.Cursor">
             <summary>
             A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.Equals(Square.Connect.Model.ListRefundsResponse)">
             <summary>
             Returns true if ListRefundsResponse instances are equal
             </summary>
             <param name="other">Instance of ListRefundsResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListRefundsResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListTransactionsRequest">
             <summary>
             Defines the query parameters that can be included in a request to the [ListTransactions](#endpoint-listtransactions) endpoint.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.ListTransactionsRequest.SortOrderEnum">
             <summary>
             The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`
             </summary>
             <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`</value>
            </member>
        <member name="F:Square.Connect.Model.ListTransactionsRequest.SortOrderEnum.DESC">
             <summary>
             Enum DESC for "DESC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.ListTransactionsRequest.SortOrderEnum.ASC">
             <summary>
             Enum ASC for "ASC"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsRequest.SortOrder">
             <summary>
             The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`
             </summary>
             <value>The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`</value>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.ListTransactionsRequest.SortOrderEnum},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListTransactionsRequest" /> class.
             </summary>
             <param name="BeginTime">The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year..</param>
             <param name="EndTime">The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time..</param>
             <param name="SortOrder">The order in which results are listed in the response (`ASC` for oldest first, `DESC` for newest first).  Default value: `DESC`.</param>
             <param name="Cursor">A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information..</param>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsRequest.BeginTime">
             <summary>
             The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.
             </summary>
             <value>The beginning of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time minus one year.</value>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsRequest.EndTime">
             <summary>
             The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.
             </summary>
             <value>The end of the requested reporting period, in RFC 3339 format.  See [Date ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The current time.</value>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsRequest.Cursor">
             <summary>
             A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.Equals(Square.Connect.Model.ListTransactionsRequest)">
             <summary>
             Returns true if ListTransactionsRequest instances are equal
             </summary>
             <param name="other">Instance of ListTransactionsRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.ListTransactionsResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [ListTransactions](#endpoint-listtransactions) endpoint.  One of `errors` or `transactions` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Collections.Generic.List{Square.Connect.Model.Transaction},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.ListTransactionsResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Transactions">An array of transactions that match your query..</param>
             <param name="Cursor">A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information..</param>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsResponse.Transactions">
             <summary>
             An array of transactions that match your query.
             </summary>
             <value>An array of transactions that match your query.</value>
            </member>
        <member name="P:Square.Connect.Model.ListTransactionsResponse.Cursor">
             <summary>
             A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>A pagination cursor for retrieving the next set of results, if any remain. Provide this value as the `cursor` parameter in a subsequent request to this endpoint.  See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.Equals(Square.Connect.Model.ListTransactionsResponse)">
             <summary>
             Returns true if ListTransactionsResponse instances are equal
             </summary>
             <param name="other">Instance of ListTransactionsResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.ListTransactionsResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Location">
             <summary>
             Represents one of a business's locations.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Location.CapabilitiesEnum">
             <summary>
             Gets or Sets Capabilities
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CapabilitiesEnum.PROCESSING">
             <summary>
             Enum PROCESSING for "CREDIT_CARD_PROCESSING"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Location.StatusEnum">
             <summary>
             The location's status  See [LocationStatus](#type-locationstatus) for possible values.
             </summary>
             <value>The location's status  See [LocationStatus](#type-locationstatus) for possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.Location.StatusEnum.ACTIVE">
             <summary>
             Enum ACTIVE for "ACTIVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.StatusEnum.INACTIVE">
             <summary>
             Enum INACTIVE for "INACTIVE"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Location.CountryEnum">
             <summary>
             The location's country, in ISO 3166-1-alpha-2 format.  See [Country](#type-country) for possible values.
             </summary>
             <value>The location's country, in ISO 3166-1-alpha-2 format.  See [Country](#type-country) for possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ZZ">
             <summary>
             Enum ZZ for "ZZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AD">
             <summary>
             Enum AD for "AD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AE">
             <summary>
             Enum AE for "AE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AF">
             <summary>
             Enum AF for "AF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AG">
             <summary>
             Enum AG for "AG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AI">
             <summary>
             Enum AI for "AI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AL">
             <summary>
             Enum AL for "AL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AM">
             <summary>
             Enum AM for "AM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AO">
             <summary>
             Enum AO for "AO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AQ">
             <summary>
             Enum AQ for "AQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AR">
             <summary>
             Enum AR for "AR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AS">
             <summary>
             Enum AS for "AS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AT">
             <summary>
             Enum AT for "AT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AU">
             <summary>
             Enum AU for "AU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AW">
             <summary>
             Enum AW for "AW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AX">
             <summary>
             Enum AX for "AX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.AZ">
             <summary>
             Enum AZ for "AZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BA">
             <summary>
             Enum BA for "BA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BB">
             <summary>
             Enum BB for "BB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BD">
             <summary>
             Enum BD for "BD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BE">
             <summary>
             Enum BE for "BE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BF">
             <summary>
             Enum BF for "BF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BG">
             <summary>
             Enum BG for "BG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BH">
             <summary>
             Enum BH for "BH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BI">
             <summary>
             Enum BI for "BI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BJ">
             <summary>
             Enum BJ for "BJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BL">
             <summary>
             Enum BL for "BL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BM">
             <summary>
             Enum BM for "BM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BN">
             <summary>
             Enum BN for "BN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BO">
             <summary>
             Enum BO for "BO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BQ">
             <summary>
             Enum BQ for "BQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BR">
             <summary>
             Enum BR for "BR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BS">
             <summary>
             Enum BS for "BS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BT">
             <summary>
             Enum BT for "BT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BV">
             <summary>
             Enum BV for "BV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BW">
             <summary>
             Enum BW for "BW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BY">
             <summary>
             Enum BY for "BY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.BZ">
             <summary>
             Enum BZ for "BZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CA">
             <summary>
             Enum CA for "CA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CC">
             <summary>
             Enum CC for "CC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CD">
             <summary>
             Enum CD for "CD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CF">
             <summary>
             Enum CF for "CF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CG">
             <summary>
             Enum CG for "CG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CH">
             <summary>
             Enum CH for "CH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CI">
             <summary>
             Enum CI for "CI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CK">
             <summary>
             Enum CK for "CK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CL">
             <summary>
             Enum CL for "CL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CM">
             <summary>
             Enum CM for "CM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CN">
             <summary>
             Enum CN for "CN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CO">
             <summary>
             Enum CO for "CO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CR">
             <summary>
             Enum CR for "CR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CU">
             <summary>
             Enum CU for "CU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CV">
             <summary>
             Enum CV for "CV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CW">
             <summary>
             Enum CW for "CW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CX">
             <summary>
             Enum CX for "CX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CY">
             <summary>
             Enum CY for "CY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.CZ">
             <summary>
             Enum CZ for "CZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.DE">
             <summary>
             Enum DE for "DE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.DJ">
             <summary>
             Enum DJ for "DJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.DK">
             <summary>
             Enum DK for "DK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.DM">
             <summary>
             Enum DM for "DM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.DO">
             <summary>
             Enum DO for "DO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.DZ">
             <summary>
             Enum DZ for "DZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.EC">
             <summary>
             Enum EC for "EC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.EE">
             <summary>
             Enum EE for "EE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.EG">
             <summary>
             Enum EG for "EG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.EH">
             <summary>
             Enum EH for "EH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ER">
             <summary>
             Enum ER for "ER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ES">
             <summary>
             Enum ES for "ES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ET">
             <summary>
             Enum ET for "ET"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.FI">
             <summary>
             Enum FI for "FI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.FJ">
             <summary>
             Enum FJ for "FJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.FK">
             <summary>
             Enum FK for "FK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.FM">
             <summary>
             Enum FM for "FM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.FO">
             <summary>
             Enum FO for "FO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.FR">
             <summary>
             Enum FR for "FR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GA">
             <summary>
             Enum GA for "GA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GB">
             <summary>
             Enum GB for "GB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GD">
             <summary>
             Enum GD for "GD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GE">
             <summary>
             Enum GE for "GE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GF">
             <summary>
             Enum GF for "GF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GG">
             <summary>
             Enum GG for "GG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GH">
             <summary>
             Enum GH for "GH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GI">
             <summary>
             Enum GI for "GI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GL">
             <summary>
             Enum GL for "GL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GM">
             <summary>
             Enum GM for "GM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GN">
             <summary>
             Enum GN for "GN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GP">
             <summary>
             Enum GP for "GP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GQ">
             <summary>
             Enum GQ for "GQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GR">
             <summary>
             Enum GR for "GR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GS">
             <summary>
             Enum GS for "GS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GT">
             <summary>
             Enum GT for "GT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GU">
             <summary>
             Enum GU for "GU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GW">
             <summary>
             Enum GW for "GW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.GY">
             <summary>
             Enum GY for "GY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.HK">
             <summary>
             Enum HK for "HK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.HM">
             <summary>
             Enum HM for "HM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.HN">
             <summary>
             Enum HN for "HN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.HR">
             <summary>
             Enum HR for "HR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.HT">
             <summary>
             Enum HT for "HT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.HU">
             <summary>
             Enum HU for "HU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ID">
             <summary>
             Enum ID for "ID"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IE">
             <summary>
             Enum IE for "IE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IL">
             <summary>
             Enum IL for "IL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IM">
             <summary>
             Enum IM for "IM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IN">
             <summary>
             Enum IN for "IN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IO">
             <summary>
             Enum IO for "IO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IQ">
             <summary>
             Enum IQ for "IQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IR">
             <summary>
             Enum IR for "IR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IS">
             <summary>
             Enum IS for "IS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.IT">
             <summary>
             Enum IT for "IT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.JE">
             <summary>
             Enum JE for "JE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.JM">
             <summary>
             Enum JM for "JM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.JO">
             <summary>
             Enum JO for "JO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.JP">
             <summary>
             Enum JP for "JP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KE">
             <summary>
             Enum KE for "KE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KG">
             <summary>
             Enum KG for "KG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KH">
             <summary>
             Enum KH for "KH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KI">
             <summary>
             Enum KI for "KI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KM">
             <summary>
             Enum KM for "KM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KN">
             <summary>
             Enum KN for "KN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KP">
             <summary>
             Enum KP for "KP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KR">
             <summary>
             Enum KR for "KR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KW">
             <summary>
             Enum KW for "KW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KY">
             <summary>
             Enum KY for "KY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.KZ">
             <summary>
             Enum KZ for "KZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LA">
             <summary>
             Enum LA for "LA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LB">
             <summary>
             Enum LB for "LB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LC">
             <summary>
             Enum LC for "LC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LI">
             <summary>
             Enum LI for "LI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LK">
             <summary>
             Enum LK for "LK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LR">
             <summary>
             Enum LR for "LR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LS">
             <summary>
             Enum LS for "LS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LT">
             <summary>
             Enum LT for "LT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LU">
             <summary>
             Enum LU for "LU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LV">
             <summary>
             Enum LV for "LV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.LY">
             <summary>
             Enum LY for "LY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MA">
             <summary>
             Enum MA for "MA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MC">
             <summary>
             Enum MC for "MC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MD">
             <summary>
             Enum MD for "MD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ME">
             <summary>
             Enum ME for "ME"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MF">
             <summary>
             Enum MF for "MF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MG">
             <summary>
             Enum MG for "MG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MH">
             <summary>
             Enum MH for "MH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MK">
             <summary>
             Enum MK for "MK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ML">
             <summary>
             Enum ML for "ML"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MM">
             <summary>
             Enum MM for "MM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MN">
             <summary>
             Enum MN for "MN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MO">
             <summary>
             Enum MO for "MO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MP">
             <summary>
             Enum MP for "MP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MQ">
             <summary>
             Enum MQ for "MQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MR">
             <summary>
             Enum MR for "MR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MS">
             <summary>
             Enum MS for "MS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MT">
             <summary>
             Enum MT for "MT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MU">
             <summary>
             Enum MU for "MU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MV">
             <summary>
             Enum MV for "MV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MW">
             <summary>
             Enum MW for "MW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MX">
             <summary>
             Enum MX for "MX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MY">
             <summary>
             Enum MY for "MY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.MZ">
             <summary>
             Enum MZ for "MZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NA">
             <summary>
             Enum NA for "NA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NC">
             <summary>
             Enum NC for "NC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NE">
             <summary>
             Enum NE for "NE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NF">
             <summary>
             Enum NF for "NF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NG">
             <summary>
             Enum NG for "NG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NI">
             <summary>
             Enum NI for "NI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NL">
             <summary>
             Enum NL for "NL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NO">
             <summary>
             Enum NO for "NO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NP">
             <summary>
             Enum NP for "NP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NR">
             <summary>
             Enum NR for "NR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NU">
             <summary>
             Enum NU for "NU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.NZ">
             <summary>
             Enum NZ for "NZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.OM">
             <summary>
             Enum OM for "OM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PA">
             <summary>
             Enum PA for "PA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PE">
             <summary>
             Enum PE for "PE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PF">
             <summary>
             Enum PF for "PF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PG">
             <summary>
             Enum PG for "PG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PH">
             <summary>
             Enum PH for "PH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PK">
             <summary>
             Enum PK for "PK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PL">
             <summary>
             Enum PL for "PL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PM">
             <summary>
             Enum PM for "PM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PN">
             <summary>
             Enum PN for "PN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PR">
             <summary>
             Enum PR for "PR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PS">
             <summary>
             Enum PS for "PS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PT">
             <summary>
             Enum PT for "PT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PW">
             <summary>
             Enum PW for "PW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.PY">
             <summary>
             Enum PY for "PY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.QA">
             <summary>
             Enum QA for "QA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.RE">
             <summary>
             Enum RE for "RE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.RO">
             <summary>
             Enum RO for "RO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.RS">
             <summary>
             Enum RS for "RS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.RU">
             <summary>
             Enum RU for "RU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.RW">
             <summary>
             Enum RW for "RW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SA">
             <summary>
             Enum SA for "SA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SB">
             <summary>
             Enum SB for "SB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SC">
             <summary>
             Enum SC for "SC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SD">
             <summary>
             Enum SD for "SD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SE">
             <summary>
             Enum SE for "SE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SG">
             <summary>
             Enum SG for "SG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SH">
             <summary>
             Enum SH for "SH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SI">
             <summary>
             Enum SI for "SI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SJ">
             <summary>
             Enum SJ for "SJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SK">
             <summary>
             Enum SK for "SK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SL">
             <summary>
             Enum SL for "SL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SM">
             <summary>
             Enum SM for "SM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SN">
             <summary>
             Enum SN for "SN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SO">
             <summary>
             Enum SO for "SO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SR">
             <summary>
             Enum SR for "SR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SS">
             <summary>
             Enum SS for "SS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ST">
             <summary>
             Enum ST for "ST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SV">
             <summary>
             Enum SV for "SV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SX">
             <summary>
             Enum SX for "SX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SY">
             <summary>
             Enum SY for "SY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.SZ">
             <summary>
             Enum SZ for "SZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TC">
             <summary>
             Enum TC for "TC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TD">
             <summary>
             Enum TD for "TD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TF">
             <summary>
             Enum TF for "TF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TG">
             <summary>
             Enum TG for "TG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TH">
             <summary>
             Enum TH for "TH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TJ">
             <summary>
             Enum TJ for "TJ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TK">
             <summary>
             Enum TK for "TK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TL">
             <summary>
             Enum TL for "TL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TM">
             <summary>
             Enum TM for "TM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TN">
             <summary>
             Enum TN for "TN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TO">
             <summary>
             Enum TO for "TO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TR">
             <summary>
             Enum TR for "TR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TT">
             <summary>
             Enum TT for "TT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TV">
             <summary>
             Enum TV for "TV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TW">
             <summary>
             Enum TW for "TW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.TZ">
             <summary>
             Enum TZ for "TZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.UA">
             <summary>
             Enum UA for "UA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.UG">
             <summary>
             Enum UG for "UG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.UM">
             <summary>
             Enum UM for "UM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.US">
             <summary>
             Enum US for "US"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.UY">
             <summary>
             Enum UY for "UY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.UZ">
             <summary>
             Enum UZ for "UZ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.VA">
             <summary>
             Enum VA for "VA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.VC">
             <summary>
             Enum VC for "VC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.VE">
             <summary>
             Enum VE for "VE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.VG">
             <summary>
             Enum VG for "VG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.VI">
             <summary>
             Enum VI for "VI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.VN">
             <summary>
             Enum VN for "VN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.VU">
             <summary>
             Enum VU for "VU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.WF">
             <summary>
             Enum WF for "WF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.WS">
             <summary>
             Enum WS for "WS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.YE">
             <summary>
             Enum YE for "YE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.YT">
             <summary>
             Enum YT for "YT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ZA">
             <summary>
             Enum ZA for "ZA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ZM">
             <summary>
             Enum ZM for "ZM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CountryEnum.ZW">
             <summary>
             Enum ZW for "ZW"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Location.CurrencyEnum">
             <summary>
             The currency used for all transactions at this location, specified in __ISO 4217 format__. For example, the currency for a location processing transactions in the United States is 'USD'.  See [Currency](#type-currency) for possible values.
             </summary>
             <value>The currency used for all transactions at this location, specified in __ISO 4217 format__. For example, the currency for a location processing transactions in the United States is 'USD'.  See [Currency](#type-currency) for possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.UNKNOWNCURRENCY">
             <summary>
             Enum UNKNOWNCURRENCY for "UNKNOWN_CURRENCY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.AED">
             <summary>
             Enum AED for "AED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.AFN">
             <summary>
             Enum AFN for "AFN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ALL">
             <summary>
             Enum ALL for "ALL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.AMD">
             <summary>
             Enum AMD for "AMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ANG">
             <summary>
             Enum ANG for "ANG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.AOA">
             <summary>
             Enum AOA for "AOA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ARS">
             <summary>
             Enum ARS for "ARS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.AUD">
             <summary>
             Enum AUD for "AUD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.AWG">
             <summary>
             Enum AWG for "AWG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.AZN">
             <summary>
             Enum AZN for "AZN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BAM">
             <summary>
             Enum BAM for "BAM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BBD">
             <summary>
             Enum BBD for "BBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BDT">
             <summary>
             Enum BDT for "BDT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BGN">
             <summary>
             Enum BGN for "BGN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BHD">
             <summary>
             Enum BHD for "BHD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BIF">
             <summary>
             Enum BIF for "BIF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BMD">
             <summary>
             Enum BMD for "BMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BND">
             <summary>
             Enum BND for "BND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BOB">
             <summary>
             Enum BOB for "BOB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BOV">
             <summary>
             Enum BOV for "BOV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BRL">
             <summary>
             Enum BRL for "BRL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BSD">
             <summary>
             Enum BSD for "BSD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BTN">
             <summary>
             Enum BTN for "BTN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BWP">
             <summary>
             Enum BWP for "BWP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BYR">
             <summary>
             Enum BYR for "BYR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BZD">
             <summary>
             Enum BZD for "BZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CAD">
             <summary>
             Enum CAD for "CAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CDF">
             <summary>
             Enum CDF for "CDF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CHE">
             <summary>
             Enum CHE for "CHE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CHF">
             <summary>
             Enum CHF for "CHF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CHW">
             <summary>
             Enum CHW for "CHW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CLF">
             <summary>
             Enum CLF for "CLF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CLP">
             <summary>
             Enum CLP for "CLP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CNY">
             <summary>
             Enum CNY for "CNY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.COP">
             <summary>
             Enum COP for "COP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.COU">
             <summary>
             Enum COU for "COU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CRC">
             <summary>
             Enum CRC for "CRC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CUC">
             <summary>
             Enum CUC for "CUC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CUP">
             <summary>
             Enum CUP for "CUP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CVE">
             <summary>
             Enum CVE for "CVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.CZK">
             <summary>
             Enum CZK for "CZK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.DJF">
             <summary>
             Enum DJF for "DJF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.DKK">
             <summary>
             Enum DKK for "DKK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.DOP">
             <summary>
             Enum DOP for "DOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.DZD">
             <summary>
             Enum DZD for "DZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.EGP">
             <summary>
             Enum EGP for "EGP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ERN">
             <summary>
             Enum ERN for "ERN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ETB">
             <summary>
             Enum ETB for "ETB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.EUR">
             <summary>
             Enum EUR for "EUR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.FJD">
             <summary>
             Enum FJD for "FJD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.FKP">
             <summary>
             Enum FKP for "FKP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.GBP">
             <summary>
             Enum GBP for "GBP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.GEL">
             <summary>
             Enum GEL for "GEL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.GHS">
             <summary>
             Enum GHS for "GHS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.GIP">
             <summary>
             Enum GIP for "GIP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.GMD">
             <summary>
             Enum GMD for "GMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.GNF">
             <summary>
             Enum GNF for "GNF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.GTQ">
             <summary>
             Enum GTQ for "GTQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.GYD">
             <summary>
             Enum GYD for "GYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.HKD">
             <summary>
             Enum HKD for "HKD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.HNL">
             <summary>
             Enum HNL for "HNL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.HRK">
             <summary>
             Enum HRK for "HRK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.HTG">
             <summary>
             Enum HTG for "HTG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.HUF">
             <summary>
             Enum HUF for "HUF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.IDR">
             <summary>
             Enum IDR for "IDR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ILS">
             <summary>
             Enum ILS for "ILS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.INR">
             <summary>
             Enum INR for "INR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.IQD">
             <summary>
             Enum IQD for "IQD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.IRR">
             <summary>
             Enum IRR for "IRR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ISK">
             <summary>
             Enum ISK for "ISK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.JMD">
             <summary>
             Enum JMD for "JMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.JOD">
             <summary>
             Enum JOD for "JOD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.JPY">
             <summary>
             Enum JPY for "JPY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KES">
             <summary>
             Enum KES for "KES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KGS">
             <summary>
             Enum KGS for "KGS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KHR">
             <summary>
             Enum KHR for "KHR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KMF">
             <summary>
             Enum KMF for "KMF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KPW">
             <summary>
             Enum KPW for "KPW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KRW">
             <summary>
             Enum KRW for "KRW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KWD">
             <summary>
             Enum KWD for "KWD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KYD">
             <summary>
             Enum KYD for "KYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.KZT">
             <summary>
             Enum KZT for "KZT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.LAK">
             <summary>
             Enum LAK for "LAK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.LBP">
             <summary>
             Enum LBP for "LBP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.LKR">
             <summary>
             Enum LKR for "LKR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.LRD">
             <summary>
             Enum LRD for "LRD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.LSL">
             <summary>
             Enum LSL for "LSL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.LTL">
             <summary>
             Enum LTL for "LTL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.LVL">
             <summary>
             Enum LVL for "LVL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.LYD">
             <summary>
             Enum LYD for "LYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MAD">
             <summary>
             Enum MAD for "MAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MDL">
             <summary>
             Enum MDL for "MDL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MGA">
             <summary>
             Enum MGA for "MGA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MKD">
             <summary>
             Enum MKD for "MKD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MMK">
             <summary>
             Enum MMK for "MMK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MNT">
             <summary>
             Enum MNT for "MNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MOP">
             <summary>
             Enum MOP for "MOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MRO">
             <summary>
             Enum MRO for "MRO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MUR">
             <summary>
             Enum MUR for "MUR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MVR">
             <summary>
             Enum MVR for "MVR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MWK">
             <summary>
             Enum MWK for "MWK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MXN">
             <summary>
             Enum MXN for "MXN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MXV">
             <summary>
             Enum MXV for "MXV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MYR">
             <summary>
             Enum MYR for "MYR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.MZN">
             <summary>
             Enum MZN for "MZN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.NAD">
             <summary>
             Enum NAD for "NAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.NGN">
             <summary>
             Enum NGN for "NGN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.NIO">
             <summary>
             Enum NIO for "NIO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.NOK">
             <summary>
             Enum NOK for "NOK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.NPR">
             <summary>
             Enum NPR for "NPR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.NZD">
             <summary>
             Enum NZD for "NZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.OMR">
             <summary>
             Enum OMR for "OMR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.PAB">
             <summary>
             Enum PAB for "PAB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.PEN">
             <summary>
             Enum PEN for "PEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.PGK">
             <summary>
             Enum PGK for "PGK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.PHP">
             <summary>
             Enum PHP for "PHP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.PKR">
             <summary>
             Enum PKR for "PKR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.PLN">
             <summary>
             Enum PLN for "PLN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.PYG">
             <summary>
             Enum PYG for "PYG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.QAR">
             <summary>
             Enum QAR for "QAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.RON">
             <summary>
             Enum RON for "RON"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.RSD">
             <summary>
             Enum RSD for "RSD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.RUB">
             <summary>
             Enum RUB for "RUB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.RWF">
             <summary>
             Enum RWF for "RWF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SAR">
             <summary>
             Enum SAR for "SAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SBD">
             <summary>
             Enum SBD for "SBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SCR">
             <summary>
             Enum SCR for "SCR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SDG">
             <summary>
             Enum SDG for "SDG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SEK">
             <summary>
             Enum SEK for "SEK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SGD">
             <summary>
             Enum SGD for "SGD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SHP">
             <summary>
             Enum SHP for "SHP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SLL">
             <summary>
             Enum SLL for "SLL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SOS">
             <summary>
             Enum SOS for "SOS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SRD">
             <summary>
             Enum SRD for "SRD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SSP">
             <summary>
             Enum SSP for "SSP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.STD">
             <summary>
             Enum STD for "STD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SVC">
             <summary>
             Enum SVC for "SVC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SYP">
             <summary>
             Enum SYP for "SYP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.SZL">
             <summary>
             Enum SZL for "SZL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.THB">
             <summary>
             Enum THB for "THB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.TJS">
             <summary>
             Enum TJS for "TJS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.TMT">
             <summary>
             Enum TMT for "TMT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.TND">
             <summary>
             Enum TND for "TND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.TOP">
             <summary>
             Enum TOP for "TOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.TRY">
             <summary>
             Enum TRY for "TRY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.TTD">
             <summary>
             Enum TTD for "TTD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.TWD">
             <summary>
             Enum TWD for "TWD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.TZS">
             <summary>
             Enum TZS for "TZS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.UAH">
             <summary>
             Enum UAH for "UAH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.UGX">
             <summary>
             Enum UGX for "UGX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.USD">
             <summary>
             Enum USD for "USD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.USN">
             <summary>
             Enum USN for "USN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.USS">
             <summary>
             Enum USS for "USS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.UYI">
             <summary>
             Enum UYI for "UYI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.UYU">
             <summary>
             Enum UYU for "UYU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.UZS">
             <summary>
             Enum UZS for "UZS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.VEF">
             <summary>
             Enum VEF for "VEF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.VND">
             <summary>
             Enum VND for "VND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.VUV">
             <summary>
             Enum VUV for "VUV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.WST">
             <summary>
             Enum WST for "WST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XAF">
             <summary>
             Enum XAF for "XAF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XAG">
             <summary>
             Enum XAG for "XAG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XAU">
             <summary>
             Enum XAU for "XAU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XBA">
             <summary>
             Enum XBA for "XBA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XBB">
             <summary>
             Enum XBB for "XBB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XBC">
             <summary>
             Enum XBC for "XBC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XBD">
             <summary>
             Enum XBD for "XBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XCD">
             <summary>
             Enum XCD for "XCD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XDR">
             <summary>
             Enum XDR for "XDR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XOF">
             <summary>
             Enum XOF for "XOF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XPD">
             <summary>
             Enum XPD for "XPD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XPF">
             <summary>
             Enum XPF for "XPF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XPT">
             <summary>
             Enum XPT for "XPT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XTS">
             <summary>
             Enum XTS for "XTS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.XXX">
             <summary>
             Enum XXX for "XXX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.YER">
             <summary>
             Enum YER for "YER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ZAR">
             <summary>
             Enum ZAR for "ZAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ZMK">
             <summary>
             Enum ZMK for "ZMK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.ZMW">
             <summary>
             Enum ZMW for "ZMW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.CurrencyEnum.BTC">
             <summary>
             Enum BTC for "BTC"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Location.TypeEnum">
             <summary>
             The location's type, as set by the account owner in the Square dashboard. Typically used to indicate whether or not the location object represents a physical space like a building or mall space.  See [LocationType](#type-locationtype) for possible values.
             </summary>
             <value>The location's type, as set by the account owner in the Square dashboard. Typically used to indicate whether or not the location object represents a physical space like a building or mall space.  See [LocationType](#type-locationtype) for possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.Location.TypeEnum.PHYSICAL">
             <summary>
             Enum PHYSICAL for "PHYSICAL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Location.TypeEnum.MOBILE">
             <summary>
             Enum MOBILE for "MOBILE"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Location.Capabilities">
             <summary>
             Indicates which Square features are enabled for the location.  See [LocationCapability](#type-locationcapability) for possible values.
             </summary>
             <value>Indicates which Square features are enabled for the location.  See [LocationCapability](#type-locationcapability) for possible values.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.Status">
             <summary>
             The location's status  See [LocationStatus](#type-locationstatus) for possible values.
             </summary>
             <value>The location's status  See [LocationStatus](#type-locationstatus) for possible values.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.Country">
             <summary>
             The location's country, in ISO 3166-1-alpha-2 format.  See [Country](#type-country) for possible values.
             </summary>
             <value>The location's country, in ISO 3166-1-alpha-2 format.  See [Country](#type-country) for possible values.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.Currency">
             <summary>
             The currency used for all transactions at this location, specified in __ISO 4217 format__. For example, the currency for a location processing transactions in the United States is 'USD'.  See [Currency](#type-currency) for possible values.
             </summary>
             <value>The currency used for all transactions at this location, specified in __ISO 4217 format__. For example, the currency for a location processing transactions in the United States is 'USD'.  See [Currency](#type-currency) for possible values.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.Type">
             <summary>
             The location's type, as set by the account owner in the Square dashboard. Typically used to indicate whether or not the location object represents a physical space like a building or mall space.  See [LocationType](#type-locationtype) for possible values.
             </summary>
             <value>The location's type, as set by the account owner in the Square dashboard. Typically used to indicate whether or not the location object represents a physical space like a building or mall space.  See [LocationType](#type-locationtype) for possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.Location.#ctor(System.String,System.String,Square.Connect.Model.Address,System.String,System.Collections.Generic.List{Square.Connect.Model.Location.CapabilitiesEnum},System.Nullable{Square.Connect.Model.Location.StatusEnum},System.String,System.String,System.Nullable{Square.Connect.Model.Location.CountryEnum},System.String,System.Nullable{Square.Connect.Model.Location.CurrencyEnum},System.String,System.String,System.Nullable{Square.Connect.Model.Location.TypeEnum},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Location" /> class.
             </summary>
             <param name="Id">The location's unique ID..</param>
             <param name="Name">The location's name. Location names are set by the account owner and displayed in the dashboard as the location's nickname.</param>
             <param name="Address">The location's physical address..</param>
             <param name="Timezone">The [IANA Timezone Database](https://www.iana.org/time-zones) identifier for the location's timezone..</param>
             <param name="Capabilities">Indicates which Square features are enabled for the location.  See [LocationCapability](#type-locationcapability) for possible values..</param>
             <param name="Status">The location's status  See [LocationStatus](#type-locationstatus) for possible values..</param>
             <param name="CreatedAt">The time when the location was created, in RFC 3339 format..</param>
             <param name="MerchantId">The identifier of the merchant that owns the location..</param>
             <param name="Country">The location's country, in ISO 3166-1-alpha-2 format.  See [Country](#type-country) for possible values..</param>
             <param name="LanguageCode">The language associated with the location in [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A)..</param>
             <param name="Currency">The currency used for all transactions at this location, specified in __ISO 4217 format__. For example, the currency for a location processing transactions in the United States is 'USD'.  See [Currency](#type-currency) for possible values..</param>
             <param name="PhoneNumber">The location's phone_number..</param>
             <param name="BusinessName">The location's business_name which is shown to its customers. For example, this is the name printed on its customer's receipts..</param>
             <param name="Type">The location's type, as set by the account owner in the Square dashboard. Typically used to indicate whether or not the location object represents a physical space like a building or mall space.  See [LocationType](#type-locationtype) for possible values..</param>
             <param name="WebsiteUrl">The location's website, as set by the account owner in the Square dashboard.  Default: none; only exists if explicitly set..</param>
            </member>
        <member name="P:Square.Connect.Model.Location.Id">
             <summary>
             The location's unique ID.
             </summary>
             <value>The location's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.Name">
             <summary>
             The location's name. Location names are set by the account owner and displayed in the dashboard as the location's nickname
             </summary>
             <value>The location's name. Location names are set by the account owner and displayed in the dashboard as the location's nickname</value>
            </member>
        <member name="P:Square.Connect.Model.Location.Address">
             <summary>
             The location's physical address.
             </summary>
             <value>The location's physical address.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.Timezone">
             <summary>
             The [IANA Timezone Database](https://www.iana.org/time-zones) identifier for the location's timezone.
             </summary>
             <value>The [IANA Timezone Database](https://www.iana.org/time-zones) identifier for the location's timezone.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.CreatedAt">
             <summary>
             The time when the location was created, in RFC 3339 format.
             </summary>
             <value>The time when the location was created, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.MerchantId">
             <summary>
             The identifier of the merchant that owns the location.
             </summary>
             <value>The identifier of the merchant that owns the location.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.LanguageCode">
             <summary>
             The language associated with the location in [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).
             </summary>
             <value>The language associated with the location in [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).</value>
            </member>
        <member name="P:Square.Connect.Model.Location.PhoneNumber">
             <summary>
             The location's phone_number.
             </summary>
             <value>The location's phone_number.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.BusinessName">
             <summary>
             The location's business_name which is shown to its customers. For example, this is the name printed on its customer's receipts.
             </summary>
             <value>The location's business_name which is shown to its customers. For example, this is the name printed on its customer's receipts.</value>
            </member>
        <member name="P:Square.Connect.Model.Location.WebsiteUrl">
             <summary>
             The location's website, as set by the account owner in the Square dashboard.  Default: none; only exists if explicitly set.
             </summary>
             <value>The location's website, as set by the account owner in the Square dashboard.  Default: none; only exists if explicitly set.</value>
            </member>
        <member name="M:Square.Connect.Model.Location.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Location.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Location.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Location.Equals(Square.Connect.Model.Location)">
             <summary>
             Returns true if Location instances are equal
             </summary>
             <param name="other">Instance of Location to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Location.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.LocationCapability">
             <summary>
             Indicates payment capabilities that a business's location might or might not have enabled.
             </summary>
             <value>Indicates payment capabilities that a business's location might or might not have enabled.</value>
            </member>
        <member name="F:Square.Connect.Model.LocationCapability.PROCESSING">
             <summary>
             Enum PROCESSING for "CREDIT_CARD_PROCESSING"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.LocationStatus">
             <summary>
             Indicates the location's status.
             </summary>
             <value>Indicates the location's status.</value>
            </member>
        <member name="F:Square.Connect.Model.LocationStatus.ACTIVE">
             <summary>
             Enum ACTIVE for "ACTIVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.LocationStatus.INACTIVE">
             <summary>
             Enum INACTIVE for "INACTIVE"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.LocationType">
             <summary>
             Indicates the location's type.
             </summary>
             <value>Indicates the location's type.</value>
            </member>
        <member name="F:Square.Connect.Model.LocationType.PHYSICAL">
             <summary>
             Enum PHYSICAL for "PHYSICAL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.LocationType.MOBILE">
             <summary>
             Enum MOBILE for "MOBILE"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Money">
             <summary>
             Represents an amount of money.  __Important:__ Unlike version 1 of the Connect API, __all monetary amounts returned by v2 endpoints are positive.__ (In v1, monetary amounts are negative if they represent money being paid _by_ a merchant, instead of money being paid _to_ a merchant.)
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Money.CurrencyEnum">
             <summary>
             The type of currency, in __ISO 4217 format__. For example, the currency code for US dollars is `USD`.  See [Currency](#type-currency) for possible values.
             </summary>
             <value>The type of currency, in __ISO 4217 format__. For example, the currency code for US dollars is `USD`.  See [Currency](#type-currency) for possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UNKNOWNCURRENCY">
             <summary>
             Enum UNKNOWNCURRENCY for "UNKNOWN_CURRENCY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AED">
             <summary>
             Enum AED for "AED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AFN">
             <summary>
             Enum AFN for "AFN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ALL">
             <summary>
             Enum ALL for "ALL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AMD">
             <summary>
             Enum AMD for "AMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ANG">
             <summary>
             Enum ANG for "ANG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AOA">
             <summary>
             Enum AOA for "AOA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ARS">
             <summary>
             Enum ARS for "ARS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AUD">
             <summary>
             Enum AUD for "AUD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AWG">
             <summary>
             Enum AWG for "AWG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.AZN">
             <summary>
             Enum AZN for "AZN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BAM">
             <summary>
             Enum BAM for "BAM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BBD">
             <summary>
             Enum BBD for "BBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BDT">
             <summary>
             Enum BDT for "BDT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BGN">
             <summary>
             Enum BGN for "BGN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BHD">
             <summary>
             Enum BHD for "BHD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BIF">
             <summary>
             Enum BIF for "BIF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BMD">
             <summary>
             Enum BMD for "BMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BND">
             <summary>
             Enum BND for "BND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BOB">
             <summary>
             Enum BOB for "BOB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BOV">
             <summary>
             Enum BOV for "BOV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BRL">
             <summary>
             Enum BRL for "BRL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BSD">
             <summary>
             Enum BSD for "BSD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BTN">
             <summary>
             Enum BTN for "BTN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BWP">
             <summary>
             Enum BWP for "BWP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BYR">
             <summary>
             Enum BYR for "BYR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BZD">
             <summary>
             Enum BZD for "BZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CAD">
             <summary>
             Enum CAD for "CAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CDF">
             <summary>
             Enum CDF for "CDF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CHE">
             <summary>
             Enum CHE for "CHE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CHF">
             <summary>
             Enum CHF for "CHF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CHW">
             <summary>
             Enum CHW for "CHW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CLF">
             <summary>
             Enum CLF for "CLF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CLP">
             <summary>
             Enum CLP for "CLP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CNY">
             <summary>
             Enum CNY for "CNY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.COP">
             <summary>
             Enum COP for "COP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.COU">
             <summary>
             Enum COU for "COU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CRC">
             <summary>
             Enum CRC for "CRC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CUC">
             <summary>
             Enum CUC for "CUC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CUP">
             <summary>
             Enum CUP for "CUP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CVE">
             <summary>
             Enum CVE for "CVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.CZK">
             <summary>
             Enum CZK for "CZK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.DJF">
             <summary>
             Enum DJF for "DJF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.DKK">
             <summary>
             Enum DKK for "DKK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.DOP">
             <summary>
             Enum DOP for "DOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.DZD">
             <summary>
             Enum DZD for "DZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.EGP">
             <summary>
             Enum EGP for "EGP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ERN">
             <summary>
             Enum ERN for "ERN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ETB">
             <summary>
             Enum ETB for "ETB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.EUR">
             <summary>
             Enum EUR for "EUR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.FJD">
             <summary>
             Enum FJD for "FJD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.FKP">
             <summary>
             Enum FKP for "FKP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GBP">
             <summary>
             Enum GBP for "GBP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GEL">
             <summary>
             Enum GEL for "GEL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GHS">
             <summary>
             Enum GHS for "GHS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GIP">
             <summary>
             Enum GIP for "GIP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GMD">
             <summary>
             Enum GMD for "GMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GNF">
             <summary>
             Enum GNF for "GNF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GTQ">
             <summary>
             Enum GTQ for "GTQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.GYD">
             <summary>
             Enum GYD for "GYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.HKD">
             <summary>
             Enum HKD for "HKD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.HNL">
             <summary>
             Enum HNL for "HNL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.HRK">
             <summary>
             Enum HRK for "HRK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.HTG">
             <summary>
             Enum HTG for "HTG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.HUF">
             <summary>
             Enum HUF for "HUF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.IDR">
             <summary>
             Enum IDR for "IDR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ILS">
             <summary>
             Enum ILS for "ILS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.INR">
             <summary>
             Enum INR for "INR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.IQD">
             <summary>
             Enum IQD for "IQD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.IRR">
             <summary>
             Enum IRR for "IRR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ISK">
             <summary>
             Enum ISK for "ISK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.JMD">
             <summary>
             Enum JMD for "JMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.JOD">
             <summary>
             Enum JOD for "JOD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.JPY">
             <summary>
             Enum JPY for "JPY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KES">
             <summary>
             Enum KES for "KES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KGS">
             <summary>
             Enum KGS for "KGS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KHR">
             <summary>
             Enum KHR for "KHR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KMF">
             <summary>
             Enum KMF for "KMF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KPW">
             <summary>
             Enum KPW for "KPW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KRW">
             <summary>
             Enum KRW for "KRW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KWD">
             <summary>
             Enum KWD for "KWD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KYD">
             <summary>
             Enum KYD for "KYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.KZT">
             <summary>
             Enum KZT for "KZT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LAK">
             <summary>
             Enum LAK for "LAK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LBP">
             <summary>
             Enum LBP for "LBP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LKR">
             <summary>
             Enum LKR for "LKR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LRD">
             <summary>
             Enum LRD for "LRD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LSL">
             <summary>
             Enum LSL for "LSL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LTL">
             <summary>
             Enum LTL for "LTL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LVL">
             <summary>
             Enum LVL for "LVL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.LYD">
             <summary>
             Enum LYD for "LYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MAD">
             <summary>
             Enum MAD for "MAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MDL">
             <summary>
             Enum MDL for "MDL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MGA">
             <summary>
             Enum MGA for "MGA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MKD">
             <summary>
             Enum MKD for "MKD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MMK">
             <summary>
             Enum MMK for "MMK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MNT">
             <summary>
             Enum MNT for "MNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MOP">
             <summary>
             Enum MOP for "MOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MRO">
             <summary>
             Enum MRO for "MRO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MUR">
             <summary>
             Enum MUR for "MUR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MVR">
             <summary>
             Enum MVR for "MVR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MWK">
             <summary>
             Enum MWK for "MWK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MXN">
             <summary>
             Enum MXN for "MXN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MXV">
             <summary>
             Enum MXV for "MXV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MYR">
             <summary>
             Enum MYR for "MYR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.MZN">
             <summary>
             Enum MZN for "MZN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NAD">
             <summary>
             Enum NAD for "NAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NGN">
             <summary>
             Enum NGN for "NGN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NIO">
             <summary>
             Enum NIO for "NIO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NOK">
             <summary>
             Enum NOK for "NOK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NPR">
             <summary>
             Enum NPR for "NPR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.NZD">
             <summary>
             Enum NZD for "NZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.OMR">
             <summary>
             Enum OMR for "OMR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PAB">
             <summary>
             Enum PAB for "PAB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PEN">
             <summary>
             Enum PEN for "PEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PGK">
             <summary>
             Enum PGK for "PGK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PHP">
             <summary>
             Enum PHP for "PHP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PKR">
             <summary>
             Enum PKR for "PKR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PLN">
             <summary>
             Enum PLN for "PLN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.PYG">
             <summary>
             Enum PYG for "PYG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.QAR">
             <summary>
             Enum QAR for "QAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.RON">
             <summary>
             Enum RON for "RON"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.RSD">
             <summary>
             Enum RSD for "RSD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.RUB">
             <summary>
             Enum RUB for "RUB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.RWF">
             <summary>
             Enum RWF for "RWF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SAR">
             <summary>
             Enum SAR for "SAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SBD">
             <summary>
             Enum SBD for "SBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SCR">
             <summary>
             Enum SCR for "SCR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SDG">
             <summary>
             Enum SDG for "SDG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SEK">
             <summary>
             Enum SEK for "SEK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SGD">
             <summary>
             Enum SGD for "SGD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SHP">
             <summary>
             Enum SHP for "SHP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SLL">
             <summary>
             Enum SLL for "SLL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SOS">
             <summary>
             Enum SOS for "SOS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SRD">
             <summary>
             Enum SRD for "SRD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SSP">
             <summary>
             Enum SSP for "SSP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.STD">
             <summary>
             Enum STD for "STD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SVC">
             <summary>
             Enum SVC for "SVC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SYP">
             <summary>
             Enum SYP for "SYP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.SZL">
             <summary>
             Enum SZL for "SZL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.THB">
             <summary>
             Enum THB for "THB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TJS">
             <summary>
             Enum TJS for "TJS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TMT">
             <summary>
             Enum TMT for "TMT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TND">
             <summary>
             Enum TND for "TND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TOP">
             <summary>
             Enum TOP for "TOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TRY">
             <summary>
             Enum TRY for "TRY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TTD">
             <summary>
             Enum TTD for "TTD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TWD">
             <summary>
             Enum TWD for "TWD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.TZS">
             <summary>
             Enum TZS for "TZS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UAH">
             <summary>
             Enum UAH for "UAH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UGX">
             <summary>
             Enum UGX for "UGX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.USD">
             <summary>
             Enum USD for "USD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.USN">
             <summary>
             Enum USN for "USN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.USS">
             <summary>
             Enum USS for "USS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UYI">
             <summary>
             Enum UYI for "UYI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UYU">
             <summary>
             Enum UYU for "UYU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.UZS">
             <summary>
             Enum UZS for "UZS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.VEF">
             <summary>
             Enum VEF for "VEF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.VND">
             <summary>
             Enum VND for "VND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.VUV">
             <summary>
             Enum VUV for "VUV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.WST">
             <summary>
             Enum WST for "WST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XAF">
             <summary>
             Enum XAF for "XAF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XAG">
             <summary>
             Enum XAG for "XAG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XAU">
             <summary>
             Enum XAU for "XAU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XBA">
             <summary>
             Enum XBA for "XBA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XBB">
             <summary>
             Enum XBB for "XBB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XBC">
             <summary>
             Enum XBC for "XBC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XBD">
             <summary>
             Enum XBD for "XBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XCD">
             <summary>
             Enum XCD for "XCD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XDR">
             <summary>
             Enum XDR for "XDR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XOF">
             <summary>
             Enum XOF for "XOF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XPD">
             <summary>
             Enum XPD for "XPD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XPF">
             <summary>
             Enum XPF for "XPF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XPT">
             <summary>
             Enum XPT for "XPT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XTS">
             <summary>
             Enum XTS for "XTS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.XXX">
             <summary>
             Enum XXX for "XXX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.YER">
             <summary>
             Enum YER for "YER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ZAR">
             <summary>
             Enum ZAR for "ZAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ZMK">
             <summary>
             Enum ZMK for "ZMK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.ZMW">
             <summary>
             Enum ZMW for "ZMW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Money.CurrencyEnum.BTC">
             <summary>
             Enum BTC for "BTC"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Money.Currency">
             <summary>
             The type of currency, in __ISO 4217 format__. For example, the currency code for US dollars is `USD`.  See [Currency](#type-currency) for possible values.
             </summary>
             <value>The type of currency, in __ISO 4217 format__. For example, the currency code for US dollars is `USD`.  See [Currency](#type-currency) for possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.Money.#ctor(System.Nullable{System.Int64},System.Nullable{Square.Connect.Model.Money.CurrencyEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Money" /> class.
             </summary>
             <param name="Amount">The amount of money, in the smallest denomination of the currency indicated by `currency`. For example, when `currency` is `USD`, `amount` is in cents..</param>
             <param name="Currency">The type of currency, in __ISO 4217 format__. For example, the currency code for US dollars is `USD`.  See [Currency](#type-currency) for possible values..</param>
            </member>
        <member name="P:Square.Connect.Model.Money.Amount">
             <summary>
             The amount of money, in the smallest denomination of the currency indicated by `currency`. For example, when `currency` is `USD`, `amount` is in cents.
             </summary>
             <value>The amount of money, in the smallest denomination of the currency indicated by `currency`. For example, when `currency` is `USD`, `amount` is in cents.</value>
            </member>
        <member name="M:Square.Connect.Model.Money.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Money.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Money.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Money.Equals(Square.Connect.Model.Money)">
             <summary>
             Returns true if Money instances are equal
             </summary>
             <param name="other">Instance of Money to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Money.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.Order">
             <summary>
             Contains all information related to a single order to process with Square, including line items that specify the products to purchase
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Order.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.OrderLineItem},Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Order" /> class.
             </summary>
             <param name="Id">The order's unique ID.  This value is only present for Order objects created by the Orders API through the [CreateOrder](#endpoint-createorder) endpoint..</param>
             <param name="LocationId">The ID of the merchant location this order is associated with..</param>
             <param name="ReferenceId">A client specified identifier to associate an entity in another system with this order..</param>
             <param name="LineItems">The line items included in the order. Every order has at least one line item..</param>
             <param name="TotalMoney">The total amount of money to collect for the order..</param>
             <param name="TotalTaxMoney">The total tax amount of money to collect for the order..</param>
             <param name="TotalDiscountMoney">The total discount amount of money to collect for the order..</param>
            </member>
        <member name="P:Square.Connect.Model.Order.Id">
             <summary>
             The order's unique ID.  This value is only present for Order objects created by the Orders API through the [CreateOrder](#endpoint-createorder) endpoint.
             </summary>
             <value>The order's unique ID.  This value is only present for Order objects created by the Orders API through the [CreateOrder](#endpoint-createorder) endpoint.</value>
            </member>
        <member name="P:Square.Connect.Model.Order.LocationId">
             <summary>
             The ID of the merchant location this order is associated with.
             </summary>
             <value>The ID of the merchant location this order is associated with.</value>
            </member>
        <member name="P:Square.Connect.Model.Order.ReferenceId">
             <summary>
             A client specified identifier to associate an entity in another system with this order.
             </summary>
             <value>A client specified identifier to associate an entity in another system with this order.</value>
            </member>
        <member name="P:Square.Connect.Model.Order.LineItems">
             <summary>
             The line items included in the order. Every order has at least one line item.
             </summary>
             <value>The line items included in the order. Every order has at least one line item.</value>
            </member>
        <member name="P:Square.Connect.Model.Order.TotalMoney">
             <summary>
             The total amount of money to collect for the order.
             </summary>
             <value>The total amount of money to collect for the order.</value>
            </member>
        <member name="P:Square.Connect.Model.Order.TotalTaxMoney">
             <summary>
             The total tax amount of money to collect for the order.
             </summary>
             <value>The total tax amount of money to collect for the order.</value>
            </member>
        <member name="P:Square.Connect.Model.Order.TotalDiscountMoney">
             <summary>
             The total discount amount of money to collect for the order.
             </summary>
             <value>The total discount amount of money to collect for the order.</value>
            </member>
        <member name="M:Square.Connect.Model.Order.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Order.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Order.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Order.Equals(Square.Connect.Model.Order)">
             <summary>
             Returns true if Order instances are equal
             </summary>
             <param name="other">Instance of Order to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Order.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.OrderLineItem">
             <summary>
             Represents a line item in an order. Each line item describes a different product to purchase, with its own quantity and price details.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItem.#ctor(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.OrderLineItemModifier},System.Collections.Generic.List{Square.Connect.Model.OrderLineItemTax},System.Collections.Generic.List{Square.Connect.Model.OrderLineItemDiscount},Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderLineItem" /> class.
             </summary>
             <param name="Name">The name of the line item..</param>
             <param name="Quantity">The quantity purchased, as a string representation of a number..</param>
             <param name="Note">The note of the line item..</param>
             <param name="CatalogObjectId">The [CatalogItemVariation](#type-catalogitemvariation) id applied to this line item..</param>
             <param name="VariationName">The name of the variation applied to this line item..</param>
             <param name="Modifiers">The [CatalogModifier](#type-catalogmodifier)s applied to this line item..</param>
             <param name="Taxes">The taxes applied to this line item..</param>
             <param name="Discounts">The discounts applied to this line item..</param>
             <param name="BasePriceMoney">The base price for a single unit of the line item..</param>
             <param name="GrossSalesMoney">The gross sales amount of money calculated as (item base price + modifiers price) * quantity..</param>
             <param name="TotalTaxMoney">The total tax amount of money to collect for the line item..</param>
             <param name="TotalDiscountMoney">The total discount amount of money to collect for the line item..</param>
             <param name="TotalMoney">The total amount of money to collect for this line item..</param>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.Name">
             <summary>
             The name of the line item.
             </summary>
             <value>The name of the line item.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.Quantity">
             <summary>
             The quantity purchased, as a string representation of a number.
             </summary>
             <value>The quantity purchased, as a string representation of a number.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.Note">
             <summary>
             The note of the line item.
             </summary>
             <value>The note of the line item.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.CatalogObjectId">
             <summary>
             The [CatalogItemVariation](#type-catalogitemvariation) id applied to this line item.
             </summary>
             <value>The [CatalogItemVariation](#type-catalogitemvariation) id applied to this line item.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.VariationName">
             <summary>
             The name of the variation applied to this line item.
             </summary>
             <value>The name of the variation applied to this line item.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.Modifiers">
             <summary>
             The [CatalogModifier](#type-catalogmodifier)s applied to this line item.
             </summary>
             <value>The [CatalogModifier](#type-catalogmodifier)s applied to this line item.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.Taxes">
             <summary>
             The taxes applied to this line item.
             </summary>
             <value>The taxes applied to this line item.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.Discounts">
             <summary>
             The discounts applied to this line item.
             </summary>
             <value>The discounts applied to this line item.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.BasePriceMoney">
             <summary>
             The base price for a single unit of the line item.
             </summary>
             <value>The base price for a single unit of the line item.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.GrossSalesMoney">
             <summary>
             The gross sales amount of money calculated as (item base price + modifiers price) * quantity.
             </summary>
             <value>The gross sales amount of money calculated as (item base price + modifiers price) * quantity.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.TotalTaxMoney">
             <summary>
             The total tax amount of money to collect for the line item.
             </summary>
             <value>The total tax amount of money to collect for the line item.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.TotalDiscountMoney">
             <summary>
             The total discount amount of money to collect for the line item.
             </summary>
             <value>The total discount amount of money to collect for the line item.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItem.TotalMoney">
             <summary>
             The total amount of money to collect for this line item.
             </summary>
             <value>The total amount of money to collect for this line item.</value>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItem.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItem.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItem.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItem.Equals(Square.Connect.Model.OrderLineItem)">
             <summary>
             Returns true if OrderLineItem instances are equal
             </summary>
             <param name="other">Instance of OrderLineItem to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItem.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.OrderLineItemDiscount">
             <summary>
             Represents a discount that applies to one or more line items in an order.  Fixed-amount, order-level discounts are distributed across all non-zero line item totals. The amount distributed to each line item is relative to that item’s contribution to the order subtotal.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.OrderLineItemDiscount.TypeEnum">
             <summary>
             The type of the discount. If it is created by API, it would be either `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.  VARIABLE_* is not supported in API because the order is created at the time of sale and either percentage or amount has to be specified.  See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values.
             </summary>
             <value>The type of the discount. If it is created by API, it would be either `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.  VARIABLE_* is not supported in API because the order is created at the time of sale and either percentage or amount has to be specified.  See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscount.TypeEnum.UNKNOWNDISCOUNT">
             <summary>
             Enum UNKNOWNDISCOUNT for "UNKNOWN_DISCOUNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscount.TypeEnum.FIXEDPERCENTAGE">
             <summary>
             Enum FIXEDPERCENTAGE for "FIXED_PERCENTAGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscount.TypeEnum.FIXEDAMOUNT">
             <summary>
             Enum FIXEDAMOUNT for "FIXED_AMOUNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscount.TypeEnum.VARIABLEPERCENTAGE">
             <summary>
             Enum VARIABLEPERCENTAGE for "VARIABLE_PERCENTAGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscount.TypeEnum.VARIABLEAMOUNT">
             <summary>
             Enum VARIABLEAMOUNT for "VARIABLE_AMOUNT"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.OrderLineItemDiscount.ScopeEnum">
             <summary>
             Indicates the level at which the discount applies. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values.
             </summary>
             <value>Indicates the level at which the discount applies. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscount.ScopeEnum.OTHERDISCOUNTSCOPE">
             <summary>
             Enum OTHERDISCOUNTSCOPE for "OTHER_DISCOUNT_SCOPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscount.ScopeEnum.LINEITEM">
             <summary>
             Enum LINEITEM for "LINE_ITEM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscount.ScopeEnum.ORDER">
             <summary>
             Enum ORDER for "ORDER"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItemDiscount.Type">
             <summary>
             The type of the discount. If it is created by API, it would be either `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.  VARIABLE_* is not supported in API because the order is created at the time of sale and either percentage or amount has to be specified.  See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values.
             </summary>
             <value>The type of the discount. If it is created by API, it would be either `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.  VARIABLE_* is not supported in API because the order is created at the time of sale and either percentage or amount has to be specified.  See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItemDiscount.Scope">
             <summary>
             Indicates the level at which the discount applies. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values.
             </summary>
             <value>Indicates the level at which the discount applies. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemDiscount.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.OrderLineItemDiscount.TypeEnum},System.String,Square.Connect.Model.Money,Square.Connect.Model.Money,System.Nullable{Square.Connect.Model.OrderLineItemDiscount.ScopeEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderLineItemDiscount" /> class.
             </summary>
             <param name="CatalogObjectId">The catalog object id referencing [CatalogDiscount](#type-catalogdiscount)..</param>
             <param name="Name">The discount's name..</param>
             <param name="Type">The type of the discount. If it is created by API, it would be either `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.  VARIABLE_* is not supported in API because the order is created at the time of sale and either percentage or amount has to be specified.  See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values..</param>
             <param name="Percentage">The percentage of the tax, as a string representation of a decimal number. A value of `7.25` corresponds to a percentage of 7.25%.  The percentage won't be set for an amount-based discount..</param>
             <param name="AmountMoney">The total monetary amount of the applicable discount. If it is at order level, it is the value of the order level discount. If it is at line item level, it is the value of the line item level discount.  The amount_money won't be set for a percentage-based discount..</param>
             <param name="AppliedMoney">The amount of discount actually applied to this line item.  Represents the amount of money applied to a line item as a discount When an amount-based discount is at order-level, this value is different from `amount_money` because the discount is distributed across the line items..</param>
             <param name="Scope">Indicates the level at which the discount applies. See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values..</param>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItemDiscount.CatalogObjectId">
             <summary>
             The catalog object id referencing [CatalogDiscount](#type-catalogdiscount).
             </summary>
             <value>The catalog object id referencing [CatalogDiscount](#type-catalogdiscount).</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItemDiscount.Name">
             <summary>
             The discount's name.
             </summary>
             <value>The discount's name.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItemDiscount.Percentage">
             <summary>
             The percentage of the tax, as a string representation of a decimal number. A value of `7.25` corresponds to a percentage of 7.25%.  The percentage won't be set for an amount-based discount.
             </summary>
             <value>The percentage of the tax, as a string representation of a decimal number. A value of `7.25` corresponds to a percentage of 7.25%.  The percentage won't be set for an amount-based discount.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItemDiscount.AmountMoney">
             <summary>
             The total monetary amount of the applicable discount. If it is at order level, it is the value of the order level discount. If it is at line item level, it is the value of the line item level discount.  The amount_money won't be set for a percentage-based discount.
             </summary>
             <value>The total monetary amount of the applicable discount. If it is at order level, it is the value of the order level discount. If it is at line item level, it is the value of the line item level discount.  The amount_money won't be set for a percentage-based discount.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItemDiscount.AppliedMoney">
             <summary>
             The amount of discount actually applied to this line item.  Represents the amount of money applied to a line item as a discount When an amount-based discount is at order-level, this value is different from `amount_money` because the discount is distributed across the line items.
             </summary>
             <value>The amount of discount actually applied to this line item.  Represents the amount of money applied to a line item as a discount When an amount-based discount is at order-level, this value is different from `amount_money` because the discount is distributed across the line items.</value>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemDiscount.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemDiscount.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemDiscount.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemDiscount.Equals(Square.Connect.Model.OrderLineItemDiscount)">
             <summary>
             Returns true if OrderLineItemDiscount instances are equal
             </summary>
             <param name="other">Instance of OrderLineItemDiscount to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemDiscount.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.OrderLineItemDiscountScope">
             <summary>
             Indicates whether this is a line item or order-level discount.
             </summary>
             <value>Indicates whether this is a line item or order-level discount.</value>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscountScope.OTHERDISCOUNTSCOPE">
             <summary>
             Enum OTHERDISCOUNTSCOPE for "OTHER_DISCOUNT_SCOPE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscountScope.LINEITEM">
             <summary>
             Enum LINEITEM for "LINE_ITEM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscountScope.ORDER">
             <summary>
             Enum ORDER for "ORDER"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.OrderLineItemDiscountType">
             <summary>
             Indicates how the discount is applied to the associated line item or order.
             </summary>
             <value>Indicates how the discount is applied to the associated line item or order.</value>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscountType.UNKNOWNDISCOUNT">
             <summary>
             Enum UNKNOWNDISCOUNT for "UNKNOWN_DISCOUNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscountType.FIXEDPERCENTAGE">
             <summary>
             Enum FIXEDPERCENTAGE for "FIXED_PERCENTAGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscountType.FIXEDAMOUNT">
             <summary>
             Enum FIXEDAMOUNT for "FIXED_AMOUNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscountType.VARIABLEPERCENTAGE">
             <summary>
             Enum VARIABLEPERCENTAGE for "VARIABLE_PERCENTAGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemDiscountType.VARIABLEAMOUNT">
             <summary>
             Enum VARIABLEAMOUNT for "VARIABLE_AMOUNT"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.OrderLineItemModifier">
             <summary>
             A [CatalogModifier](#type-catalogmodifier).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemModifier.#ctor(System.String,System.String,Square.Connect.Model.Money,Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderLineItemModifier" /> class.
             </summary>
             <param name="CatalogObjectId">The catalog object id referencing [CatalogModifier](#type-catalogmodifier)..</param>
             <param name="Name">The name of the item modifier..</param>
             <param name="BasePriceMoney">The base price of the item modifier..</param>
             <param name="TotalPriceMoney">The total price of the item modifier for its line item. This is the modifier's base_price_money multiplied by the line item's quantity..</param>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItemModifier.CatalogObjectId">
             <summary>
             The catalog object id referencing [CatalogModifier](#type-catalogmodifier).
             </summary>
             <value>The catalog object id referencing [CatalogModifier](#type-catalogmodifier).</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItemModifier.Name">
             <summary>
             The name of the item modifier.
             </summary>
             <value>The name of the item modifier.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItemModifier.BasePriceMoney">
             <summary>
             The base price of the item modifier.
             </summary>
             <value>The base price of the item modifier.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItemModifier.TotalPriceMoney">
             <summary>
             The total price of the item modifier for its line item. This is the modifier's base_price_money multiplied by the line item's quantity.
             </summary>
             <value>The total price of the item modifier for its line item. This is the modifier's base_price_money multiplied by the line item's quantity.</value>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemModifier.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemModifier.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemModifier.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemModifier.Equals(Square.Connect.Model.OrderLineItemModifier)">
             <summary>
             Returns true if OrderLineItemModifier instances are equal
             </summary>
             <param name="other">Instance of OrderLineItemModifier to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemModifier.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.OrderLineItemTax">
             <summary>
             Represents a tax that applies to one or more line items in an order.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.OrderLineItemTax.TypeEnum">
             <summary>
             Indicates the calculation method used to apply the tax.  See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values.
             </summary>
             <value>Indicates the calculation method used to apply the tax.  See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemTax.TypeEnum.UNKNOWNTAX">
             <summary>
             Enum UNKNOWNTAX for "UNKNOWN_TAX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemTax.TypeEnum.ADDITIVE">
             <summary>
             Enum ADDITIVE for "ADDITIVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemTax.TypeEnum.INCLUSIVE">
             <summary>
             Enum INCLUSIVE for "INCLUSIVE"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItemTax.Type">
             <summary>
             Indicates the calculation method used to apply the tax.  See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values.
             </summary>
             <value>Indicates the calculation method used to apply the tax.  See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemTax.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.OrderLineItemTax.TypeEnum},System.String,Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.OrderLineItemTax" /> class.
             </summary>
             <param name="CatalogObjectId">The catalog object id referencing [CatalogTax](#type-catalogtax)..</param>
             <param name="Name">The tax's name..</param>
             <param name="Type">Indicates the calculation method used to apply the tax.  See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values..</param>
             <param name="Percentage">The percentage of the tax, as a string representation of a decimal number.  A value of `7.25` corresponds to a percentage of 7.25%..</param>
             <param name="AppliedMoney">The amount of the money applied by the tax in an order..</param>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItemTax.CatalogObjectId">
             <summary>
             The catalog object id referencing [CatalogTax](#type-catalogtax).
             </summary>
             <value>The catalog object id referencing [CatalogTax](#type-catalogtax).</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItemTax.Name">
             <summary>
             The tax's name.
             </summary>
             <value>The tax's name.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItemTax.Percentage">
             <summary>
             The percentage of the tax, as a string representation of a decimal number.  A value of `7.25` corresponds to a percentage of 7.25%.
             </summary>
             <value>The percentage of the tax, as a string representation of a decimal number.  A value of `7.25` corresponds to a percentage of 7.25%.</value>
            </member>
        <member name="P:Square.Connect.Model.OrderLineItemTax.AppliedMoney">
             <summary>
             The amount of the money applied by the tax in an order.
             </summary>
             <value>The amount of the money applied by the tax in an order.</value>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemTax.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemTax.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemTax.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemTax.Equals(Square.Connect.Model.OrderLineItemTax)">
             <summary>
             Returns true if OrderLineItemTax instances are equal
             </summary>
             <param name="other">Instance of OrderLineItemTax to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.OrderLineItemTax.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.OrderLineItemTaxType">
             <summary>
             Indicates how the tax is applied to the associated line item or order.
             </summary>
             <value>Indicates how the tax is applied to the associated line item or order.</value>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemTaxType.UNKNOWNTAX">
             <summary>
             Enum UNKNOWNTAX for "UNKNOWN_TAX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemTaxType.ADDITIVE">
             <summary>
             Enum ADDITIVE for "ADDITIVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.OrderLineItemTaxType.INCLUSIVE">
             <summary>
             Enum INCLUSIVE for "INCLUSIVE"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Refund">
             <summary>
             Represents a refund processed for a Square transaction.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Refund.StatusEnum">
             <summary>
             The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`).
             </summary>
             <value>The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`).</value>
            </member>
        <member name="F:Square.Connect.Model.Refund.StatusEnum.PENDING">
             <summary>
             Enum PENDING for "PENDING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Refund.StatusEnum.APPROVED">
             <summary>
             Enum APPROVED for "APPROVED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Refund.StatusEnum.REJECTED">
             <summary>
             Enum REJECTED for "REJECTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Refund.StatusEnum.FAILED">
             <summary>
             Enum FAILED for "FAILED"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Refund.Status">
             <summary>
             The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`).
             </summary>
             <value>The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`).</value>
            </member>
        <member name="M:Square.Connect.Model.Refund.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Refund" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Refund.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Money,System.Nullable{Square.Connect.Model.Refund.StatusEnum},Square.Connect.Model.Money,System.Collections.Generic.List{Square.Connect.Model.AdditionalRecipient})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Refund" /> class.
             </summary>
             <param name="Id">The refund's unique ID. (required).</param>
             <param name="LocationId">The ID of the refund's associated location. (required).</param>
             <param name="TransactionId">The ID of the transaction that the refunded tender is part of. (required).</param>
             <param name="TenderId">The ID of the refunded tender. (required).</param>
             <param name="CreatedAt">The time when the refund was created, in RFC 3339 format..</param>
             <param name="Reason">The reason for the refund being issued. (required).</param>
             <param name="AmountMoney">The amount of money refunded to the buyer. (required).</param>
             <param name="Status">The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`, or `FAILED`). (required).</param>
             <param name="ProcessingFeeMoney">The amount of Square processing fee money refunded to the *merchant*..</param>
             <param name="AdditionalRecipients">Additional recipients (other than the merchant) receiving a portion of this refund. For example, fees assessed on a refund of a purchase by a third party integration..</param>
            </member>
        <member name="P:Square.Connect.Model.Refund.Id">
             <summary>
             The refund's unique ID.
             </summary>
             <value>The refund's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.LocationId">
             <summary>
             The ID of the refund's associated location.
             </summary>
             <value>The ID of the refund's associated location.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.TransactionId">
             <summary>
             The ID of the transaction that the refunded tender is part of.
             </summary>
             <value>The ID of the transaction that the refunded tender is part of.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.TenderId">
             <summary>
             The ID of the refunded tender.
             </summary>
             <value>The ID of the refunded tender.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.CreatedAt">
             <summary>
             The time when the refund was created, in RFC 3339 format.
             </summary>
             <value>The time when the refund was created, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.Reason">
             <summary>
             The reason for the refund being issued.
             </summary>
             <value>The reason for the refund being issued.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.AmountMoney">
             <summary>
             The amount of money refunded to the buyer.
             </summary>
             <value>The amount of money refunded to the buyer.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.ProcessingFeeMoney">
             <summary>
             The amount of Square processing fee money refunded to the *merchant*.
             </summary>
             <value>The amount of Square processing fee money refunded to the *merchant*.</value>
            </member>
        <member name="P:Square.Connect.Model.Refund.AdditionalRecipients">
             <summary>
             Additional recipients (other than the merchant) receiving a portion of this refund. For example, fees assessed on a refund of a purchase by a third party integration.
             </summary>
             <value>Additional recipients (other than the merchant) receiving a portion of this refund. For example, fees assessed on a refund of a purchase by a third party integration.</value>
            </member>
        <member name="M:Square.Connect.Model.Refund.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Refund.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Refund.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Refund.Equals(Square.Connect.Model.Refund)">
             <summary>
             Returns true if Refund instances are equal
             </summary>
             <param name="other">Instance of Refund to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Refund.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.RefundStatus">
             <summary>
             Indicates a refund's current status.
             </summary>
             <value>Indicates a refund's current status.</value>
            </member>
        <member name="F:Square.Connect.Model.RefundStatus.PENDING">
             <summary>
             Enum PENDING for "PENDING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.RefundStatus.APPROVED">
             <summary>
             Enum APPROVED for "APPROVED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.RefundStatus.REJECTED">
             <summary>
             Enum REJECTED for "REJECTED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.RefundStatus.FAILED">
             <summary>
             Enum FAILED for "FAILED"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.RegisterDomainRequest">
             <summary>
             Defines the parameters that can be included in the body of a request to the [RegisterDomain](#endpoint-registerdomain) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RegisterDomainRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.RegisterDomainRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RegisterDomainRequest.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.RegisterDomainRequest" /> class.
             </summary>
             <param name="DomainName">A domain name as described in RFC-1034 that will be registered with ApplePay (required).</param>
            </member>
        <member name="P:Square.Connect.Model.RegisterDomainRequest.DomainName">
             <summary>
             A domain name as described in RFC-1034 that will be registered with ApplePay
             </summary>
             <value>A domain name as described in RFC-1034 that will be registered with ApplePay</value>
            </member>
        <member name="M:Square.Connect.Model.RegisterDomainRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RegisterDomainRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RegisterDomainRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RegisterDomainRequest.Equals(Square.Connect.Model.RegisterDomainRequest)">
             <summary>
             Returns true if RegisterDomainRequest instances are equal
             </summary>
             <param name="other">Instance of RegisterDomainRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RegisterDomainRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.RegisterDomainResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [RegisterDomain](#endpoint-registerdomain) endpoint.  Either `errors` or `status` will be present in a given response (never both).
             </summary>
            </member>
        <member name="T:Square.Connect.Model.RegisterDomainResponse.StatusEnum">
             <summary>
             Status of the domain registration.  See [RegisterDomainResponseStatus](#type-registerdomainresponsestatus) for possible values.
             </summary>
             <value>Status of the domain registration.  See [RegisterDomainResponseStatus](#type-registerdomainresponsestatus) for possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.RegisterDomainResponse.StatusEnum.PENDING">
             <summary>
             Enum PENDING for "PENDING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.RegisterDomainResponse.StatusEnum.VERIFIED">
             <summary>
             Enum VERIFIED for "VERIFIED"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.RegisterDomainResponse.Status">
             <summary>
             Status of the domain registration.  See [RegisterDomainResponseStatus](#type-registerdomainresponsestatus) for possible values.
             </summary>
             <value>Status of the domain registration.  See [RegisterDomainResponseStatus](#type-registerdomainresponsestatus) for possible values.</value>
            </member>
        <member name="M:Square.Connect.Model.RegisterDomainResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.Nullable{Square.Connect.Model.RegisterDomainResponse.StatusEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.RegisterDomainResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Status">Status of the domain registration.  See [RegisterDomainResponseStatus](#type-registerdomainresponsestatus) for possible values..</param>
            </member>
        <member name="P:Square.Connect.Model.RegisterDomainResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="M:Square.Connect.Model.RegisterDomainResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RegisterDomainResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RegisterDomainResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RegisterDomainResponse.Equals(Square.Connect.Model.RegisterDomainResponse)">
             <summary>
             Returns true if RegisterDomainResponse instances are equal
             </summary>
             <param name="other">Instance of RegisterDomainResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RegisterDomainResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.RegisterDomainResponseStatus">
             <summary>
             The status of domain registration.
             </summary>
             <value>The status of domain registration.</value>
            </member>
        <member name="F:Square.Connect.Model.RegisterDomainResponseStatus.PENDING">
             <summary>
             Enum PENDING for "PENDING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.RegisterDomainResponseStatus.VERIFIED">
             <summary>
             Enum VERIFIED for "VERIFIED"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.RetrieveCatalogObjectRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectRequest.#ctor(System.Nullable{System.Boolean})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveCatalogObjectRequest" /> class.
             </summary>
             <param name="IncludeRelatedObjects">If `true`, the response will include additional objects that are related to the requested object, as follows:  If the `object` field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the response. If the `object` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of the response.  Default value: `false`.</param>
            </member>
        <member name="P:Square.Connect.Model.RetrieveCatalogObjectRequest.IncludeRelatedObjects">
             <summary>
             If `true`, the response will include additional objects that are related to the requested object, as follows:  If the `object` field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the response. If the `object` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of the response.  Default value: `false`
             </summary>
             <value>If `true`, the response will include additional objects that are related to the requested object, as follows:  If the `object` field of the response contains a [CatalogItem](#type-catalogitem), its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be returned in the `related_objects` field of the response. If the `object` field of the response contains a [CatalogItemVariation](#type-catalogitemvariation), its parent [CatalogItem](#type-catalogitem) will be returned in the `related_objects` field of the response.  Default value: `false`</value>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectRequest.Equals(Square.Connect.Model.RetrieveCatalogObjectRequest)">
             <summary>
             Returns true if RetrieveCatalogObjectRequest instances are equal
             </summary>
             <param name="other">Instance of RetrieveCatalogObjectRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.RetrieveCatalogObjectResponse">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.CatalogObject,System.Collections.Generic.List{Square.Connect.Model.CatalogObject})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveCatalogObjectResponse" /> class.
             </summary>
             <param name="Errors">The set of [Error](#type-error)s encountered..</param>
             <param name="_Object">The [CatalogObject](#type-catalogobject)s returned..</param>
             <param name="RelatedObjects">A list of [CatalogObject](#type-catalogobject)s referenced by the object in the `object` field..</param>
            </member>
        <member name="P:Square.Connect.Model.RetrieveCatalogObjectResponse.Errors">
             <summary>
             The set of [Error](#type-error)s encountered.
             </summary>
             <value>The set of [Error](#type-error)s encountered.</value>
            </member>
        <member name="P:Square.Connect.Model.RetrieveCatalogObjectResponse._Object">
             <summary>
             The [CatalogObject](#type-catalogobject)s returned.
             </summary>
             <value>The [CatalogObject](#type-catalogobject)s returned.</value>
            </member>
        <member name="P:Square.Connect.Model.RetrieveCatalogObjectResponse.RelatedObjects">
             <summary>
             A list of [CatalogObject](#type-catalogobject)s referenced by the object in the `object` field.
             </summary>
             <value>A list of [CatalogObject](#type-catalogobject)s referenced by the object in the `object` field.</value>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectResponse.Equals(Square.Connect.Model.RetrieveCatalogObjectResponse)">
             <summary>
             Returns true if RetrieveCatalogObjectResponse instances are equal
             </summary>
             <param name="other">Instance of RetrieveCatalogObjectResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCatalogObjectResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.RetrieveCustomerRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveCustomerRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.Equals(Square.Connect.Model.RetrieveCustomerRequest)">
             <summary>
             Returns true if RetrieveCustomerRequest instances are equal
             </summary>
             <param name="other">Instance of RetrieveCustomerRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.RetrieveCustomerResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [RetrieveCustomer](#endpoint-retrievecustomer) endpoint.  One of `errors` or `customer` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Customer)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveCustomerResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Customer">The requested customer..</param>
            </member>
        <member name="P:Square.Connect.Model.RetrieveCustomerResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.RetrieveCustomerResponse.Customer">
             <summary>
             The requested customer.
             </summary>
             <value>The requested customer.</value>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.Equals(Square.Connect.Model.RetrieveCustomerResponse)">
             <summary>
             Returns true if RetrieveCustomerResponse instances are equal
             </summary>
             <param name="other">Instance of RetrieveCustomerResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveCustomerResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.RetrieveTransactionRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveTransactionRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.Equals(Square.Connect.Model.RetrieveTransactionRequest)">
             <summary>
             Returns true if RetrieveTransactionRequest instances are equal
             </summary>
             <param name="other">Instance of RetrieveTransactionRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.RetrieveTransactionResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [RetrieveTransaction](#endpont-retrievetransaction) endpoint.  One of `errors` or `transaction` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Transaction)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.RetrieveTransactionResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Transaction">The requested transaction..</param>
            </member>
        <member name="P:Square.Connect.Model.RetrieveTransactionResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.RetrieveTransactionResponse.Transaction">
             <summary>
             The requested transaction.
             </summary>
             <value>The requested transaction.</value>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.Equals(Square.Connect.Model.RetrieveTransactionResponse)">
             <summary>
             Returns true if RetrieveTransactionResponse instances are equal
             </summary>
             <param name="other">Instance of RetrieveTransactionResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.RetrieveTransactionResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.SearchCatalogObjectsRequest">
             <summary>
             
             </summary>
            </member>
        <member name="T:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum">
             <summary>
             Gets or Sets ObjectTypes
             </summary>
            </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.ITEM">
             <summary>
             Enum ITEM for "ITEM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.CATEGORY">
             <summary>
             Enum CATEGORY for "CATEGORY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.ITEMVARIATION">
             <summary>
             Enum ITEMVARIATION for "ITEM_VARIATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.TAX">
             <summary>
             Enum TAX for "TAX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.DISCOUNT">
             <summary>
             Enum DISCOUNT for "DISCOUNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.MODIFIERLIST">
             <summary>
             Enum MODIFIERLIST for "MODIFIER_LIST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum.MODIFIER">
             <summary>
             Enum MODIFIER for "MODIFIER"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypes">
             <summary>
             The desired set of object types to appear in the search results. The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`.
             </summary>
             <value>The desired set of object types to appear in the search results. The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`.</value>
            </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsRequest.#ctor(System.String,System.Collections.Generic.List{Square.Connect.Model.SearchCatalogObjectsRequest.ObjectTypesEnum},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,Square.Connect.Model.CatalogQuery,System.Nullable{System.Int32})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchCatalogObjectsRequest" /> class.
             </summary>
             <param name="Cursor">The pagination cursor returned in the previous response. Leave unset for an initial request. See [Paginating results](#paginatingresults) for more information..</param>
             <param name="ObjectTypes">The desired set of object types to appear in the search results. The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`..</param>
             <param name="IncludeDeletedObjects">If `true`, deleted objects will be included in the results. Deleted objects will have their `is_deleted` field set to `true`..</param>
             <param name="IncludeRelatedObjects">If `true`, the response will include additional objects that are related to the requested object, as follows:  If a [CatalogItem](#type-catalogitem) is returned in the object field of the response, its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be included in the `related_objects` field of the response.  If a [CatalogItemVariation](#type-catalogitemvariation) is returned in the object field of the response, its parent [CatalogItem](#type-catalogitem) will be included in the `related_objects` field of the response..</param>
             <param name="BeginTime">Return objects modified after this [timestamp](#workingwithdates), in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\". The timestamp is exclusive - objects with a timestamp equal to `begin_time` will not be included in the response..</param>
             <param name="Query">A query to be used to filter or sort the results. If no query is specified, the entire catalog will be returned..</param>
             <param name="Limit">A limit on the number of results to be returned in a single page. The limit is advisory - the implementation may return more or fewer results. If the supplied limit is negative, zero, or is higher than the maximum limit of 1,000, it will be ignored..</param>
            </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsRequest.Cursor">
             <summary>
             The pagination cursor returned in the previous response. Leave unset for an initial request. See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>The pagination cursor returned in the previous response. Leave unset for an initial request. See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsRequest.IncludeDeletedObjects">
             <summary>
             If `true`, deleted objects will be included in the results. Deleted objects will have their `is_deleted` field set to `true`.
             </summary>
             <value>If `true`, deleted objects will be included in the results. Deleted objects will have their `is_deleted` field set to `true`.</value>
            </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsRequest.IncludeRelatedObjects">
             <summary>
             If `true`, the response will include additional objects that are related to the requested object, as follows:  If a [CatalogItem](#type-catalogitem) is returned in the object field of the response, its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be included in the `related_objects` field of the response.  If a [CatalogItemVariation](#type-catalogitemvariation) is returned in the object field of the response, its parent [CatalogItem](#type-catalogitem) will be included in the `related_objects` field of the response.
             </summary>
             <value>If `true`, the response will include additional objects that are related to the requested object, as follows:  If a [CatalogItem](#type-catalogitem) is returned in the object field of the response, its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be included in the `related_objects` field of the response.  If a [CatalogItemVariation](#type-catalogitemvariation) is returned in the object field of the response, its parent [CatalogItem](#type-catalogitem) will be included in the `related_objects` field of the response.</value>
            </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsRequest.BeginTime">
             <summary>
             Return objects modified after this [timestamp](#workingwithdates), in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\". The timestamp is exclusive - objects with a timestamp equal to `begin_time` will not be included in the response.
             </summary>
             <value>Return objects modified after this [timestamp](#workingwithdates), in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\". The timestamp is exclusive - objects with a timestamp equal to `begin_time` will not be included in the response.</value>
            </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsRequest.Query">
             <summary>
             A query to be used to filter or sort the results. If no query is specified, the entire catalog will be returned.
             </summary>
             <value>A query to be used to filter or sort the results. If no query is specified, the entire catalog will be returned.</value>
            </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsRequest.Limit">
             <summary>
             A limit on the number of results to be returned in a single page. The limit is advisory - the implementation may return more or fewer results. If the supplied limit is negative, zero, or is higher than the maximum limit of 1,000, it will be ignored.
             </summary>
             <value>A limit on the number of results to be returned in a single page. The limit is advisory - the implementation may return more or fewer results. If the supplied limit is negative, zero, or is higher than the maximum limit of 1,000, it will be ignored.</value>
            </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsRequest.Equals(Square.Connect.Model.SearchCatalogObjectsRequest)">
             <summary>
             Returns true if SearchCatalogObjectsRequest instances are equal
             </summary>
             <param name="other">Instance of SearchCatalogObjectsRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.SearchCatalogObjectsResponse">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.String,System.Collections.Generic.List{Square.Connect.Model.CatalogObject},System.Collections.Generic.List{Square.Connect.Model.CatalogObject})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.SearchCatalogObjectsResponse" /> class.
             </summary>
             <param name="Errors">The set of [Error](#type-error)s encountered..</param>
             <param name="Cursor">The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Paginating results](#paginatingresults) for more information..</param>
             <param name="Objects">The [CatalogObject](#type-catalogobject)s returned..</param>
             <param name="RelatedObjects">A list of [CatalogObject](#type-catalogobject)s referenced by the objects in the `objects` field..</param>
            </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsResponse.Errors">
             <summary>
             The set of [Error](#type-error)s encountered.
             </summary>
             <value>The set of [Error](#type-error)s encountered.</value>
            </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsResponse.Cursor">
             <summary>
             The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Paginating results](#paginatingresults) for more information.
             </summary>
             <value>The pagination cursor to be used in a subsequent request. If unset, this is the final response. See [Paginating results](#paginatingresults) for more information.</value>
            </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsResponse.Objects">
             <summary>
             The [CatalogObject](#type-catalogobject)s returned.
             </summary>
             <value>The [CatalogObject](#type-catalogobject)s returned.</value>
            </member>
        <member name="P:Square.Connect.Model.SearchCatalogObjectsResponse.RelatedObjects">
             <summary>
             A list of [CatalogObject](#type-catalogobject)s referenced by the objects in the `objects` field.
             </summary>
             <value>A list of [CatalogObject](#type-catalogobject)s referenced by the objects in the `objects` field.</value>
            </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsResponse.Equals(Square.Connect.Model.SearchCatalogObjectsResponse)">
             <summary>
             Returns true if SearchCatalogObjectsResponse instances are equal
             </summary>
             <param name="other">Instance of SearchCatalogObjectsResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.SearchCatalogObjectsResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.SortOrder">
             <summary>
             The order (e.g., chronological or alphabetical) in which results from a request are returned.
             </summary>
             <value>The order (e.g., chronological or alphabetical) in which results from a request are returned.</value>
            </member>
        <member name="F:Square.Connect.Model.SortOrder.DESC">
             <summary>
             Enum DESC for "DESC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.SortOrder.ASC">
             <summary>
             Enum ASC for "ASC"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.TaxCalculationPhase">
             <summary>
             When to calculate the taxes due on a cart.
             </summary>
             <value>When to calculate the taxes due on a cart.</value>
            </member>
        <member name="F:Square.Connect.Model.TaxCalculationPhase.SUBTOTALPHASE">
             <summary>
             Enum SUBTOTALPHASE for "TAX_SUBTOTAL_PHASE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TaxCalculationPhase.TOTALPHASE">
             <summary>
             Enum TOTALPHASE for "TAX_TOTAL_PHASE"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.TaxInclusionType">
             <summary>
             Whether to the tax amount should be additional to or included in to the [CatalogItem](#type-catalogitem) price.
             </summary>
             <value>Whether to the tax amount should be additional to or included in to the [CatalogItem](#type-catalogitem) price.</value>
            </member>
        <member name="F:Square.Connect.Model.TaxInclusionType.ADDITIVE">
             <summary>
             Enum ADDITIVE for "ADDITIVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TaxInclusionType.INCLUSIVE">
             <summary>
             Enum INCLUSIVE for "INCLUSIVE"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Tender">
             <summary>
             Represents a tender (i.e., a method of payment) used in a Square transaction.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Tender.TypeEnum">
             <summary>
             The type of tender, such as `CARD` or `CASH`.
             </summary>
             <value>The type of tender, such as `CARD` or `CASH`.</value>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.CARD">
             <summary>
             Enum CARD for "CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.CASH">
             <summary>
             Enum CASH for "CASH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.THIRDPARTYCARD">
             <summary>
             Enum THIRDPARTYCARD for "THIRD_PARTY_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.SQUAREGIFTCARD">
             <summary>
             Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.NOSALE">
             <summary>
             Enum NOSALE for "NO_SALE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Tender.TypeEnum.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Tender.Type">
             <summary>
             The type of tender, such as `CARD` or `CASH`.
             </summary>
             <value>The type of tender, such as `CARD` or `CASH`.</value>
            </member>
        <member name="M:Square.Connect.Model.Tender.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Tender" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.Tender.#ctor(System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Money,Square.Connect.Model.Money,Square.Connect.Model.Money,System.String,System.Nullable{Square.Connect.Model.Tender.TypeEnum},Square.Connect.Model.TenderCardDetails,Square.Connect.Model.TenderCashDetails,System.Collections.Generic.List{Square.Connect.Model.AdditionalRecipient})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Tender" /> class.
             </summary>
             <param name="Id">The tender's unique ID..</param>
             <param name="LocationId">The ID of the transaction's associated location..</param>
             <param name="TransactionId">The ID of the tender's associated transaction..</param>
             <param name="CreatedAt">The time when the tender was created, in RFC 3339 format..</param>
             <param name="Note">An optional note associated with the tender at the time of payment..</param>
             <param name="AmountMoney">The amount of the tender..</param>
             <param name="TipMoney">The tip's amount of the tender..</param>
             <param name="ProcessingFeeMoney">The amount of any Square processing fees applied to the tender.  This field is not immediately populated when a new transaction is created. It is usually available after about ten seconds..</param>
             <param name="CustomerId">If the tender is associated with a customer or represents a customer's card on file, this is the ID of the associated customer..</param>
             <param name="Type">The type of tender, such as `CARD` or `CASH`. (required).</param>
             <param name="CardDetails">The details of the card tender.  This value is present only if the value of `type` is `CARD`..</param>
             <param name="CashDetails">The details of the cash tender.  This value is present only if the value of `type` is `CASH`..</param>
             <param name="AdditionalRecipients">Additional recipients (other than the merchant) receiving a portion of this tender. For example, fees assessed on the purchase by a third party integration..</param>
            </member>
        <member name="P:Square.Connect.Model.Tender.Id">
             <summary>
             The tender's unique ID.
             </summary>
             <value>The tender's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.LocationId">
             <summary>
             The ID of the transaction's associated location.
             </summary>
             <value>The ID of the transaction's associated location.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.TransactionId">
             <summary>
             The ID of the tender's associated transaction.
             </summary>
             <value>The ID of the tender's associated transaction.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.CreatedAt">
             <summary>
             The time when the tender was created, in RFC 3339 format.
             </summary>
             <value>The time when the tender was created, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.Note">
             <summary>
             An optional note associated with the tender at the time of payment.
             </summary>
             <value>An optional note associated with the tender at the time of payment.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.AmountMoney">
             <summary>
             The amount of the tender.
             </summary>
             <value>The amount of the tender.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.TipMoney">
             <summary>
             The tip's amount of the tender.
             </summary>
             <value>The tip's amount of the tender.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.ProcessingFeeMoney">
             <summary>
             The amount of any Square processing fees applied to the tender.  This field is not immediately populated when a new transaction is created. It is usually available after about ten seconds.
             </summary>
             <value>The amount of any Square processing fees applied to the tender.  This field is not immediately populated when a new transaction is created. It is usually available after about ten seconds.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.CustomerId">
             <summary>
             If the tender is associated with a customer or represents a customer's card on file, this is the ID of the associated customer.
             </summary>
             <value>If the tender is associated with a customer or represents a customer's card on file, this is the ID of the associated customer.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.CardDetails">
             <summary>
             The details of the card tender.  This value is present only if the value of `type` is `CARD`.
             </summary>
             <value>The details of the card tender.  This value is present only if the value of `type` is `CARD`.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.CashDetails">
             <summary>
             The details of the cash tender.  This value is present only if the value of `type` is `CASH`.
             </summary>
             <value>The details of the cash tender.  This value is present only if the value of `type` is `CASH`.</value>
            </member>
        <member name="P:Square.Connect.Model.Tender.AdditionalRecipients">
             <summary>
             Additional recipients (other than the merchant) receiving a portion of this tender. For example, fees assessed on the purchase by a third party integration.
             </summary>
             <value>Additional recipients (other than the merchant) receiving a portion of this tender. For example, fees assessed on the purchase by a third party integration.</value>
            </member>
        <member name="M:Square.Connect.Model.Tender.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Tender.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Tender.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Tender.Equals(Square.Connect.Model.Tender)">
             <summary>
             Returns true if Tender instances are equal
             </summary>
             <param name="other">Instance of Tender to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Tender.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.TenderCardDetails">
             <summary>
             Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD`
             </summary>
            </member>
        <member name="T:Square.Connect.Model.TenderCardDetails.StatusEnum">
             <summary>
             The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values.
             </summary>
             <value>The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values.</value>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.StatusEnum.AUTHORIZED">
             <summary>
             Enum AUTHORIZED for "AUTHORIZED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.StatusEnum.CAPTURED">
             <summary>
             Enum CAPTURED for "CAPTURED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.StatusEnum.VOIDED">
             <summary>
             Enum VOIDED for "VOIDED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.StatusEnum.FAILED">
             <summary>
             Enum FAILED for "FAILED"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.TenderCardDetails.EntryMethodEnum">
             <summary>
             The method used to enter the card's details for the transaction.
             </summary>
             <value>The method used to enter the card's details for the transaction.</value>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.SWIPED">
             <summary>
             Enum SWIPED for "SWIPED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.KEYED">
             <summary>
             Enum KEYED for "KEYED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.EMV">
             <summary>
             Enum EMV for "EMV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.ONFILE">
             <summary>
             Enum ONFILE for "ON_FILE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetails.EntryMethodEnum.CONTACTLESS">
             <summary>
             Enum CONTACTLESS for "CONTACTLESS"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.TenderCardDetails.Status">
             <summary>
             The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values.
             </summary>
             <value>The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values.</value>
            </member>
        <member name="P:Square.Connect.Model.TenderCardDetails.EntryMethod">
             <summary>
             The method used to enter the card's details for the transaction.
             </summary>
             <value>The method used to enter the card's details for the transaction.</value>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.#ctor(System.Nullable{Square.Connect.Model.TenderCardDetails.StatusEnum},Square.Connect.Model.Card,System.Nullable{Square.Connect.Model.TenderCardDetails.EntryMethodEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.TenderCardDetails" /> class.
             </summary>
             <param name="Status">The credit card payment's current state (such as `AUTHORIZED` or `CAPTURED`). See [TenderCardDetailsStatus](#type-tendercarddetailsstatus) for possible values..</param>
             <param name="Card">The credit card's non-confidential details..</param>
             <param name="EntryMethod">The method used to enter the card's details for the transaction..</param>
            </member>
        <member name="P:Square.Connect.Model.TenderCardDetails.Card">
             <summary>
             The credit card's non-confidential details.
             </summary>
             <value>The credit card's non-confidential details.</value>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.Equals(Square.Connect.Model.TenderCardDetails)">
             <summary>
             Returns true if TenderCardDetails instances are equal
             </summary>
             <param name="other">Instance of TenderCardDetails to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCardDetails.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.TenderCardDetailsEntryMethod">
             <summary>
             Indicates the method used to enter the card's details.
             </summary>
             <value>Indicates the method used to enter the card's details.</value>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.SWIPED">
             <summary>
             Enum SWIPED for "SWIPED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.KEYED">
             <summary>
             Enum KEYED for "KEYED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.EMV">
             <summary>
             Enum EMV for "EMV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.ONFILE">
             <summary>
             Enum ONFILE for "ON_FILE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsEntryMethod.CONTACTLESS">
             <summary>
             Enum CONTACTLESS for "CONTACTLESS"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.TenderCardDetailsStatus">
             <summary>
             Indicates the card transaction's current status.
             </summary>
             <value>Indicates the card transaction's current status.</value>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsStatus.AUTHORIZED">
             <summary>
             Enum AUTHORIZED for "AUTHORIZED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsStatus.CAPTURED">
             <summary>
             Enum CAPTURED for "CAPTURED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsStatus.VOIDED">
             <summary>
             Enum VOIDED for "VOIDED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderCardDetailsStatus.FAILED">
             <summary>
             Enum FAILED for "FAILED"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.TenderCashDetails">
             <summary>
             Represents the details of a tender with `type` `CASH`.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.#ctor(Square.Connect.Model.Money,Square.Connect.Model.Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.TenderCashDetails" /> class.
             </summary>
             <param name="BuyerTenderedMoney">The total amount of cash provided by the buyer, before change is given..</param>
             <param name="ChangeBackMoney">The amount of change returned to the buyer..</param>
            </member>
        <member name="P:Square.Connect.Model.TenderCashDetails.BuyerTenderedMoney">
             <summary>
             The total amount of cash provided by the buyer, before change is given.
             </summary>
             <value>The total amount of cash provided by the buyer, before change is given.</value>
            </member>
        <member name="P:Square.Connect.Model.TenderCashDetails.ChangeBackMoney">
             <summary>
             The amount of change returned to the buyer.
             </summary>
             <value>The amount of change returned to the buyer.</value>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.Equals(Square.Connect.Model.TenderCashDetails)">
             <summary>
             Returns true if TenderCashDetails instances are equal
             </summary>
             <param name="other">Instance of TenderCashDetails to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.TenderCashDetails.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.TenderType">
             <summary>
             Indicates a tender's type.
             </summary>
             <value>Indicates a tender's type.</value>
            </member>
        <member name="F:Square.Connect.Model.TenderType.CARD">
             <summary>
             Enum CARD for "CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderType.CASH">
             <summary>
             Enum CASH for "CASH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderType.THIRDPARTYCARD">
             <summary>
             Enum THIRDPARTYCARD for "THIRD_PARTY_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderType.SQUAREGIFTCARD">
             <summary>
             Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderType.NOSALE">
             <summary>
             Enum NOSALE for "NO_SALE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TenderType.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Transaction">
             <summary>
             Represents a transaction processed with Square, either with the Connect API or with Square Point of Sale.  The `tenders` field of this object lists all methods of payment used to pay in the transaction.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.Transaction.ProductEnum">
             <summary>
             The Square product that processed the transaction.
             </summary>
             <value>The Square product that processed the transaction.</value>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.REGISTER">
             <summary>
             Enum REGISTER for "REGISTER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.EXTERNALAPI">
             <summary>
             Enum EXTERNALAPI for "EXTERNAL_API"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.BILLING">
             <summary>
             Enum BILLING for "BILLING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.APPOINTMENTS">
             <summary>
             Enum APPOINTMENTS for "APPOINTMENTS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.INVOICES">
             <summary>
             Enum INVOICES for "INVOICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.ONLINESTORE">
             <summary>
             Enum ONLINESTORE for "ONLINE_STORE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.PAYROLL">
             <summary>
             Enum PAYROLL for "PAYROLL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.Transaction.ProductEnum.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.Transaction.Product">
             <summary>
             The Square product that processed the transaction.
             </summary>
             <value>The Square product that processed the transaction.</value>
            </member>
        <member name="M:Square.Connect.Model.Transaction.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.Tender},System.Collections.Generic.List{Square.Connect.Model.Refund},System.String,System.Nullable{Square.Connect.Model.Transaction.ProductEnum},System.String,Square.Connect.Model.Address,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.Transaction" /> class.
             </summary>
             <param name="Id">The transaction's unique ID, issued by Square payments servers..</param>
             <param name="LocationId">The ID of the transaction's associated location..</param>
             <param name="CreatedAt">The time when the transaction was created, in RFC 3339 format..</param>
             <param name="Tenders">The tenders used to pay in the transaction..</param>
             <param name="Refunds">Refunds that have been applied to any tender in the transaction..</param>
             <param name="ReferenceId">If the transaction was created with the [Charge](#endpoint-charge) endpoint, this value is the same as the value provided for the `reference_id` parameter in the request to that endpoint. Otherwise, it is not set..</param>
             <param name="Product">The Square product that processed the transaction..</param>
             <param name="ClientId">If the transaction was created in the Square Point of Sale app, this value is the ID generated for the transaction by Square Point of Sale.  This ID has no relationship to the transaction's canonical `id`, which is generated by Square's backend servers. This value is generated for bookkeeping purposes, in case the transaction cannot immediately be completed (for example, if the transaction is processed in offline mode).  It is not currently possible with the Connect API to perform a transaction lookup by this value..</param>
             <param name="ShippingAddress">The shipping address provided in the request, if any..</param>
             <param name="OrderId">The order_id is an identifier for the order associated with this transaction, if any..</param>
            </member>
        <member name="P:Square.Connect.Model.Transaction.Id">
             <summary>
             The transaction's unique ID, issued by Square payments servers.
             </summary>
             <value>The transaction's unique ID, issued by Square payments servers.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.LocationId">
             <summary>
             The ID of the transaction's associated location.
             </summary>
             <value>The ID of the transaction's associated location.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.CreatedAt">
             <summary>
             The time when the transaction was created, in RFC 3339 format.
             </summary>
             <value>The time when the transaction was created, in RFC 3339 format.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.Tenders">
             <summary>
             The tenders used to pay in the transaction.
             </summary>
             <value>The tenders used to pay in the transaction.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.Refunds">
             <summary>
             Refunds that have been applied to any tender in the transaction.
             </summary>
             <value>Refunds that have been applied to any tender in the transaction.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.ReferenceId">
             <summary>
             If the transaction was created with the [Charge](#endpoint-charge) endpoint, this value is the same as the value provided for the `reference_id` parameter in the request to that endpoint. Otherwise, it is not set.
             </summary>
             <value>If the transaction was created with the [Charge](#endpoint-charge) endpoint, this value is the same as the value provided for the `reference_id` parameter in the request to that endpoint. Otherwise, it is not set.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.ClientId">
             <summary>
             If the transaction was created in the Square Point of Sale app, this value is the ID generated for the transaction by Square Point of Sale.  This ID has no relationship to the transaction's canonical `id`, which is generated by Square's backend servers. This value is generated for bookkeeping purposes, in case the transaction cannot immediately be completed (for example, if the transaction is processed in offline mode).  It is not currently possible with the Connect API to perform a transaction lookup by this value.
             </summary>
             <value>If the transaction was created in the Square Point of Sale app, this value is the ID generated for the transaction by Square Point of Sale.  This ID has no relationship to the transaction's canonical `id`, which is generated by Square's backend servers. This value is generated for bookkeeping purposes, in case the transaction cannot immediately be completed (for example, if the transaction is processed in offline mode).  It is not currently possible with the Connect API to perform a transaction lookup by this value.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.ShippingAddress">
             <summary>
             The shipping address provided in the request, if any.
             </summary>
             <value>The shipping address provided in the request, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.Transaction.OrderId">
             <summary>
             The order_id is an identifier for the order associated with this transaction, if any.
             </summary>
             <value>The order_id is an identifier for the order associated with this transaction, if any.</value>
            </member>
        <member name="M:Square.Connect.Model.Transaction.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Transaction.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.Transaction.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Transaction.Equals(Square.Connect.Model.Transaction)">
             <summary>
             Returns true if Transaction instances are equal
             </summary>
             <param name="other">Instance of Transaction to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.Transaction.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.TransactionProduct">
             <summary>
             Indicates the Square product used to process a transaction.
             </summary>
             <value>Indicates the Square product used to process a transaction.</value>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.REGISTER">
             <summary>
             Enum REGISTER for "REGISTER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.EXTERNALAPI">
             <summary>
             Enum EXTERNALAPI for "EXTERNAL_API"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.BILLING">
             <summary>
             Enum BILLING for "BILLING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.APPOINTMENTS">
             <summary>
             Enum APPOINTMENTS for "APPOINTMENTS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.INVOICES">
             <summary>
             Enum INVOICES for "INVOICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.ONLINESTORE">
             <summary>
             Enum ONLINESTORE for "ONLINE_STORE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.PAYROLL">
             <summary>
             Enum PAYROLL for "PAYROLL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.TransactionProduct.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.UpdateCustomerRequest">
             <summary>
             Defines the body parameters that can be provided in a request to the [UpdateCustomer](#endpoint-updatecustomer) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.#ctor(System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.Address,System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateCustomerRequest" /> class.
             </summary>
             <param name="GivenName">The customer's given (i.e., first) name..</param>
             <param name="FamilyName">The customer's family (i.e., last) name..</param>
             <param name="CompanyName">The name of the customer's company..</param>
             <param name="Nickname">A nickname for the customer..</param>
             <param name="EmailAddress">The customer's email address..</param>
             <param name="Address">The customer's physical address..</param>
             <param name="PhoneNumber">The customer's phone number..</param>
             <param name="ReferenceId">An optional second ID you can set to associate the customer with an entity in another system..</param>
             <param name="Note">An optional note to associate with the customer..</param>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.GivenName">
             <summary>
             The customer's given (i.e., first) name.
             </summary>
             <value>The customer's given (i.e., first) name.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.FamilyName">
             <summary>
             The customer's family (i.e., last) name.
             </summary>
             <value>The customer's family (i.e., last) name.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.CompanyName">
             <summary>
             The name of the customer's company.
             </summary>
             <value>The name of the customer's company.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.Nickname">
             <summary>
             A nickname for the customer.
             </summary>
             <value>A nickname for the customer.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.EmailAddress">
             <summary>
             The customer's email address.
             </summary>
             <value>The customer's email address.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.Address">
             <summary>
             The customer's physical address.
             </summary>
             <value>The customer's physical address.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.PhoneNumber">
             <summary>
             The customer's phone number.
             </summary>
             <value>The customer's phone number.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.ReferenceId">
             <summary>
             An optional second ID you can set to associate the customer with an entity in another system.
             </summary>
             <value>An optional second ID you can set to associate the customer with an entity in another system.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerRequest.Note">
             <summary>
             An optional note to associate with the customer.
             </summary>
             <value>An optional note to associate with the customer.</value>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.Equals(Square.Connect.Model.UpdateCustomerRequest)">
             <summary>
             Returns true if UpdateCustomerRequest instances are equal
             </summary>
             <param name="other">Instance of UpdateCustomerRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.UpdateCustomerResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [UpdateCustomer](#endpoint-updatecustomer) endpoint.  One of `errors` or `customer` is present in a given response (never both).
             </summary>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.Customer)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateCustomerResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Customer">The updated customer..</param>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateCustomerResponse.Customer">
             <summary>
             The updated customer.
             </summary>
             <value>The updated customer.</value>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.Equals(Square.Connect.Model.UpdateCustomerResponse)">
             <summary>
             Returns true if UpdateCustomerResponse instances are equal
             </summary>
             <param name="other">Instance of UpdateCustomerResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateCustomerResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.UpdateItemModifierListsRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateItemModifierListsRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsRequest.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateItemModifierListsRequest" /> class.
             </summary>
             <param name="ItemIds">The [CatalogItem](#type-catalogitem)s whose [CatalogModifierList](#type-catalogmodifierlist)s are being updated. (required).</param>
             <param name="ModifierListsToEnable">The set of [CatalogModifierList](#type-catalogmodifierlist)s (referenced by ID) to enable for the [CatalogItem](#type-catalogitem)..</param>
             <param name="ModifierListsToDisable">The set of [CatalogModifierList](#type-catalogmodifierlist)s (referenced by ID) to disable for the [CatalogItem](#type-catalogitem)..</param>
            </member>
        <member name="P:Square.Connect.Model.UpdateItemModifierListsRequest.ItemIds">
             <summary>
             The [CatalogItem](#type-catalogitem)s whose [CatalogModifierList](#type-catalogmodifierlist)s are being updated.
             </summary>
             <value>The [CatalogItem](#type-catalogitem)s whose [CatalogModifierList](#type-catalogmodifierlist)s are being updated.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateItemModifierListsRequest.ModifierListsToEnable">
             <summary>
             The set of [CatalogModifierList](#type-catalogmodifierlist)s (referenced by ID) to enable for the [CatalogItem](#type-catalogitem).
             </summary>
             <value>The set of [CatalogModifierList](#type-catalogmodifierlist)s (referenced by ID) to enable for the [CatalogItem](#type-catalogitem).</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateItemModifierListsRequest.ModifierListsToDisable">
             <summary>
             The set of [CatalogModifierList](#type-catalogmodifierlist)s (referenced by ID) to disable for the [CatalogItem](#type-catalogitem).
             </summary>
             <value>The set of [CatalogModifierList](#type-catalogmodifierlist)s (referenced by ID) to disable for the [CatalogItem](#type-catalogitem).</value>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsRequest.Equals(Square.Connect.Model.UpdateItemModifierListsRequest)">
             <summary>
             Returns true if UpdateItemModifierListsRequest instances are equal
             </summary>
             <param name="other">Instance of UpdateItemModifierListsRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.UpdateItemModifierListsResponse">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateItemModifierListsResponse" /> class.
             </summary>
             <param name="Errors">The set of [Error](#type-error)s encountered..</param>
             <param name="UpdatedAt">The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\"..</param>
            </member>
        <member name="P:Square.Connect.Model.UpdateItemModifierListsResponse.Errors">
             <summary>
             The set of [Error](#type-error)s encountered.
             </summary>
             <value>The set of [Error](#type-error)s encountered.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateItemModifierListsResponse.UpdatedAt">
             <summary>
             The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\".
             </summary>
             <value>The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\".</value>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsResponse.Equals(Square.Connect.Model.UpdateItemModifierListsResponse)">
             <summary>
             Returns true if UpdateItemModifierListsResponse instances are equal
             </summary>
             <param name="other">Instance of UpdateItemModifierListsResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemModifierListsResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.UpdateItemTaxesRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateItemTaxesRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesRequest.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateItemTaxesRequest" /> class.
             </summary>
             <param name="ItemIds">The [CatalogItem](#type-catalogitem)s whose enabled/disabled [CatalogTax](#type-catalogtax)es are being updated. (required).</param>
             <param name="TaxesToEnable">The set of [CatalogTax](#type-catalogtax)es (referenced by ID) to enable for the [CatalogItem](#type-catalogitem)..</param>
             <param name="TaxesToDisable">The set of [CatalogTax](#type-catalogtax)es (referenced by ID) to disable for the [CatalogItem](#type-catalogitem)..</param>
            </member>
        <member name="P:Square.Connect.Model.UpdateItemTaxesRequest.ItemIds">
             <summary>
             The [CatalogItem](#type-catalogitem)s whose enabled/disabled [CatalogTax](#type-catalogtax)es are being updated.
             </summary>
             <value>The [CatalogItem](#type-catalogitem)s whose enabled/disabled [CatalogTax](#type-catalogtax)es are being updated.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateItemTaxesRequest.TaxesToEnable">
             <summary>
             The set of [CatalogTax](#type-catalogtax)es (referenced by ID) to enable for the [CatalogItem](#type-catalogitem).
             </summary>
             <value>The set of [CatalogTax](#type-catalogtax)es (referenced by ID) to enable for the [CatalogItem](#type-catalogitem).</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateItemTaxesRequest.TaxesToDisable">
             <summary>
             The set of [CatalogTax](#type-catalogtax)es (referenced by ID) to disable for the [CatalogItem](#type-catalogitem).
             </summary>
             <value>The set of [CatalogTax](#type-catalogtax)es (referenced by ID) to disable for the [CatalogItem](#type-catalogitem).</value>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesRequest.Equals(Square.Connect.Model.UpdateItemTaxesRequest)">
             <summary>
             Returns true if UpdateItemTaxesRequest instances are equal
             </summary>
             <param name="other">Instance of UpdateItemTaxesRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.UpdateItemTaxesResponse">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.UpdateItemTaxesResponse" /> class.
             </summary>
             <param name="Errors">The set of [Error](#type-error)s encountered..</param>
             <param name="UpdatedAt">The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\"..</param>
            </member>
        <member name="P:Square.Connect.Model.UpdateItemTaxesResponse.Errors">
             <summary>
             The set of [Error](#type-error)s encountered.
             </summary>
             <value>The set of [Error](#type-error)s encountered.</value>
            </member>
        <member name="P:Square.Connect.Model.UpdateItemTaxesResponse.UpdatedAt">
             <summary>
             The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\".
             </summary>
             <value>The database [timestamp](#workingwithdates) of this update in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\".</value>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesResponse.Equals(Square.Connect.Model.UpdateItemTaxesResponse)">
             <summary>
             Returns true if UpdateItemTaxesResponse instances are equal
             </summary>
             <param name="other">Instance of UpdateItemTaxesResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpdateItemTaxesResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.UpsertCatalogObjectRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.UpsertCatalogObjectRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectRequest.#ctor(System.String,Square.Connect.Model.CatalogObject)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.UpsertCatalogObjectRequest" /> class.
             </summary>
             <param name="IdempotencyKey">A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you're unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency keys](#idempotencykeys) for more information. (required).</param>
             <param name="_Object">A [CatalogObject](#type-catalogobject) to be created or updated. The object's `is_deleted` field must not be set to `true`. When creating a new object, the object's ID must either start with a `#` character or be left blank. In either case it will be replaced with a server-generated ID. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.UpsertCatalogObjectRequest.IdempotencyKey">
             <summary>
             A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you're unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency keys](#idempotencykeys) for more information.
             </summary>
             <value>A value you specify that uniquely identifies this request among all your requests. A common way to create a valid idempotency key is to use a Universally unique identifier (UUID).  If you're unsure whether a particular request was successful, you can reattempt it with the same idempotency key without worrying about creating duplicate objects.  See [Idempotency keys](#idempotencykeys) for more information.</value>
            </member>
        <member name="P:Square.Connect.Model.UpsertCatalogObjectRequest._Object">
             <summary>
             A [CatalogObject](#type-catalogobject) to be created or updated. The object's `is_deleted` field must not be set to `true`. When creating a new object, the object's ID must either start with a `#` character or be left blank. In either case it will be replaced with a server-generated ID.
             </summary>
             <value>A [CatalogObject](#type-catalogobject) to be created or updated. The object's `is_deleted` field must not be set to `true`. When creating a new object, the object's ID must either start with a `#` character or be left blank. In either case it will be replaced with a server-generated ID.</value>
            </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectRequest.Equals(Square.Connect.Model.UpsertCatalogObjectRequest)">
             <summary>
             Returns true if UpsertCatalogObjectRequest instances are equal
             </summary>
             <param name="other">Instance of UpsertCatalogObjectRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.UpsertCatalogObjectResponse">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},Square.Connect.Model.CatalogObject,System.Collections.Generic.List{Square.Connect.Model.CatalogIdMapping})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.UpsertCatalogObjectResponse" /> class.
             </summary>
             <param name="Errors">The set of [Error](#type-error)s encountered..</param>
             <param name="CatalogObject">The created [CatalogObject](#type-catalogobject)..</param>
             <param name="IdMappings">The mapping between client and server IDs for this Upsert..</param>
            </member>
        <member name="P:Square.Connect.Model.UpsertCatalogObjectResponse.Errors">
             <summary>
             The set of [Error](#type-error)s encountered.
             </summary>
             <value>The set of [Error](#type-error)s encountered.</value>
            </member>
        <member name="P:Square.Connect.Model.UpsertCatalogObjectResponse.CatalogObject">
             <summary>
             The created [CatalogObject](#type-catalogobject).
             </summary>
             <value>The created [CatalogObject](#type-catalogobject).</value>
            </member>
        <member name="P:Square.Connect.Model.UpsertCatalogObjectResponse.IdMappings">
             <summary>
             The mapping between client and server IDs for this Upsert.
             </summary>
             <value>The mapping between client and server IDs for this Upsert.</value>
            </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectResponse.Equals(Square.Connect.Model.UpsertCatalogObjectResponse)">
             <summary>
             Returns true if UpsertCatalogObjectResponse instances are equal
             </summary>
             <param name="other">Instance of UpsertCatalogObjectResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.UpsertCatalogObjectResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1AdjustInventoryRequest">
             <summary>
             V1AdjustInventoryRequest
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1AdjustInventoryRequest.#ctor(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1AdjustInventoryRequest" /> class.
             </summary>
             <param name="QuantityDelta">The number to adjust the variation's quantity by..</param>
             <param name="AdjustmentType">The reason for the inventory adjustment..</param>
             <param name="Memo">A note about the inventory adjustment..</param>
            </member>
        <member name="P:Square.Connect.Model.V1AdjustInventoryRequest.QuantityDelta">
             <summary>
             The number to adjust the variation's quantity by.
             </summary>
             <value>The number to adjust the variation's quantity by.</value>
            </member>
        <member name="P:Square.Connect.Model.V1AdjustInventoryRequest.AdjustmentType">
             <summary>
             The reason for the inventory adjustment.
             </summary>
             <value>The reason for the inventory adjustment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1AdjustInventoryRequest.Memo">
             <summary>
             A note about the inventory adjustment.
             </summary>
             <value>A note about the inventory adjustment.</value>
            </member>
        <member name="M:Square.Connect.Model.V1AdjustInventoryRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1AdjustInventoryRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1AdjustInventoryRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1AdjustInventoryRequest.Equals(Square.Connect.Model.V1AdjustInventoryRequest)">
             <summary>
             Returns true if V1AdjustInventoryRequest instances are equal
             </summary>
             <param name="other">Instance of V1AdjustInventoryRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1AdjustInventoryRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1BankAccount">
             <summary>
             V1BankAccount
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1BankAccount.TypeEnum">
             <summary>
             The bank account's type (for example, savings or checking).
             </summary>
             <value>The bank account's type (for example, savings or checking).</value>
            </member>
        <member name="F:Square.Connect.Model.V1BankAccount.TypeEnum.BUSINESSCHECKING">
             <summary>
             Enum BUSINESSCHECKING for "BUSINESS_CHECKING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1BankAccount.TypeEnum.CHECKING">
             <summary>
             Enum CHECKING for "CHECKING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1BankAccount.TypeEnum.INVESTMENT">
             <summary>
             Enum INVESTMENT for "INVESTMENT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1BankAccount.TypeEnum.LOAN">
             <summary>
             Enum LOAN for "LOAN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1BankAccount.TypeEnum.SAVINGS">
             <summary>
             Enum SAVINGS for "SAVINGS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1BankAccount.TypeEnum.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1BankAccount.Type">
             <summary>
             The bank account's type (for example, savings or checking).
             </summary>
             <value>The bank account's type (for example, savings or checking).</value>
            </member>
        <member name="M:Square.Connect.Model.V1BankAccount.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{Square.Connect.Model.V1BankAccount.TypeEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1BankAccount" /> class.
             </summary>
             <param name="Id">The bank account's Square-issued ID..</param>
             <param name="MerchantId">The Square-issued ID of the merchant associated with the bank account..</param>
             <param name="BankName">The name of the bank that manages the account..</param>
             <param name="Name">The name associated with the bank account..</param>
             <param name="RoutingNumber">The bank account's routing number..</param>
             <param name="AccountNumberSuffix">The last few digits of the bank account number..</param>
             <param name="CurrencyCode">The currency code of the currency associated with the bank account, in ISO 4217 format. For example, the currency code for US dollars is USD..</param>
             <param name="Type">The bank account's type (for example, savings or checking)..</param>
            </member>
        <member name="P:Square.Connect.Model.V1BankAccount.Id">
             <summary>
             The bank account's Square-issued ID.
             </summary>
             <value>The bank account's Square-issued ID.</value>
            </member>
        <member name="P:Square.Connect.Model.V1BankAccount.MerchantId">
             <summary>
             The Square-issued ID of the merchant associated with the bank account.
             </summary>
             <value>The Square-issued ID of the merchant associated with the bank account.</value>
            </member>
        <member name="P:Square.Connect.Model.V1BankAccount.BankName">
             <summary>
             The name of the bank that manages the account.
             </summary>
             <value>The name of the bank that manages the account.</value>
            </member>
        <member name="P:Square.Connect.Model.V1BankAccount.Name">
             <summary>
             The name associated with the bank account.
             </summary>
             <value>The name associated with the bank account.</value>
            </member>
        <member name="P:Square.Connect.Model.V1BankAccount.RoutingNumber">
             <summary>
             The bank account's routing number.
             </summary>
             <value>The bank account's routing number.</value>
            </member>
        <member name="P:Square.Connect.Model.V1BankAccount.AccountNumberSuffix">
             <summary>
             The last few digits of the bank account number.
             </summary>
             <value>The last few digits of the bank account number.</value>
            </member>
        <member name="P:Square.Connect.Model.V1BankAccount.CurrencyCode">
             <summary>
             The currency code of the currency associated with the bank account, in ISO 4217 format. For example, the currency code for US dollars is USD.
             </summary>
             <value>The currency code of the currency associated with the bank account, in ISO 4217 format. For example, the currency code for US dollars is USD.</value>
            </member>
        <member name="M:Square.Connect.Model.V1BankAccount.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1BankAccount.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1BankAccount.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1BankAccount.Equals(Square.Connect.Model.V1BankAccount)">
             <summary>
             Returns true if V1BankAccount instances are equal
             </summary>
             <param name="other">Instance of V1BankAccount to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1BankAccount.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1CashDrawerEvent">
             <summary>
             V1CashDrawerEvent
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum">
             <summary>
             The type of event that occurred.
             </summary>
             <value>The type of event that occurred.</value>
            </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.NOSALE">
             <summary>
             Enum NOSALE for "NO_SALE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.CASHTENDERPAYMENT">
             <summary>
             Enum CASHTENDERPAYMENT for "CASH_TENDER_PAYMENT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.OTHERTENDERPAYMENT">
             <summary>
             Enum OTHERTENDERPAYMENT for "OTHER_TENDER_PAYMENT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.CASHTENDERCANCELEDPAYMENT">
             <summary>
             Enum CASHTENDERCANCELEDPAYMENT for "CASH_TENDER_CANCELED_PAYMENT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.OTHERTENDERCANCELEDPAYMENT">
             <summary>
             Enum OTHERTENDERCANCELEDPAYMENT for "OTHER_TENDER_CANCELED_PAYMENT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.CASHTENDERREFUND">
             <summary>
             Enum CASHTENDERREFUND for "CASH_TENDER_REFUND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.OTHERTENDERREFUND">
             <summary>
             Enum OTHERTENDERREFUND for "OTHER_TENDER_REFUND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.PAIDIN">
             <summary>
             Enum PAIDIN for "PAID_IN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum.PAIDOUT">
             <summary>
             Enum PAIDOUT for "PAID_OUT"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerEvent.EventType">
             <summary>
             The type of event that occurred.
             </summary>
             <value>The type of event that occurred.</value>
            </member>
        <member name="M:Square.Connect.Model.V1CashDrawerEvent.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.V1CashDrawerEvent.EventTypeEnum},Square.Connect.Model.V1Money,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CashDrawerEvent" /> class.
             </summary>
             <param name="Id">The event's unique ID..</param>
             <param name="EmployeeId">The ID of the employee that created the event..</param>
             <param name="EventType">The type of event that occurred..</param>
             <param name="EventMoney">The amount of money that was added to or removed from the cash drawer because of the event. This value can be positive (for added money) or negative (for removed money)..</param>
             <param name="CreatedAt">The time when the event occurred, in ISO 8601 format..</param>
             <param name="Description">An optional description of the event, entered by the employee that created it..</param>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerEvent.Id">
             <summary>
             The event's unique ID.
             </summary>
             <value>The event's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerEvent.EmployeeId">
             <summary>
             The ID of the employee that created the event.
             </summary>
             <value>The ID of the employee that created the event.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerEvent.EventMoney">
             <summary>
             The amount of money that was added to or removed from the cash drawer because of the event. This value can be positive (for added money) or negative (for removed money).
             </summary>
             <value>The amount of money that was added to or removed from the cash drawer because of the event. This value can be positive (for added money) or negative (for removed money).</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerEvent.CreatedAt">
             <summary>
             The time when the event occurred, in ISO 8601 format.
             </summary>
             <value>The time when the event occurred, in ISO 8601 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerEvent.Description">
             <summary>
             An optional description of the event, entered by the employee that created it.
             </summary>
             <value>An optional description of the event, entered by the employee that created it.</value>
            </member>
        <member name="M:Square.Connect.Model.V1CashDrawerEvent.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1CashDrawerEvent.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1CashDrawerEvent.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1CashDrawerEvent.Equals(Square.Connect.Model.V1CashDrawerEvent)">
             <summary>
             Returns true if V1CashDrawerEvent instances are equal
             </summary>
             <param name="other">Instance of V1CashDrawerEvent to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1CashDrawerEvent.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1CashDrawerShift">
             <summary>
             V1CashDrawerShift
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1CashDrawerShift.EventTypeEnum">
             <summary>
             The shift's current state.
             </summary>
             <value>The shift's current state.</value>
            </member>
        <member name="F:Square.Connect.Model.V1CashDrawerShift.EventTypeEnum.OPEN">
             <summary>
             Enum OPEN for "OPEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1CashDrawerShift.EventTypeEnum.ENDED">
             <summary>
             Enum ENDED for "ENDED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1CashDrawerShift.EventTypeEnum.CLOSED">
             <summary>
             Enum CLOSED for "CLOSED"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.EventType">
             <summary>
             The shift's current state.
             </summary>
             <value>The shift's current state.</value>
            </member>
        <member name="M:Square.Connect.Model.V1CashDrawerShift.#ctor(System.String,System.Nullable{Square.Connect.Model.V1CashDrawerShift.EventTypeEnum},System.String,System.Nullable{System.Boolean},System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.Device,System.Collections.Generic.List{Square.Connect.Model.V1CashDrawerEvent})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CashDrawerShift" /> class.
             </summary>
             <param name="Id">The shift's unique ID..</param>
             <param name="EventType">The shift's current state..</param>
             <param name="OpenedAt">The time when the shift began, in ISO 8601 format..</param>
             <param name="EndedAt">The time when the shift ended, in ISO 8601 format..</param>
             <param name="ClosedAt">The time when the shift was closed, in ISO 8601 format..</param>
             <param name="EmployeeIds">The IDs of all employees that were logged into Square Register at some point during the cash drawer shift..</param>
             <param name="OpeningEmployeeId">The ID of the employee that started the cash drawer shift..</param>
             <param name="EndingEmployeeId">The ID of the employee that ended the cash drawer shift..</param>
             <param name="ClosingEmployeeId">The ID of the employee that closed the cash drawer shift by auditing the cash drawer's contents..</param>
             <param name="Description">The time when the timecard was created, in ISO 8601 format..</param>
             <param name="StartingCashMoney">The amount of money in the cash drawer at the start of the shift..</param>
             <param name="CashPaymentMoney">The amount of money added to the cash drawer from cash payments..</param>
             <param name="CashRefundsMoney">The amount of money removed from the cash drawer from cash refunds. This value is always negative or zero..</param>
             <param name="CashPaidInMoney">The amount of money added to the cash drawer for reasons other than cash payments..</param>
             <param name="CashPaidOutMoney">The amount of money removed from the cash drawer for reasons other than cash refunds..</param>
             <param name="ExpectedCashMoney">The amount of money that should be in the cash drawer at the end of the shift, based on the shift's other money amounts..</param>
             <param name="ClosedCashMoney">The amount of money found in the cash drawer at the end of the shift by an auditing employee..</param>
             <param name="Device">The device running Square Register that was connected to the cash drawer..</param>
             <param name="Events">All of the events (payments, refunds, and so on) that involved the cash drawer during the shift..</param>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.Id">
             <summary>
             The shift's unique ID.
             </summary>
             <value>The shift's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.OpenedAt">
             <summary>
             The time when the shift began, in ISO 8601 format.
             </summary>
             <value>The time when the shift began, in ISO 8601 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.EndedAt">
             <summary>
             The time when the shift ended, in ISO 8601 format.
             </summary>
             <value>The time when the shift ended, in ISO 8601 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.ClosedAt">
             <summary>
             The time when the shift was closed, in ISO 8601 format.
             </summary>
             <value>The time when the shift was closed, in ISO 8601 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.EmployeeIds">
             <summary>
             The IDs of all employees that were logged into Square Register at some point during the cash drawer shift.
             </summary>
             <value>The IDs of all employees that were logged into Square Register at some point during the cash drawer shift.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.OpeningEmployeeId">
             <summary>
             The ID of the employee that started the cash drawer shift.
             </summary>
             <value>The ID of the employee that started the cash drawer shift.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.EndingEmployeeId">
             <summary>
             The ID of the employee that ended the cash drawer shift.
             </summary>
             <value>The ID of the employee that ended the cash drawer shift.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.ClosingEmployeeId">
             <summary>
             The ID of the employee that closed the cash drawer shift by auditing the cash drawer's contents.
             </summary>
             <value>The ID of the employee that closed the cash drawer shift by auditing the cash drawer's contents.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.Description">
             <summary>
             The time when the timecard was created, in ISO 8601 format.
             </summary>
             <value>The time when the timecard was created, in ISO 8601 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.StartingCashMoney">
             <summary>
             The amount of money in the cash drawer at the start of the shift.
             </summary>
             <value>The amount of money in the cash drawer at the start of the shift.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.CashPaymentMoney">
             <summary>
             The amount of money added to the cash drawer from cash payments.
             </summary>
             <value>The amount of money added to the cash drawer from cash payments.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.CashRefundsMoney">
             <summary>
             The amount of money removed from the cash drawer from cash refunds. This value is always negative or zero.
             </summary>
             <value>The amount of money removed from the cash drawer from cash refunds. This value is always negative or zero.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.CashPaidInMoney">
             <summary>
             The amount of money added to the cash drawer for reasons other than cash payments.
             </summary>
             <value>The amount of money added to the cash drawer for reasons other than cash payments.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.CashPaidOutMoney">
             <summary>
             The amount of money removed from the cash drawer for reasons other than cash refunds.
             </summary>
             <value>The amount of money removed from the cash drawer for reasons other than cash refunds.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.ExpectedCashMoney">
             <summary>
             The amount of money that should be in the cash drawer at the end of the shift, based on the shift's other money amounts.
             </summary>
             <value>The amount of money that should be in the cash drawer at the end of the shift, based on the shift's other money amounts.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.ClosedCashMoney">
             <summary>
             The amount of money found in the cash drawer at the end of the shift by an auditing employee.
             </summary>
             <value>The amount of money found in the cash drawer at the end of the shift by an auditing employee.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.Device">
             <summary>
             The device running Square Register that was connected to the cash drawer.
             </summary>
             <value>The device running Square Register that was connected to the cash drawer.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CashDrawerShift.Events">
             <summary>
             All of the events (payments, refunds, and so on) that involved the cash drawer during the shift.
             </summary>
             <value>All of the events (payments, refunds, and so on) that involved the cash drawer during the shift.</value>
            </member>
        <member name="M:Square.Connect.Model.V1CashDrawerShift.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1CashDrawerShift.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1CashDrawerShift.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1CashDrawerShift.Equals(Square.Connect.Model.V1CashDrawerShift)">
             <summary>
             Returns true if V1CashDrawerShift instances are equal
             </summary>
             <param name="other">Instance of V1CashDrawerShift to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1CashDrawerShift.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1Category">
             <summary>
             V1Category
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1Category.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Category" /> class.
             </summary>
             <param name="Id">The category's unique ID..</param>
             <param name="Name">The category's name..</param>
            </member>
        <member name="P:Square.Connect.Model.V1Category.Id">
             <summary>
             The category's unique ID.
             </summary>
             <value>The category's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Category.Name">
             <summary>
             The category's name.
             </summary>
             <value>The category's name.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Category.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Category.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Category.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Category.Equals(Square.Connect.Model.V1Category)">
             <summary>
             Returns true if V1Category instances are equal
             </summary>
             <param name="other">Instance of V1Category to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Category.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1CreateRefundRequest">
             <summary>
             V1CreateRefundRequest
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1CreateRefundRequest.TypeEnum">
             <summary>
             TThe type of refund (FULL or PARTIAL).
             </summary>
             <value>TThe type of refund (FULL or PARTIAL).</value>
            </member>
        <member name="F:Square.Connect.Model.V1CreateRefundRequest.TypeEnum.FULL">
             <summary>
             Enum FULL for "FULL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1CreateRefundRequest.TypeEnum.PARTIAL">
             <summary>
             Enum PARTIAL for "PARTIAL"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1CreateRefundRequest.Type">
             <summary>
             TThe type of refund (FULL or PARTIAL).
             </summary>
             <value>TThe type of refund (FULL or PARTIAL).</value>
            </member>
        <member name="M:Square.Connect.Model.V1CreateRefundRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CreateRefundRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1CreateRefundRequest.#ctor(System.String,System.Nullable{Square.Connect.Model.V1CreateRefundRequest.TypeEnum},System.String,Square.Connect.Model.V1Money,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1CreateRefundRequest" /> class.
             </summary>
             <param name="PaymentId">The ID of the payment to refund. If you're creating a PARTIAL refund for a split tender payment, instead provide the id of the particular tender you want to refund. See Split Tender Payments for details. (required).</param>
             <param name="Type">TThe type of refund (FULL or PARTIAL). (required).</param>
             <param name="Reason">The reason for the refund. (required).</param>
             <param name="RefundedMoney">The amount of money to refund. Required only for PARTIAL refunds..</param>
             <param name="RequestIdempotenceKey">An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once..</param>
            </member>
        <member name="P:Square.Connect.Model.V1CreateRefundRequest.PaymentId">
             <summary>
             The ID of the payment to refund. If you're creating a PARTIAL refund for a split tender payment, instead provide the id of the particular tender you want to refund. See Split Tender Payments for details.
             </summary>
             <value>The ID of the payment to refund. If you're creating a PARTIAL refund for a split tender payment, instead provide the id of the particular tender you want to refund. See Split Tender Payments for details.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CreateRefundRequest.Reason">
             <summary>
             The reason for the refund.
             </summary>
             <value>The reason for the refund.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CreateRefundRequest.RefundedMoney">
             <summary>
             The amount of money to refund. Required only for PARTIAL refunds.
             </summary>
             <value>The amount of money to refund. Required only for PARTIAL refunds.</value>
            </member>
        <member name="P:Square.Connect.Model.V1CreateRefundRequest.RequestIdempotenceKey">
             <summary>
             An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once.
             </summary>
             <value>An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once.</value>
            </member>
        <member name="M:Square.Connect.Model.V1CreateRefundRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1CreateRefundRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1CreateRefundRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1CreateRefundRequest.Equals(Square.Connect.Model.V1CreateRefundRequest)">
             <summary>
             Returns true if V1CreateRefundRequest instances are equal
             </summary>
             <param name="other">Instance of V1CreateRefundRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1CreateRefundRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1Discount">
             <summary>
             V1Discount
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Discount.DiscountTypeEnum">
             <summary>
             Indicates whether the discount is a FIXED value or entered at the time of sale.
             </summary>
             <value>Indicates whether the discount is a FIXED value or entered at the time of sale.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Discount.DiscountTypeEnum.FIXED">
             <summary>
             Enum FIXED for "FIXED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Discount.DiscountTypeEnum.VARIABLEPERCENTAGE">
             <summary>
             Enum VARIABLEPERCENTAGE for "VARIABLE_PERCENTAGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Discount.DiscountTypeEnum.VARIABLEAMOUNT">
             <summary>
             Enum VARIABLEAMOUNT for "VARIABLE_AMOUNT"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Discount.ColorEnum">
             <summary>
             The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6.
             </summary>
             <value>The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum._9da2a6">
             <summary>
             Enum _9da2a6 for "9da2a6"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum._4ab200">
             <summary>
             Enum _4ab200 for "4ab200"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum._0b8000">
             <summary>
             Enum _0b8000 for "0b8000"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum._2952cc">
             <summary>
             Enum _2952cc for "2952cc"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum.A82ee5">
             <summary>
             Enum A82ee5 for "a82ee5"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum.E5457a">
             <summary>
             Enum E5457a for "e5457a"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum.B21212">
             <summary>
             Enum B21212 for "b21212"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum._593c00">
             <summary>
             Enum _593c00 for "593c00"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Discount.ColorEnum.E5BF00">
             <summary>
             Enum E5BF00 for "e5BF00"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1Discount.DiscountType">
             <summary>
             Indicates whether the discount is a FIXED value or entered at the time of sale.
             </summary>
             <value>Indicates whether the discount is a FIXED value or entered at the time of sale.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Discount.Color">
             <summary>
             The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6.
             </summary>
             <value>The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Discount.#ctor(System.String,System.String,System.String,Square.Connect.Model.V1Money,System.Nullable{Square.Connect.Model.V1Discount.DiscountTypeEnum},System.Nullable{System.Boolean},System.Nullable{Square.Connect.Model.V1Discount.ColorEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Discount" /> class.
             </summary>
             <param name="Id">The discount's unique ID..</param>
             <param name="Name">The discount's name..</param>
             <param name="Rate">The rate of the discount, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. This rate is 0 if discount_type is VARIABLE_PERCENTAGE..</param>
             <param name="AmountMoney">The amount of the discount. This amount is 0 if discount_type is VARIABLE_AMOUNT. This field is not included for rate-based discounts..</param>
             <param name="DiscountType">Indicates whether the discount is a FIXED value or entered at the time of sale..</param>
             <param name="PinRequired">Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment..</param>
             <param name="Color">The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6..</param>
            </member>
        <member name="P:Square.Connect.Model.V1Discount.Id">
             <summary>
             The discount's unique ID.
             </summary>
             <value>The discount's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Discount.Name">
             <summary>
             The discount's name.
             </summary>
             <value>The discount's name.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Discount.Rate">
             <summary>
             The rate of the discount, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. This rate is 0 if discount_type is VARIABLE_PERCENTAGE.
             </summary>
             <value>The rate of the discount, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. This rate is 0 if discount_type is VARIABLE_PERCENTAGE.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Discount.AmountMoney">
             <summary>
             The amount of the discount. This amount is 0 if discount_type is VARIABLE_AMOUNT. This field is not included for rate-based discounts.
             </summary>
             <value>The amount of the discount. This amount is 0 if discount_type is VARIABLE_AMOUNT. This field is not included for rate-based discounts.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Discount.PinRequired">
             <summary>
             Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment.
             </summary>
             <value>Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Discount.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Discount.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Discount.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Discount.Equals(Square.Connect.Model.V1Discount)">
             <summary>
             Returns true if V1Discount instances are equal
             </summary>
             <param name="other">Instance of V1Discount to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Discount.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1Employee">
             <summary>
             Represents one of a business's employees.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Employee.StatusEnum">
             <summary>
             CWhether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard. 
             </summary>
             <value>CWhether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard. </value>
            </member>
        <member name="F:Square.Connect.Model.V1Employee.StatusEnum.ACTIVE">
             <summary>
             Enum ACTIVE for "ACTIVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Employee.StatusEnum.INACTIVE">
             <summary>
             Enum INACTIVE for "INACTIVE"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1Employee.Status">
             <summary>
             CWhether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard. 
             </summary>
             <value>CWhether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard. </value>
            </member>
        <member name="M:Square.Connect.Model.V1Employee.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Employee" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1Employee.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.Nullable{Square.Connect.Model.V1Employee.StatusEnum},System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Employee" /> class.
             </summary>
             <param name="Id">The employee's unique ID..</param>
             <param name="FirstName">The employee's first name. (required).</param>
             <param name="LastName">The employee's last name. (required).</param>
             <param name="RoleIds">The ids of the employee's associated roles. Currently, you can specify only one or zero roles per employee..</param>
             <param name="AuthorizedLocationIds">The IDs of the locations the employee is allowed to clock in at..</param>
             <param name="Email">The employee's email address..</param>
             <param name="Status">CWhether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard. .</param>
             <param name="ExternalId">An ID the merchant can set to associate the employee with an entity in another system..</param>
             <param name="CreatedAt">The time when the employee entity was created, in ISO 8601 format..</param>
             <param name="UpdatedAt">The time when the employee entity was most recently updated, in ISO 8601 format..</param>
            </member>
        <member name="P:Square.Connect.Model.V1Employee.Id">
             <summary>
             The employee's unique ID.
             </summary>
             <value>The employee's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Employee.FirstName">
             <summary>
             The employee's first name.
             </summary>
             <value>The employee's first name.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Employee.LastName">
             <summary>
             The employee's last name.
             </summary>
             <value>The employee's last name.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Employee.RoleIds">
             <summary>
             The ids of the employee's associated roles. Currently, you can specify only one or zero roles per employee.
             </summary>
             <value>The ids of the employee's associated roles. Currently, you can specify only one or zero roles per employee.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Employee.AuthorizedLocationIds">
             <summary>
             The IDs of the locations the employee is allowed to clock in at.
             </summary>
             <value>The IDs of the locations the employee is allowed to clock in at.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Employee.Email">
             <summary>
             The employee's email address.
             </summary>
             <value>The employee's email address.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Employee.ExternalId">
             <summary>
             An ID the merchant can set to associate the employee with an entity in another system.
             </summary>
             <value>An ID the merchant can set to associate the employee with an entity in another system.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Employee.CreatedAt">
             <summary>
             The time when the employee entity was created, in ISO 8601 format.
             </summary>
             <value>The time when the employee entity was created, in ISO 8601 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Employee.UpdatedAt">
             <summary>
             The time when the employee entity was most recently updated, in ISO 8601 format.
             </summary>
             <value>The time when the employee entity was most recently updated, in ISO 8601 format.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Employee.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Employee.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Employee.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Employee.Equals(Square.Connect.Model.V1Employee)">
             <summary>
             Returns true if V1Employee instances are equal
             </summary>
             <param name="other">Instance of V1Employee to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Employee.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1EmployeeRole">
             <summary>
             V1EmployeeRole
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1EmployeeRole.PermissionsEnum">
             <summary>
             Gets or Sets Permissions
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1EmployeeRole.PermissionsEnum.ACCESSSALESHISTORY">
             <summary>
             Enum ACCESSSALESHISTORY for "REGISTER_ACCESS_SALES_HISTORY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1EmployeeRole.PermissionsEnum.APPLYRESTRICTEDDISCOUNTS">
             <summary>
             Enum APPLYRESTRICTEDDISCOUNTS for "REGISTER_APPLY_RESTRICTED_DISCOUNTS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1EmployeeRole.PermissionsEnum.CHANGESETTINGS">
             <summary>
             Enum CHANGESETTINGS for "REGISTER_CHANGE_SETTINGS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1EmployeeRole.PermissionsEnum.EDITITEM">
             <summary>
             Enum EDITITEM for "REGISTER_EDIT_ITEM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1EmployeeRole.PermissionsEnum.ISSUEREFUNDS">
             <summary>
             Enum ISSUEREFUNDS for "REGISTER_ISSUE_REFUNDS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1EmployeeRole.PermissionsEnum.OPENCASHDRAWEROUTSIDESALE">
             <summary>
             Enum OPENCASHDRAWEROUTSIDESALE for "REGISTER_OPEN_CASH_DRAWER_OUTSIDE_SALE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1EmployeeRole.PermissionsEnum.VIEWSUMMARYREPORTS">
             <summary>
             Enum VIEWSUMMARYREPORTS for "REGISTER_VIEW_SUMMARY_REPORTS"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1EmployeeRole.Permissions">
             <summary>
             The role's permissions.
             </summary>
             <value>The role's permissions.</value>
            </member>
        <member name="M:Square.Connect.Model.V1EmployeeRole.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1EmployeeRole" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1EmployeeRole.#ctor(System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.V1EmployeeRole.PermissionsEnum},System.Nullable{System.Boolean},System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1EmployeeRole" /> class.
             </summary>
             <param name="Id">The role's unique ID, Can only be set by Square..</param>
             <param name="Name">The role's merchant-defined name. (required).</param>
             <param name="Permissions">The role's permissions. (required).</param>
             <param name="IsOwner">If true, employees with this role have all permissions, regardless of the values indicated in permissions..</param>
             <param name="CreatedAt">The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created..</param>
             <param name="UpdatedAt">The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated..</param>
            </member>
        <member name="P:Square.Connect.Model.V1EmployeeRole.Id">
             <summary>
             The role's unique ID, Can only be set by Square.
             </summary>
             <value>The role's unique ID, Can only be set by Square.</value>
            </member>
        <member name="P:Square.Connect.Model.V1EmployeeRole.Name">
             <summary>
             The role's merchant-defined name.
             </summary>
             <value>The role's merchant-defined name.</value>
            </member>
        <member name="P:Square.Connect.Model.V1EmployeeRole.IsOwner">
             <summary>
             If true, employees with this role have all permissions, regardless of the values indicated in permissions.
             </summary>
             <value>If true, employees with this role have all permissions, regardless of the values indicated in permissions.</value>
            </member>
        <member name="P:Square.Connect.Model.V1EmployeeRole.CreatedAt">
             <summary>
             The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created.
             </summary>
             <value>The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created.</value>
            </member>
        <member name="P:Square.Connect.Model.V1EmployeeRole.UpdatedAt">
             <summary>
             The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated.
             </summary>
             <value>The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated.</value>
            </member>
        <member name="M:Square.Connect.Model.V1EmployeeRole.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1EmployeeRole.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1EmployeeRole.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1EmployeeRole.Equals(Square.Connect.Model.V1EmployeeRole)">
             <summary>
             Returns true if V1EmployeeRole instances are equal
             </summary>
             <param name="other">Instance of V1EmployeeRole to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1EmployeeRole.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1Fee">
             <summary>
             V1Fee
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Fee.CalculationPhaseEnum">
             <summary>
             Forthcoming
             </summary>
             <value>Forthcoming</value>
            </member>
        <member name="F:Square.Connect.Model.V1Fee.CalculationPhaseEnum.FEESUBTOTALPHASE">
             <summary>
             Enum FEESUBTOTALPHASE for "FEE_SUBTOTAL_PHASE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Fee.CalculationPhaseEnum.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Fee.CalculationPhaseEnum.FEETOTALPHASE">
             <summary>
             Enum FEETOTALPHASE for "FEE_TOTAL_PHASE"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Fee.AdjustmentTypeEnum">
             <summary>
             The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees.
             </summary>
             <value>The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Fee.AdjustmentTypeEnum.TAX">
             <summary>
             Enum TAX for "TAX"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Fee.InclusionTypeEnum">
             <summary>
             Whether the fee is ADDITIVE or INCLUSIVE.
             </summary>
             <value>Whether the fee is ADDITIVE or INCLUSIVE.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Fee.InclusionTypeEnum.ADDITIVE">
             <summary>
             Enum ADDITIVE for "ADDITIVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Fee.InclusionTypeEnum.INCLUSIVE">
             <summary>
             Enum INCLUSIVE for "INCLUSIVE"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Fee.TypeEnum">
             <summary>
             In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants.
             </summary>
             <value>In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Fee.TypeEnum.CAGST">
             <summary>
             Enum CAGST for "CA_GST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Fee.TypeEnum.CAHST">
             <summary>
             Enum CAHST for "CA_HST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Fee.TypeEnum.CAPST">
             <summary>
             Enum CAPST for "CA_PST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Fee.TypeEnum.CAQST">
             <summary>
             Enum CAQST for "CA_QST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Fee.TypeEnum.JPCONSUMPTIONTAX">
             <summary>
             Enum JPCONSUMPTIONTAX for "JP_CONSUMPTION_TAX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Fee.TypeEnum.CAPEIPST">
             <summary>
             Enum CAPEIPST for "CA_PEI_PST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Fee.TypeEnum.USSALESTAX">
             <summary>
             Enum USSALESTAX for "US_SALES_TAX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Fee.TypeEnum.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1Fee.CalculationPhase">
             <summary>
             Forthcoming
             </summary>
             <value>Forthcoming</value>
            </member>
        <member name="P:Square.Connect.Model.V1Fee.AdjustmentType">
             <summary>
             The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees.
             </summary>
             <value>The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Fee.InclusionType">
             <summary>
             Whether the fee is ADDITIVE or INCLUSIVE.
             </summary>
             <value>Whether the fee is ADDITIVE or INCLUSIVE.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Fee.Type">
             <summary>
             In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants.
             </summary>
             <value>In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Fee.#ctor(System.String,System.String,System.String,System.Nullable{Square.Connect.Model.V1Fee.CalculationPhaseEnum},System.Nullable{Square.Connect.Model.V1Fee.AdjustmentTypeEnum},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Square.Connect.Model.V1Fee.InclusionTypeEnum},System.Nullable{Square.Connect.Model.V1Fee.TypeEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Fee" /> class.
             </summary>
             <param name="Id">The fee's unique ID..</param>
             <param name="Name">The fee's name..</param>
             <param name="Rate">The rate of the fee, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%..</param>
             <param name="CalculationPhase">Forthcoming.</param>
             <param name="AdjustmentType">The type of adjustment the fee applies to a payment. Currently, this value is TAX for all fees..</param>
             <param name="AppliesToCustomAmounts">If true, the fee applies to custom amounts entered into Square Register that are not associated with a particular item..</param>
             <param name="Enabled">If true, the fee is applied to all appropriate items. If false, the fee is not applied at all..</param>
             <param name="InclusionType">Whether the fee is ADDITIVE or INCLUSIVE..</param>
             <param name="Type">In countries with multiple classifications for sales taxes, indicates which classification the fee falls under. Currently relevant only to Canadian merchants..</param>
            </member>
        <member name="P:Square.Connect.Model.V1Fee.Id">
             <summary>
             The fee's unique ID.
             </summary>
             <value>The fee's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Fee.Name">
             <summary>
             The fee's name.
             </summary>
             <value>The fee's name.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Fee.Rate">
             <summary>
             The rate of the fee, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
             </summary>
             <value>The rate of the fee, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Fee.AppliesToCustomAmounts">
             <summary>
             If true, the fee applies to custom amounts entered into Square Register that are not associated with a particular item.
             </summary>
             <value>If true, the fee applies to custom amounts entered into Square Register that are not associated with a particular item.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Fee.Enabled">
             <summary>
             If true, the fee is applied to all appropriate items. If false, the fee is not applied at all.
             </summary>
             <value>If true, the fee is applied to all appropriate items. If false, the fee is not applied at all.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Fee.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Fee.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Fee.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Fee.Equals(Square.Connect.Model.V1Fee)">
             <summary>
             Returns true if V1Fee instances are equal
             </summary>
             <param name="other">Instance of V1Fee to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Fee.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1InventoryEntry">
             <summary>
             V1InventoryEntry
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1InventoryEntry.#ctor(System.String,System.Nullable{System.Decimal})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1InventoryEntry" /> class.
             </summary>
             <param name="VariationId">The variation that the entry corresponds to..</param>
             <param name="QuantityOnHand">The current available quantity of the item variation..</param>
            </member>
        <member name="P:Square.Connect.Model.V1InventoryEntry.VariationId">
             <summary>
             The variation that the entry corresponds to.
             </summary>
             <value>The variation that the entry corresponds to.</value>
            </member>
        <member name="P:Square.Connect.Model.V1InventoryEntry.QuantityOnHand">
             <summary>
             The current available quantity of the item variation.
             </summary>
             <value>The current available quantity of the item variation.</value>
            </member>
        <member name="M:Square.Connect.Model.V1InventoryEntry.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1InventoryEntry.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1InventoryEntry.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1InventoryEntry.Equals(Square.Connect.Model.V1InventoryEntry)">
             <summary>
             Returns true if V1InventoryEntry instances are equal
             </summary>
             <param name="other">Instance of V1InventoryEntry to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1InventoryEntry.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1Item">
             <summary>
             V1Item
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Item.TypeEnum">
             <summary>
             The item's type. This value is NORMAL for almost all items.
             </summary>
             <value>The item's type. This value is NORMAL for almost all items.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Item.TypeEnum.NORMAL">
             <summary>
             Enum NORMAL for "NORMAL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Item.TypeEnum.GIFTCARD">
             <summary>
             Enum GIFTCARD for "GIFT_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Item.TypeEnum.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Item.ColorEnum">
             <summary>
             The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6.
             </summary>
             <value>The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum._9da2a6">
             <summary>
             Enum _9da2a6 for "9da2a6"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum._4ab200">
             <summary>
             Enum _4ab200 for "4ab200"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum._0b8000">
             <summary>
             Enum _0b8000 for "0b8000"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum._2952cc">
             <summary>
             Enum _2952cc for "2952cc"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum.A82ee5">
             <summary>
             Enum A82ee5 for "a82ee5"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum.E5457a">
             <summary>
             Enum E5457a for "e5457a"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum.B21212">
             <summary>
             Enum B21212 for "b21212"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum._593c00">
             <summary>
             Enum _593c00 for "593c00"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Item.ColorEnum.E5BF00">
             <summary>
             Enum E5BF00 for "e5BF00"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Item.VisibilityEnum">
             <summary>
             Indicates whether the item is viewable from the merchant's online store (PUBLIC) or PRIVATE.
             </summary>
             <value>Indicates whether the item is viewable from the merchant's online store (PUBLIC) or PRIVATE.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Item.VisibilityEnum.PUBLIC">
             <summary>
             Enum PUBLIC for "PUBLIC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Item.VisibilityEnum.PRIVATE">
             <summary>
             Enum PRIVATE for "PRIVATE"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1Item.Type">
             <summary>
             The item's type. This value is NORMAL for almost all items.
             </summary>
             <value>The item's type. This value is NORMAL for almost all items.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Item.Color">
             <summary>
             The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6.
             </summary>
             <value>The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Item.Visibility">
             <summary>
             Indicates whether the item is viewable from the merchant's online store (PUBLIC) or PRIVATE.
             </summary>
             <value>Indicates whether the item is viewable from the merchant's online store (PUBLIC) or PRIVATE.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Item.#ctor(System.String,System.String,System.String,System.Nullable{Square.Connect.Model.V1Item.TypeEnum},System.Nullable{Square.Connect.Model.V1Item.ColorEnum},System.String,System.Nullable{Square.Connect.Model.V1Item.VisibilityEnum},System.Nullable{System.Boolean},Square.Connect.Model.V1ItemImage,Square.Connect.Model.V1Category,System.Collections.Generic.List{Square.Connect.Model.V1Variation},System.Collections.Generic.List{Square.Connect.Model.V1Variation},System.Collections.Generic.List{Square.Connect.Model.V1Fee},System.Nullable{System.Boolean})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Item" /> class.
             </summary>
             <param name="Id">The item's ID. Must be unique among all entity IDs ever provided on behalf of the merchant. You can never reuse an ID. This value can include alphanumeric characters, dashes (-), and underscores (_)..</param>
             <param name="Name">The item's name..</param>
             <param name="Description">The item's description..</param>
             <param name="Type">The item's type. This value is NORMAL for almost all items..</param>
             <param name="Color">The color of the discount's display label in Square Register, if not the default color. The default color is 9da2a6..</param>
             <param name="Abbreviation">The text of the item's display label in Square Register. Only up to the first five characters of the string are used..</param>
             <param name="Visibility">Indicates whether the item is viewable from the merchant's online store (PUBLIC) or PRIVATE..</param>
             <param name="AvailableOnline">If true, the item can be added to shipping orders from the merchant's online store..</param>
             <param name="MasterImage">The item's master image, if any..</param>
             <param name="Category">The category the item belongs to, if any..</param>
             <param name="Variations">The item's variations. You must specify at least one variation..</param>
             <param name="ModifierLists">The modifier lists that apply to the item, if any..</param>
             <param name="Fees">The fees that apply to the item, if any..</param>
             <param name="Taxable">Deprecated. This field is not used..</param>
            </member>
        <member name="P:Square.Connect.Model.V1Item.Id">
             <summary>
             The item's ID. Must be unique among all entity IDs ever provided on behalf of the merchant. You can never reuse an ID. This value can include alphanumeric characters, dashes (-), and underscores (_).
             </summary>
             <value>The item's ID. Must be unique among all entity IDs ever provided on behalf of the merchant. You can never reuse an ID. This value can include alphanumeric characters, dashes (-), and underscores (_).</value>
            </member>
        <member name="P:Square.Connect.Model.V1Item.Name">
             <summary>
             The item's name.
             </summary>
             <value>The item's name.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Item.Description">
             <summary>
             The item's description.
             </summary>
             <value>The item's description.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Item.Abbreviation">
             <summary>
             The text of the item's display label in Square Register. Only up to the first five characters of the string are used.
             </summary>
             <value>The text of the item's display label in Square Register. Only up to the first five characters of the string are used.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Item.AvailableOnline">
             <summary>
             If true, the item can be added to shipping orders from the merchant's online store.
             </summary>
             <value>If true, the item can be added to shipping orders from the merchant's online store.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Item.MasterImage">
             <summary>
             The item's master image, if any.
             </summary>
             <value>The item's master image, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Item.Category">
             <summary>
             The category the item belongs to, if any.
             </summary>
             <value>The category the item belongs to, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Item.Variations">
             <summary>
             The item's variations. You must specify at least one variation.
             </summary>
             <value>The item's variations. You must specify at least one variation.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Item.ModifierLists">
             <summary>
             The modifier lists that apply to the item, if any.
             </summary>
             <value>The modifier lists that apply to the item, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Item.Fees">
             <summary>
             The fees that apply to the item, if any.
             </summary>
             <value>The fees that apply to the item, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Item.Taxable">
             <summary>
             Deprecated. This field is not used.
             </summary>
             <value>Deprecated. This field is not used.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Item.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Item.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Item.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Item.Equals(Square.Connect.Model.V1Item)">
             <summary>
             Returns true if V1Item instances are equal
             </summary>
             <param name="other">Instance of V1Item to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Item.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1ItemImage">
             <summary>
             V1ItemImage
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1ItemImage.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ItemImage" /> class.
             </summary>
             <param name="Id">The image's unique ID..</param>
             <param name="Url">The image's publicly accessible URL..</param>
            </member>
        <member name="P:Square.Connect.Model.V1ItemImage.Id">
             <summary>
             The image's unique ID.
             </summary>
             <value>The image's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.V1ItemImage.Url">
             <summary>
             The image's publicly accessible URL.
             </summary>
             <value>The image's publicly accessible URL.</value>
            </member>
        <member name="M:Square.Connect.Model.V1ItemImage.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1ItemImage.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1ItemImage.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1ItemImage.Equals(Square.Connect.Model.V1ItemImage)">
             <summary>
             Returns true if V1ItemImage instances are equal
             </summary>
             <param name="other">Instance of V1ItemImage to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1ItemImage.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1Merchant">
             <summary>
             Defines the fields that are included in the response body of a request to the **RetrieveBusiness** endpoint.
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Merchant.AccountTypeEnum">
             <summary>
             Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION.
             </summary>
             <value>Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.AccountTypeEnum.LOCATION">
             <summary>
             Enum LOCATION for "LOCATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.AccountTypeEnum.BUSINESS">
             <summary>
             Enum BUSINESS for "BUSINESS"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Merchant.BusinessTypeEnum">
             <summary>
             The type of business operated by the merchant.
             </summary>
             <value>The type of business operated by the merchant.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.ACCOUNTING">
             <summary>
             Enum ACCOUNTING for "ACCOUNTING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.APPARELANDACCESSORYSHOPS">
             <summary>
             Enum APPARELANDACCESSORYSHOPS for "APPAREL_AND_ACCESSORY_SHOPS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.ARTDEALERSGALLERIES">
             <summary>
             Enum ARTDEALERSGALLERIES for "ART_DEALERS_GALLERIES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.ARTDESIGNANDPHOTOGRAPHY">
             <summary>
             Enum ARTDESIGNANDPHOTOGRAPHY for "ART_DESIGN_AND_PHOTOGRAPHY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.BARCLUBLOUNGE">
             <summary>
             Enum BARCLUBLOUNGE for "BAR_CLUB_LOUNGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.BEAUTYANDBARBERSHOPS">
             <summary>
             Enum BEAUTYANDBARBERSHOPS for "BEAUTY_AND_BARBER_SHOPS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.BOOKSTORES">
             <summary>
             Enum BOOKSTORES for "BOOK_STORES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.BUSINESSSERVICES">
             <summary>
             Enum BUSINESSSERVICES for "BUSINESS_SERVICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.CATERING">
             <summary>
             Enum CATERING for "CATERING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.CHARITABLESOCIALSERVICEORGANIZATIONS">
             <summary>
             Enum CHARITABLESOCIALSERVICEORGANIZATIONS for "CHARITABLE_SOCIAL_SERVICE_ORGANIZATIONS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.CHARITIBLEORGS">
             <summary>
             Enum CHARITIBLEORGS for "CHARITIBLE_ORGS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.CLEANINGSERVICES">
             <summary>
             Enum CLEANINGSERVICES for "CLEANING_SERVICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.COMPUTEREQUIPMENTSOFTWAREMAINTENANCEREPAIRSERVICES">
             <summary>
             Enum COMPUTEREQUIPMENTSOFTWAREMAINTENANCEREPAIRSERVICES for "COMPUTER_EQUIPMENT_SOFTWARE_MAINTENANCE_REPAIR_SERVICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.CONSULTANT">
             <summary>
             Enum CONSULTANT for "CONSULTANT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.CONTRACTORS">
             <summary>
             Enum CONTRACTORS for "CONTRACTORS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.DELIVERYSERVICES">
             <summary>
             Enum DELIVERYSERVICES for "DELIVERY_SERVICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.DENTISTRY">
             <summary>
             Enum DENTISTRY for "DENTISTRY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.EDUCATION">
             <summary>
             Enum EDUCATION for "EDUCATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.FOODSTORESCONVENIENCESTORESANDSPECIALTYMARKETS">
             <summary>
             Enum FOODSTORESCONVENIENCESTORESANDSPECIALTYMARKETS for "FOOD_STORES_CONVENIENCE_STORES_AND_SPECIALTY_MARKETS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.FOODTRUCKCART">
             <summary>
             Enum FOODTRUCKCART for "FOOD_TRUCK_CART"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.FURNITUREHOMEANDOFFICEEQUIPMENT">
             <summary>
             Enum FURNITUREHOMEANDOFFICEEQUIPMENT for "FURNITURE_HOME_AND_OFFICE_EQUIPMENT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.FURNITUREHOMEGOODS">
             <summary>
             Enum FURNITUREHOMEGOODS for "FURNITURE_HOME_GOODS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.HOTELSANDLODGING">
             <summary>
             Enum HOTELSANDLODGING for "HOTELS_AND_LODGING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.INDIVIDUALUSE">
             <summary>
             Enum INDIVIDUALUSE for "INDIVIDUAL_USE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.JEWELRYANDWATCHES">
             <summary>
             Enum JEWELRYANDWATCHES for "JEWELRY_AND_WATCHES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.LANDSCAPINGANDHORTICULTURALSERVICES">
             <summary>
             Enum LANDSCAPINGANDHORTICULTURALSERVICES for "LANDSCAPING_AND_HORTICULTURAL_SERVICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.LANGUAGESCHOOLS">
             <summary>
             Enum LANGUAGESCHOOLS for "LANGUAGE_SCHOOLS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.LEGALSERVICES">
             <summary>
             Enum LEGALSERVICES for "LEGAL_SERVICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.MEDICALPRACTITIONERS">
             <summary>
             Enum MEDICALPRACTITIONERS for "MEDICAL_PRACTITIONERS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.MEDICALSERVICESANDHEALTHPRACTITIONERS">
             <summary>
             Enum MEDICALSERVICESANDHEALTHPRACTITIONERS for "MEDICAL_SERVICES_AND_HEALTH_PRACTITIONERS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.MEMBERSHIPORGANIZATIONS">
             <summary>
             Enum MEMBERSHIPORGANIZATIONS for "MEMBERSHIP_ORGANIZATIONS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.MUSICANDENTERTAINMENT">
             <summary>
             Enum MUSICANDENTERTAINMENT for "MUSIC_AND_ENTERTAINMENT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.OUTDOORMARKETS">
             <summary>
             Enum OUTDOORMARKETS for "OUTDOOR_MARKETS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.PERSONALSERVICES">
             <summary>
             Enum PERSONALSERVICES for "PERSONAL_SERVICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.POLITICALORGANIZATIONS">
             <summary>
             Enum POLITICALORGANIZATIONS for "POLITICAL_ORGANIZATIONS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.PROFESSIONALSERVICES">
             <summary>
             Enum PROFESSIONALSERVICES for "PROFESSIONAL_SERVICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.REALESTATE">
             <summary>
             Enum REALESTATE for "REAL_ESTATE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.RECREATIONSERVICES">
             <summary>
             Enum RECREATIONSERVICES for "RECREATION_SERVICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.REPAIRSHOPSANDRELATEDSERVICES">
             <summary>
             Enum REPAIRSHOPSANDRELATEDSERVICES for "REPAIR_SHOPS_AND_RELATED_SERVICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.RESTAURANTS">
             <summary>
             Enum RESTAURANTS for "RESTAURANTS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.RETAILSHOPS">
             <summary>
             Enum RETAILSHOPS for "RETAIL_SHOPS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.SCHOOLSANDEDUCATIONALSERVICES">
             <summary>
             Enum SCHOOLSANDEDUCATIONALSERVICES for "SCHOOLS_AND_EDUCATIONAL_SERVICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.SPORTINGGOODS">
             <summary>
             Enum SPORTINGGOODS for "SPORTING_GOODS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.TAXICABSANDLIMOUSINES">
             <summary>
             Enum TAXICABSANDLIMOUSINES for "TAXICABS_AND_LIMOUSINES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.TICKETSALES">
             <summary>
             Enum TICKETSALES for "TICKET_SALES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.TOURISM">
             <summary>
             Enum TOURISM for "TOURISM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.TRAVELTOURISM">
             <summary>
             Enum TRAVELTOURISM for "TRAVEL_TOURISM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.VETERINARYSERVICES">
             <summary>
             Enum VETERINARYSERVICES for "VETERINARY_SERVICES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Merchant.BusinessTypeEnum.WEBDEVDESIGN">
             <summary>
             Enum WEBDEVDESIGN for "WEB_DEV_DESIGN"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1Merchant.AccountType">
             <summary>
             Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION.
             </summary>
             <value>Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Merchant.BusinessType">
             <summary>
             The type of business operated by the merchant.
             </summary>
             <value>The type of business operated by the merchant.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Merchant.#ctor(System.String,System.String,System.String,System.Nullable{Square.Connect.Model.V1Merchant.AccountTypeEnum},System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,Square.Connect.Model.Address,Square.Connect.Model.V1PhoneNumber,System.Nullable{Square.Connect.Model.V1Merchant.BusinessTypeEnum},Square.Connect.Model.Address,Square.Connect.Model.V1MerchantLocationDetails,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Merchant" /> class.
             </summary>
             <param name="Id">The merchant account's unique identifier..</param>
             <param name="Name">The name associated with the merchant account..</param>
             <param name="Email">The email address associated with the merchant account..</param>
             <param name="AccountType">Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION..</param>
             <param name="AccountCapabilities">Capabilities that are enabled for the merchant's Square account. Capabilities that are not listed in this array are not enabled for the account..</param>
             <param name="CountryCode">The country associated with the merchant account, in ISO 3166-1-alpha-2 format..</param>
             <param name="LanguageCode">The language associated with the merchant account, in BCP 47 format..</param>
             <param name="CurrencyCode">The currency associated with the merchant account, in ISO 4217 format. For example, the currency code for US dollars is USD..</param>
             <param name="BusinessName">The name of the merchant's business..</param>
             <param name="BusinessAddress">The address of the merchant's business..</param>
             <param name="BusinessPhone">The phone number of the merchant's business..</param>
             <param name="BusinessType">The type of business operated by the merchant..</param>
             <param name="ShippingAddress_">The merchant's shipping address..</param>
             <param name="LocationDetails">LocationDetails.</param>
             <param name="MarketUrl">The URL of the merchant's online store..</param>
            </member>
        <member name="P:Square.Connect.Model.V1Merchant.Id">
             <summary>
             The merchant account's unique identifier.
             </summary>
             <value>The merchant account's unique identifier.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Merchant.Name">
             <summary>
             The name associated with the merchant account.
             </summary>
             <value>The name associated with the merchant account.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Merchant.Email">
             <summary>
             The email address associated with the merchant account.
             </summary>
             <value>The email address associated with the merchant account.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Merchant.AccountCapabilities">
             <summary>
             Capabilities that are enabled for the merchant's Square account. Capabilities that are not listed in this array are not enabled for the account.
             </summary>
             <value>Capabilities that are enabled for the merchant's Square account. Capabilities that are not listed in this array are not enabled for the account.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Merchant.CountryCode">
             <summary>
             The country associated with the merchant account, in ISO 3166-1-alpha-2 format.
             </summary>
             <value>The country associated with the merchant account, in ISO 3166-1-alpha-2 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Merchant.LanguageCode">
             <summary>
             The language associated with the merchant account, in BCP 47 format.
             </summary>
             <value>The language associated with the merchant account, in BCP 47 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Merchant.CurrencyCode">
             <summary>
             The currency associated with the merchant account, in ISO 4217 format. For example, the currency code for US dollars is USD.
             </summary>
             <value>The currency associated with the merchant account, in ISO 4217 format. For example, the currency code for US dollars is USD.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Merchant.BusinessName">
             <summary>
             The name of the merchant's business.
             </summary>
             <value>The name of the merchant's business.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Merchant.BusinessAddress">
             <summary>
             The address of the merchant's business.
             </summary>
             <value>The address of the merchant's business.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Merchant.BusinessPhone">
             <summary>
             The phone number of the merchant's business.
             </summary>
             <value>The phone number of the merchant's business.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Merchant.ShippingAddress_">
             <summary>
             The merchant's shipping address.
             </summary>
             <value>The merchant's shipping address.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Merchant.LocationDetails">
             <summary>
             Gets or Sets LocationDetails
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1Merchant.MarketUrl">
             <summary>
             The URL of the merchant's online store.
             </summary>
             <value>The URL of the merchant's online store.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Merchant.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Merchant.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Merchant.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Merchant.Equals(Square.Connect.Model.V1Merchant)">
             <summary>
             Returns true if V1Merchant instances are equal
             </summary>
             <param name="other">Instance of V1Merchant to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Merchant.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1MerchantLocationDetails">
             <summary>
             Additional information for a single-location account specified by its associated business account, if it has one.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1MerchantLocationDetails.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1MerchantLocationDetails" /> class.
             </summary>
             <param name="Nickname">The nickname assigned to the single-location account by the parent business. This value appears in the parent business's multi-location dashboard..</param>
            </member>
        <member name="P:Square.Connect.Model.V1MerchantLocationDetails.Nickname">
             <summary>
             The nickname assigned to the single-location account by the parent business. This value appears in the parent business's multi-location dashboard.
             </summary>
             <value>The nickname assigned to the single-location account by the parent business. This value appears in the parent business's multi-location dashboard.</value>
            </member>
        <member name="M:Square.Connect.Model.V1MerchantLocationDetails.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1MerchantLocationDetails.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1MerchantLocationDetails.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1MerchantLocationDetails.Equals(Square.Connect.Model.V1MerchantLocationDetails)">
             <summary>
             Returns true if V1MerchantLocationDetails instances are equal
             </summary>
             <param name="other">Instance of V1MerchantLocationDetails to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1MerchantLocationDetails.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1ModifierList">
             <summary>
             V1ModifierList
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1ModifierList.SelectionTypeEnum">
             <summary>
             Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item.
             </summary>
             <value>Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item.</value>
            </member>
        <member name="F:Square.Connect.Model.V1ModifierList.SelectionTypeEnum.SINGLE">
             <summary>
             Enum SINGLE for "SINGLE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1ModifierList.SelectionTypeEnum.MULTIPLE">
             <summary>
             Enum MULTIPLE for "MULTIPLE"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1ModifierList.SelectionType">
             <summary>
             Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item.
             </summary>
             <value>Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item.</value>
            </member>
        <member name="M:Square.Connect.Model.V1ModifierList.#ctor(System.String,System.String,System.Nullable{Square.Connect.Model.V1ModifierList.SelectionTypeEnum},System.Collections.Generic.List{Square.Connect.Model.V1ModifierOption})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ModifierList" /> class.
             </summary>
             <param name="Id">The modifier list's unique ID..</param>
             <param name="Name">The modifier list's name..</param>
             <param name="SelectionType">Indicates whether MULTIPLE options or a SINGLE option from the modifier list can be applied to a single item..</param>
             <param name="ModifierOptions">The options included in the modifier list..</param>
            </member>
        <member name="P:Square.Connect.Model.V1ModifierList.Id">
             <summary>
             The modifier list's unique ID.
             </summary>
             <value>The modifier list's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.V1ModifierList.Name">
             <summary>
             The modifier list's name.
             </summary>
             <value>The modifier list's name.</value>
            </member>
        <member name="P:Square.Connect.Model.V1ModifierList.ModifierOptions">
             <summary>
             The options included in the modifier list.
             </summary>
             <value>The options included in the modifier list.</value>
            </member>
        <member name="M:Square.Connect.Model.V1ModifierList.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1ModifierList.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1ModifierList.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1ModifierList.Equals(Square.Connect.Model.V1ModifierList)">
             <summary>
             Returns true if V1ModifierList instances are equal
             </summary>
             <param name="other">Instance of V1ModifierList to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1ModifierList.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1ModifierOption">
             <summary>
             V1ModifierOption
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1ModifierOption.#ctor(System.String,System.String,Square.Connect.Model.V1Money,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1ModifierOption" /> class.
             </summary>
             <param name="Id">The modifier option's unique ID..</param>
             <param name="Name">The modifier option's name..</param>
             <param name="PriceMoney">The modifier option's price..</param>
             <param name="OnByDefault">If true, the modifier option is the default option in a modifier list for which selection_type is SINGLE..</param>
             <param name="Ordinal">Indicates the modifier option's list position when displayed in Square Register and the merchant dashboard. If more than one modifier option in the same modifier list has the same ordinal value, those options are displayed in alphabetical order..</param>
             <param name="ModifierListId">The ID of the modifier list the option belongs to..</param>
            </member>
        <member name="P:Square.Connect.Model.V1ModifierOption.Id">
             <summary>
             The modifier option's unique ID.
             </summary>
             <value>The modifier option's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.V1ModifierOption.Name">
             <summary>
             The modifier option's name.
             </summary>
             <value>The modifier option's name.</value>
            </member>
        <member name="P:Square.Connect.Model.V1ModifierOption.PriceMoney">
             <summary>
             The modifier option's price.
             </summary>
             <value>The modifier option's price.</value>
            </member>
        <member name="P:Square.Connect.Model.V1ModifierOption.OnByDefault">
             <summary>
             If true, the modifier option is the default option in a modifier list for which selection_type is SINGLE.
             </summary>
             <value>If true, the modifier option is the default option in a modifier list for which selection_type is SINGLE.</value>
            </member>
        <member name="P:Square.Connect.Model.V1ModifierOption.Ordinal">
             <summary>
             Indicates the modifier option's list position when displayed in Square Register and the merchant dashboard. If more than one modifier option in the same modifier list has the same ordinal value, those options are displayed in alphabetical order.
             </summary>
             <value>Indicates the modifier option's list position when displayed in Square Register and the merchant dashboard. If more than one modifier option in the same modifier list has the same ordinal value, those options are displayed in alphabetical order.</value>
            </member>
        <member name="P:Square.Connect.Model.V1ModifierOption.ModifierListId">
             <summary>
             The ID of the modifier list the option belongs to.
             </summary>
             <value>The ID of the modifier list the option belongs to.</value>
            </member>
        <member name="M:Square.Connect.Model.V1ModifierOption.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1ModifierOption.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1ModifierOption.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1ModifierOption.Equals(Square.Connect.Model.V1ModifierOption)">
             <summary>
             Returns true if V1ModifierOption instances are equal
             </summary>
             <param name="other">Instance of V1ModifierOption to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1ModifierOption.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1Money">
             <summary>
             
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Money.CurrencyCodeEnum">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.AED">
             <summary>
             Enum AED for "AED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.AFN">
             <summary>
             Enum AFN for "AFN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ALL">
             <summary>
             Enum ALL for "ALL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.AMD">
             <summary>
             Enum AMD for "AMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ANG">
             <summary>
             Enum ANG for "ANG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.AOA">
             <summary>
             Enum AOA for "AOA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ARS">
             <summary>
             Enum ARS for "ARS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.AUD">
             <summary>
             Enum AUD for "AUD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.AWG">
             <summary>
             Enum AWG for "AWG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.AZN">
             <summary>
             Enum AZN for "AZN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BAM">
             <summary>
             Enum BAM for "BAM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BBD">
             <summary>
             Enum BBD for "BBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BDT">
             <summary>
             Enum BDT for "BDT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BGN">
             <summary>
             Enum BGN for "BGN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BHD">
             <summary>
             Enum BHD for "BHD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BIF">
             <summary>
             Enum BIF for "BIF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BMD">
             <summary>
             Enum BMD for "BMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BND">
             <summary>
             Enum BND for "BND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BOB">
             <summary>
             Enum BOB for "BOB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BOV">
             <summary>
             Enum BOV for "BOV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BRL">
             <summary>
             Enum BRL for "BRL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BSD">
             <summary>
             Enum BSD for "BSD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BTN">
             <summary>
             Enum BTN for "BTN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BWP">
             <summary>
             Enum BWP for "BWP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BYR">
             <summary>
             Enum BYR for "BYR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BZD">
             <summary>
             Enum BZD for "BZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CAD">
             <summary>
             Enum CAD for "CAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CDF">
             <summary>
             Enum CDF for "CDF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CHE">
             <summary>
             Enum CHE for "CHE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CHF">
             <summary>
             Enum CHF for "CHF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CHW">
             <summary>
             Enum CHW for "CHW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CLF">
             <summary>
             Enum CLF for "CLF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CLP">
             <summary>
             Enum CLP for "CLP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CNY">
             <summary>
             Enum CNY for "CNY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.COP">
             <summary>
             Enum COP for "COP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.COU">
             <summary>
             Enum COU for "COU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CRC">
             <summary>
             Enum CRC for "CRC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CUC">
             <summary>
             Enum CUC for "CUC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CUP">
             <summary>
             Enum CUP for "CUP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CVE">
             <summary>
             Enum CVE for "CVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.CZK">
             <summary>
             Enum CZK for "CZK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.DJF">
             <summary>
             Enum DJF for "DJF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.DKK">
             <summary>
             Enum DKK for "DKK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.DOP">
             <summary>
             Enum DOP for "DOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.DZD">
             <summary>
             Enum DZD for "DZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.EGP">
             <summary>
             Enum EGP for "EGP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ERN">
             <summary>
             Enum ERN for "ERN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ETB">
             <summary>
             Enum ETB for "ETB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.EUR">
             <summary>
             Enum EUR for "EUR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.FJD">
             <summary>
             Enum FJD for "FJD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.FKP">
             <summary>
             Enum FKP for "FKP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.GBP">
             <summary>
             Enum GBP for "GBP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.GEL">
             <summary>
             Enum GEL for "GEL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.GHS">
             <summary>
             Enum GHS for "GHS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.GIP">
             <summary>
             Enum GIP for "GIP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.GMD">
             <summary>
             Enum GMD for "GMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.GNF">
             <summary>
             Enum GNF for "GNF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.GTQ">
             <summary>
             Enum GTQ for "GTQ"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.GYD">
             <summary>
             Enum GYD for "GYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.HKD">
             <summary>
             Enum HKD for "HKD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.HNL">
             <summary>
             Enum HNL for "HNL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.HRK">
             <summary>
             Enum HRK for "HRK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.HTG">
             <summary>
             Enum HTG for "HTG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.HUF">
             <summary>
             Enum HUF for "HUF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.IDR">
             <summary>
             Enum IDR for "IDR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ILS">
             <summary>
             Enum ILS for "ILS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.INR">
             <summary>
             Enum INR for "INR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.IQD">
             <summary>
             Enum IQD for "IQD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.IRR">
             <summary>
             Enum IRR for "IRR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ISK">
             <summary>
             Enum ISK for "ISK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.JMD">
             <summary>
             Enum JMD for "JMD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.JOD">
             <summary>
             Enum JOD for "JOD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.JPY">
             <summary>
             Enum JPY for "JPY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KES">
             <summary>
             Enum KES for "KES"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KGS">
             <summary>
             Enum KGS for "KGS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KHR">
             <summary>
             Enum KHR for "KHR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KMF">
             <summary>
             Enum KMF for "KMF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KPW">
             <summary>
             Enum KPW for "KPW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KRW">
             <summary>
             Enum KRW for "KRW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KWD">
             <summary>
             Enum KWD for "KWD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KYD">
             <summary>
             Enum KYD for "KYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.KZT">
             <summary>
             Enum KZT for "KZT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.LAK">
             <summary>
             Enum LAK for "LAK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.LBP">
             <summary>
             Enum LBP for "LBP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.LKR">
             <summary>
             Enum LKR for "LKR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.LRD">
             <summary>
             Enum LRD for "LRD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.LSL">
             <summary>
             Enum LSL for "LSL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.LTL">
             <summary>
             Enum LTL for "LTL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.LVL">
             <summary>
             Enum LVL for "LVL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.LYD">
             <summary>
             Enum LYD for "LYD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MAD">
             <summary>
             Enum MAD for "MAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MDL">
             <summary>
             Enum MDL for "MDL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MGA">
             <summary>
             Enum MGA for "MGA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MKD">
             <summary>
             Enum MKD for "MKD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MMK">
             <summary>
             Enum MMK for "MMK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MNT">
             <summary>
             Enum MNT for "MNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MOP">
             <summary>
             Enum MOP for "MOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MRO">
             <summary>
             Enum MRO for "MRO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MUR">
             <summary>
             Enum MUR for "MUR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MVR">
             <summary>
             Enum MVR for "MVR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MWK">
             <summary>
             Enum MWK for "MWK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MXN">
             <summary>
             Enum MXN for "MXN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MXV">
             <summary>
             Enum MXV for "MXV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MYR">
             <summary>
             Enum MYR for "MYR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.MZN">
             <summary>
             Enum MZN for "MZN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.NAD">
             <summary>
             Enum NAD for "NAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.NGN">
             <summary>
             Enum NGN for "NGN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.NIO">
             <summary>
             Enum NIO for "NIO"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.NOK">
             <summary>
             Enum NOK for "NOK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.NPR">
             <summary>
             Enum NPR for "NPR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.NZD">
             <summary>
             Enum NZD for "NZD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.OMR">
             <summary>
             Enum OMR for "OMR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.PAB">
             <summary>
             Enum PAB for "PAB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.PEN">
             <summary>
             Enum PEN for "PEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.PGK">
             <summary>
             Enum PGK for "PGK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.PHP">
             <summary>
             Enum PHP for "PHP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.PKR">
             <summary>
             Enum PKR for "PKR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.PLN">
             <summary>
             Enum PLN for "PLN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.PYG">
             <summary>
             Enum PYG for "PYG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.QAR">
             <summary>
             Enum QAR for "QAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.RON">
             <summary>
             Enum RON for "RON"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.RSD">
             <summary>
             Enum RSD for "RSD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.RUB">
             <summary>
             Enum RUB for "RUB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.RWF">
             <summary>
             Enum RWF for "RWF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SAR">
             <summary>
             Enum SAR for "SAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SBD">
             <summary>
             Enum SBD for "SBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SCR">
             <summary>
             Enum SCR for "SCR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SDG">
             <summary>
             Enum SDG for "SDG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SEK">
             <summary>
             Enum SEK for "SEK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SGD">
             <summary>
             Enum SGD for "SGD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SHP">
             <summary>
             Enum SHP for "SHP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SLL">
             <summary>
             Enum SLL for "SLL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SOS">
             <summary>
             Enum SOS for "SOS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SRD">
             <summary>
             Enum SRD for "SRD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SSP">
             <summary>
             Enum SSP for "SSP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.STD">
             <summary>
             Enum STD for "STD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SVC">
             <summary>
             Enum SVC for "SVC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SYP">
             <summary>
             Enum SYP for "SYP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.SZL">
             <summary>
             Enum SZL for "SZL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.THB">
             <summary>
             Enum THB for "THB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.TJS">
             <summary>
             Enum TJS for "TJS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.TMT">
             <summary>
             Enum TMT for "TMT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.TND">
             <summary>
             Enum TND for "TND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.TOP">
             <summary>
             Enum TOP for "TOP"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.TRY">
             <summary>
             Enum TRY for "TRY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.TTD">
             <summary>
             Enum TTD for "TTD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.TWD">
             <summary>
             Enum TWD for "TWD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.TZS">
             <summary>
             Enum TZS for "TZS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.UAH">
             <summary>
             Enum UAH for "UAH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.UGX">
             <summary>
             Enum UGX for "UGX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.USD">
             <summary>
             Enum USD for "USD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.USN">
             <summary>
             Enum USN for "USN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.USS">
             <summary>
             Enum USS for "USS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.UYI">
             <summary>
             Enum UYI for "UYI"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.UYU">
             <summary>
             Enum UYU for "UYU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.UZS">
             <summary>
             Enum UZS for "UZS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.VEF">
             <summary>
             Enum VEF for "VEF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.VND">
             <summary>
             Enum VND for "VND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.VUV">
             <summary>
             Enum VUV for "VUV"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.WST">
             <summary>
             Enum WST for "WST"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XAF">
             <summary>
             Enum XAF for "XAF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XAG">
             <summary>
             Enum XAG for "XAG"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XAU">
             <summary>
             Enum XAU for "XAU"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XBA">
             <summary>
             Enum XBA for "XBA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XBB">
             <summary>
             Enum XBB for "XBB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XBC">
             <summary>
             Enum XBC for "XBC"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XBD">
             <summary>
             Enum XBD for "XBD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XCD">
             <summary>
             Enum XCD for "XCD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XDR">
             <summary>
             Enum XDR for "XDR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XOF">
             <summary>
             Enum XOF for "XOF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XPD">
             <summary>
             Enum XPD for "XPD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XPF">
             <summary>
             Enum XPF for "XPF"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XPT">
             <summary>
             Enum XPT for "XPT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XTS">
             <summary>
             Enum XTS for "XTS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.XXX">
             <summary>
             Enum XXX for "XXX"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.YER">
             <summary>
             Enum YER for "YER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ZAR">
             <summary>
             Enum ZAR for "ZAR"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ZMK">
             <summary>
             Enum ZMK for "ZMK"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.ZMW">
             <summary>
             Enum ZMW for "ZMW"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Money.CurrencyCodeEnum.BTC">
             <summary>
             Enum BTC for "BTC"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1Money.CurrencyCode">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.V1Money.#ctor(System.Nullable{System.Int32},System.Nullable{Square.Connect.Model.V1Money.CurrencyCodeEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Money" /> class.
             </summary>
             <param name="Amount">Amount in the lowest denominated value of this Currency. E.g. in USD these are cents, in JPY they are Yen (which do not have a 'cent' concept)..</param>
             <param name="CurrencyCode">.</param>
            </member>
        <member name="P:Square.Connect.Model.V1Money.Amount">
             <summary>
             Amount in the lowest denominated value of this Currency. E.g. in USD these are cents, in JPY they are Yen (which do not have a 'cent' concept).
             </summary>
             <value>Amount in the lowest denominated value of this Currency. E.g. in USD these are cents, in JPY they are Yen (which do not have a 'cent' concept).</value>
            </member>
        <member name="M:Square.Connect.Model.V1Money.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Money.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Money.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Money.Equals(Square.Connect.Model.V1Money)">
             <summary>
             Returns true if V1Money instances are equal
             </summary>
             <param name="other">Instance of V1Money to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Money.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1Order">
             <summary>
             V1Order
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Order.StateEnum">
             <summary>
             Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
             </summary>
             <value>Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Order.StateEnum.PENDING">
             <summary>
             Enum PENDING for "PENDING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Order.StateEnum.OPEN">
             <summary>
             Enum OPEN for "OPEN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Order.StateEnum.COMPLETED">
             <summary>
             Enum COMPLETED for "COMPLETED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Order.StateEnum.CANCELED">
             <summary>
             Enum CANCELED for "CANCELED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Order.StateEnum.REFUNDED">
             <summary>
             Enum REFUNDED for "REFUNDED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Order.StateEnum.REJECTED">
             <summary>
             Enum REJECTED for "REJECTED"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1Order.State">
             <summary>
             Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
             </summary>
             <value>Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Order.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.String,System.String,System.String,System.String,System.Nullable{Square.Connect.Model.V1Order.StateEnum},Square.Connect.Model.Address,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Square.Connect.Model.V1Tender,System.Collections.Generic.List{Square.Connect.Model.V1OrderHistoryEntry},System.String,System.String,System.Nullable{System.Decimal})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Order" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Id">The order's unique identifier..</param>
             <param name="BuyerEmail">The email address of the order's buyer..</param>
             <param name="RecipientName">The name of the order's buyer..</param>
             <param name="RecipientPhoneNumber">The phone number to use for the order's delivery..</param>
             <param name="State">Whether the tax is an ADDITIVE tax or an INCLUSIVE tax..</param>
             <param name="ShippingAddress">The address to ship the order to..</param>
             <param name="SubtotalMoney">The amount of all items purchased in the order, before taxes and shipping..</param>
             <param name="TotalShippingMoney">The shipping cost for the order..</param>
             <param name="TotalTaxMoney">The total of all taxes applied to the order..</param>
             <param name="TotalPriceMoney">The total cost of the order..</param>
             <param name="TotalDiscountMoney">The total of all discounts applied to the order..</param>
             <param name="CreatedAt">The time when the order was created, in ISO 8601 format..</param>
             <param name="UpdatedAt">The time when the order was last modified, in ISO 8601 format..</param>
             <param name="ExpiresAt">The time when the order expires if no action is taken, in ISO 8601 format..</param>
             <param name="PaymentId">The unique identifier of the payment associated with the order..</param>
             <param name="BuyerNote">A note provided by the buyer when the order was created, if any..</param>
             <param name="CompletedNote">A note provided by the merchant when the order's state was set to COMPLETED, if any.</param>
             <param name="RefundedNote">A note provided by the merchant when the order's state was set to REFUNDED, if any..</param>
             <param name="CanceledNote">A note provided by the merchant when the order's state was set to CANCELED, if any..</param>
             <param name="Tender">The tender used to pay for the order..</param>
             <param name="OrderHistory">The history of actions associated with the order..</param>
             <param name="PromoCode">The promo code provided by the buyer, if any..</param>
             <param name="BtcReceiveAddress">For Bitcoin transactions, the address that the buyer sent Bitcoin to..</param>
             <param name="BtcPriceSatoshi">For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC)..</param>
            </member>
        <member name="P:Square.Connect.Model.V1Order.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.Id">
             <summary>
             The order's unique identifier.
             </summary>
             <value>The order's unique identifier.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.BuyerEmail">
             <summary>
             The email address of the order's buyer.
             </summary>
             <value>The email address of the order's buyer.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.RecipientName">
             <summary>
             The name of the order's buyer.
             </summary>
             <value>The name of the order's buyer.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.RecipientPhoneNumber">
             <summary>
             The phone number to use for the order's delivery.
             </summary>
             <value>The phone number to use for the order's delivery.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.ShippingAddress">
             <summary>
             The address to ship the order to.
             </summary>
             <value>The address to ship the order to.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.SubtotalMoney">
             <summary>
             The amount of all items purchased in the order, before taxes and shipping.
             </summary>
             <value>The amount of all items purchased in the order, before taxes and shipping.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.TotalShippingMoney">
             <summary>
             The shipping cost for the order.
             </summary>
             <value>The shipping cost for the order.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.TotalTaxMoney">
             <summary>
             The total of all taxes applied to the order.
             </summary>
             <value>The total of all taxes applied to the order.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.TotalPriceMoney">
             <summary>
             The total cost of the order.
             </summary>
             <value>The total cost of the order.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.TotalDiscountMoney">
             <summary>
             The total of all discounts applied to the order.
             </summary>
             <value>The total of all discounts applied to the order.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.CreatedAt">
             <summary>
             The time when the order was created, in ISO 8601 format.
             </summary>
             <value>The time when the order was created, in ISO 8601 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.UpdatedAt">
             <summary>
             The time when the order was last modified, in ISO 8601 format.
             </summary>
             <value>The time when the order was last modified, in ISO 8601 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.ExpiresAt">
             <summary>
             The time when the order expires if no action is taken, in ISO 8601 format.
             </summary>
             <value>The time when the order expires if no action is taken, in ISO 8601 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.PaymentId">
             <summary>
             The unique identifier of the payment associated with the order.
             </summary>
             <value>The unique identifier of the payment associated with the order.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.BuyerNote">
             <summary>
             A note provided by the buyer when the order was created, if any.
             </summary>
             <value>A note provided by the buyer when the order was created, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.CompletedNote">
             <summary>
             A note provided by the merchant when the order's state was set to COMPLETED, if any
             </summary>
             <value>A note provided by the merchant when the order's state was set to COMPLETED, if any</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.RefundedNote">
             <summary>
             A note provided by the merchant when the order's state was set to REFUNDED, if any.
             </summary>
             <value>A note provided by the merchant when the order's state was set to REFUNDED, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.CanceledNote">
             <summary>
             A note provided by the merchant when the order's state was set to CANCELED, if any.
             </summary>
             <value>A note provided by the merchant when the order's state was set to CANCELED, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.Tender">
             <summary>
             The tender used to pay for the order.
             </summary>
             <value>The tender used to pay for the order.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.OrderHistory">
             <summary>
             The history of actions associated with the order.
             </summary>
             <value>The history of actions associated with the order.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.PromoCode">
             <summary>
             The promo code provided by the buyer, if any.
             </summary>
             <value>The promo code provided by the buyer, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.BtcReceiveAddress">
             <summary>
             For Bitcoin transactions, the address that the buyer sent Bitcoin to.
             </summary>
             <value>For Bitcoin transactions, the address that the buyer sent Bitcoin to.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Order.BtcPriceSatoshi">
             <summary>
             For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC).
             </summary>
             <value>For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC).</value>
            </member>
        <member name="M:Square.Connect.Model.V1Order.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Order.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Order.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Order.Equals(Square.Connect.Model.V1Order)">
             <summary>
             Returns true if V1Order instances are equal
             </summary>
             <param name="other">Instance of V1Order to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Order.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1OrderHistoryEntry">
             <summary>
             V1OrderHistoryEntry
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1OrderHistoryEntry.ActionEnum">
             <summary>
             The type of action performed on the order.
             </summary>
             <value>The type of action performed on the order.</value>
            </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntry.ActionEnum.ORDERPLACED">
             <summary>
             Enum ORDERPLACED for "ORDER_PLACED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntry.ActionEnum.DECLINED">
             <summary>
             Enum DECLINED for "DECLINED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntry.ActionEnum.PAYMENTRECEIVED">
             <summary>
             Enum PAYMENTRECEIVED for "PAYMENT_RECEIVED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntry.ActionEnum.CANCELED">
             <summary>
             Enum CANCELED for "CANCELED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntry.ActionEnum.COMPLETED">
             <summary>
             Enum COMPLETED for "COMPLETED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntry.ActionEnum.REFUNDED">
             <summary>
             Enum REFUNDED for "REFUNDED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1OrderHistoryEntry.ActionEnum.EXPIRED">
             <summary>
             Enum EXPIRED for "EXPIRED"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1OrderHistoryEntry.Action">
             <summary>
             The type of action performed on the order.
             </summary>
             <value>The type of action performed on the order.</value>
            </member>
        <member name="M:Square.Connect.Model.V1OrderHistoryEntry.#ctor(System.Nullable{Square.Connect.Model.V1OrderHistoryEntry.ActionEnum},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1OrderHistoryEntry" /> class.
             </summary>
             <param name="Action">The type of action performed on the order..</param>
             <param name="CreatedAt">The time when the action was performed, in ISO 8601 format..</param>
            </member>
        <member name="P:Square.Connect.Model.V1OrderHistoryEntry.CreatedAt">
             <summary>
             The time when the action was performed, in ISO 8601 format.
             </summary>
             <value>The time when the action was performed, in ISO 8601 format.</value>
            </member>
        <member name="M:Square.Connect.Model.V1OrderHistoryEntry.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1OrderHistoryEntry.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1OrderHistoryEntry.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1OrderHistoryEntry.Equals(Square.Connect.Model.V1OrderHistoryEntry)">
             <summary>
             Returns true if V1OrderHistoryEntry instances are equal
             </summary>
             <param name="other">Instance of V1OrderHistoryEntry to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1OrderHistoryEntry.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1Page">
             <summary>
             V1Page
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1Page.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.List{Square.Connect.Model.V1PageCell})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Page" /> class.
             </summary>
             <param name="Id">The page's unique identifier..</param>
             <param name="Name">The page's name, if any..</param>
             <param name="PageIndex">The page's position in the merchant's list of pages. Always an integer between 0 and 4, inclusive..</param>
             <param name="Cells">The cells included on the page..</param>
            </member>
        <member name="P:Square.Connect.Model.V1Page.Id">
             <summary>
             The page's unique identifier.
             </summary>
             <value>The page's unique identifier.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Page.Name">
             <summary>
             The page's name, if any.
             </summary>
             <value>The page's name, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Page.PageIndex">
             <summary>
             The page's position in the merchant's list of pages. Always an integer between 0 and 4, inclusive.
             </summary>
             <value>The page's position in the merchant's list of pages. Always an integer between 0 and 4, inclusive.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Page.Cells">
             <summary>
             The cells included on the page.
             </summary>
             <value>The cells included on the page.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Page.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Page.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Page.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Page.Equals(Square.Connect.Model.V1Page)">
             <summary>
             Returns true if V1Page instances are equal
             </summary>
             <param name="other">Instance of V1Page to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Page.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1PageCell">
             <summary>
             V1PageCell
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1PageCell.ObjectTypeEnum">
             <summary>
             The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER).
             </summary>
             <value>The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER).</value>
            </member>
        <member name="F:Square.Connect.Model.V1PageCell.ObjectTypeEnum.ITEM">
             <summary>
             Enum ITEM for "ITEM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1PageCell.ObjectTypeEnum.DISCOUNT">
             <summary>
             Enum DISCOUNT for "DISCOUNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1PageCell.ObjectTypeEnum.CATEGORY">
             <summary>
             Enum CATEGORY for "CATEGORY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1PageCell.ObjectTypeEnum.PLACEHOLDER">
             <summary>
             Enum PLACEHOLDER for "PLACEHOLDER"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1PageCell.PlaceholderTypeEnum">
             <summary>
             For a cell with an object_type of PLACEHOLDER, this value indicates the cell's special behavior.
             </summary>
             <value>For a cell with an object_type of PLACEHOLDER, this value indicates the cell's special behavior.</value>
            </member>
        <member name="F:Square.Connect.Model.V1PageCell.PlaceholderTypeEnum.ALLITEMS">
             <summary>
             Enum ALLITEMS for "ALL_ITEMS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1PageCell.PlaceholderTypeEnum.DISCOUNTSCATEGORY">
             <summary>
             Enum DISCOUNTSCATEGORY for "DISCOUNTS_CATEGORY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1PageCell.PlaceholderTypeEnum.REWARDSFINDER">
             <summary>
             Enum REWARDSFINDER for "REWARDS_FINDER"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1PageCell.ObjectType">
             <summary>
             The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER).
             </summary>
             <value>The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER).</value>
            </member>
        <member name="P:Square.Connect.Model.V1PageCell.PlaceholderType">
             <summary>
             For a cell with an object_type of PLACEHOLDER, this value indicates the cell's special behavior.
             </summary>
             <value>For a cell with an object_type of PLACEHOLDER, this value indicates the cell's special behavior.</value>
            </member>
        <member name="M:Square.Connect.Model.V1PageCell.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{Square.Connect.Model.V1PageCell.ObjectTypeEnum},System.String,System.Nullable{Square.Connect.Model.V1PageCell.PlaceholderTypeEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PageCell" /> class.
             </summary>
             <param name="PageId">The unique identifier of the page the cell is included on..</param>
             <param name="Row">The row of the cell. Always an integer between 0 and 4, inclusive..</param>
             <param name="Column">The column of the cell. Always an integer between 0 and 4, inclusive..</param>
             <param name="ObjectType">The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER)..</param>
             <param name="ObjectId">The unique identifier of the entity represented in the cell. Not present for cells with an object_type of PLACEHOLDER..</param>
             <param name="PlaceholderType">For a cell with an object_type of PLACEHOLDER, this value indicates the cell's special behavior..</param>
            </member>
        <member name="P:Square.Connect.Model.V1PageCell.PageId">
             <summary>
             The unique identifier of the page the cell is included on.
             </summary>
             <value>The unique identifier of the page the cell is included on.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PageCell.Row">
             <summary>
             The row of the cell. Always an integer between 0 and 4, inclusive.
             </summary>
             <value>The row of the cell. Always an integer between 0 and 4, inclusive.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PageCell.Column">
             <summary>
             The column of the cell. Always an integer between 0 and 4, inclusive.
             </summary>
             <value>The column of the cell. Always an integer between 0 and 4, inclusive.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PageCell.ObjectId">
             <summary>
             The unique identifier of the entity represented in the cell. Not present for cells with an object_type of PLACEHOLDER.
             </summary>
             <value>The unique identifier of the entity represented in the cell. Not present for cells with an object_type of PLACEHOLDER.</value>
            </member>
        <member name="M:Square.Connect.Model.V1PageCell.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PageCell.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PageCell.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PageCell.Equals(Square.Connect.Model.V1PageCell)">
             <summary>
             Returns true if V1PageCell instances are equal
             </summary>
             <param name="other">Instance of V1PageCell to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PageCell.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1Payment">
             <summary>
             V1Payment
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1Payment.#ctor(System.String,System.String,System.String,System.String,Square.Connect.Model.Device,System.String,System.String,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,System.Collections.Generic.List{Square.Connect.Model.V1PaymentTax},System.Collections.Generic.List{Square.Connect.Model.V1PaymentTax},System.Collections.Generic.List{Square.Connect.Model.V1Tender},System.Collections.Generic.List{Square.Connect.Model.V1Refund},System.Collections.Generic.List{Square.Connect.Model.V1PaymentItemization})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Payment" /> class.
             </summary>
             <param name="Id">The payment's unique identifier..</param>
             <param name="MerchantId">The unique identifier of the merchant that took the payment..</param>
             <param name="CreatedAt">The time when the payment was created, in ISO 8601 format..</param>
             <param name="CreatorId">The unique identifier of the Square account that took the payment..</param>
             <param name="Device">The device that took the payment..</param>
             <param name="PaymentUrl">The URL of the payment's detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page..</param>
             <param name="ReceiptUrl">The URL of the receipt for the payment. Note that for split tender payments, this URL corresponds to the receipt for the first tender listed in the payment's tender field. Each Tender object has its own receipt_url field you can use to get the other receipts associated with a split tender payment..</param>
             <param name="InclusiveTaxMoney">The sum of all inclusive taxes associated with the payment..</param>
             <param name="AdditiveTaxMoney">The sum of all additive taxes associated with the payment..</param>
             <param name="TaxMoney">The total of all taxes applied to the payment. This is always the sum of inclusive_tax_money and additive_tax_money..</param>
             <param name="TipMoney">The total of all tips applied to the payment..</param>
             <param name="DiscountMoney">The total of all discounts applied to the payment..</param>
             <param name="TotalCollectedMoney">The total of all discounts applied to the payment..</param>
             <param name="ProcessingFeeMoney">The total of all processing fees collected by Square for the payment..</param>
             <param name="NetTotalMoney">The amount to be deposited into the merchant's bank account for the payment..</param>
             <param name="RefundedMoney">The total of all refunds applied to the payment..</param>
             <param name="SwedishRoundingMoney">The total of all sales, including any applicable taxes, rounded to the smallest legal unit of currency (e.g., the nearest penny in USD, the nearest nickel in CAD).</param>
             <param name="GrossSalesMoney">The total of all sales, including any applicable taxes..</param>
             <param name="NetSalesMoney">The total of all sales, minus any applicable taxes..</param>
             <param name="InclusiveTax">All of the inclusive taxes associated with the payment..</param>
             <param name="AdditiveTax">All of the additive taxes associated with the payment..</param>
             <param name="Tender">All of the additive taxes associated with the payment..</param>
             <param name="Refunds">All of the refunds applied to the payment..</param>
             <param name="Itemizations">The items purchased in the payment..</param>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.Id">
             <summary>
             The payment's unique identifier.
             </summary>
             <value>The payment's unique identifier.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.MerchantId">
             <summary>
             The unique identifier of the merchant that took the payment.
             </summary>
             <value>The unique identifier of the merchant that took the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.CreatedAt">
             <summary>
             The time when the payment was created, in ISO 8601 format.
             </summary>
             <value>The time when the payment was created, in ISO 8601 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.CreatorId">
             <summary>
             The unique identifier of the Square account that took the payment.
             </summary>
             <value>The unique identifier of the Square account that took the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.Device">
             <summary>
             The device that took the payment.
             </summary>
             <value>The device that took the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.PaymentUrl">
             <summary>
             The URL of the payment's detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page.
             </summary>
             <value>The URL of the payment's detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.ReceiptUrl">
             <summary>
             The URL of the receipt for the payment. Note that for split tender payments, this URL corresponds to the receipt for the first tender listed in the payment's tender field. Each Tender object has its own receipt_url field you can use to get the other receipts associated with a split tender payment.
             </summary>
             <value>The URL of the receipt for the payment. Note that for split tender payments, this URL corresponds to the receipt for the first tender listed in the payment's tender field. Each Tender object has its own receipt_url field you can use to get the other receipts associated with a split tender payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.InclusiveTaxMoney">
             <summary>
             The sum of all inclusive taxes associated with the payment.
             </summary>
             <value>The sum of all inclusive taxes associated with the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.AdditiveTaxMoney">
             <summary>
             The sum of all additive taxes associated with the payment.
             </summary>
             <value>The sum of all additive taxes associated with the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.TaxMoney">
             <summary>
             The total of all taxes applied to the payment. This is always the sum of inclusive_tax_money and additive_tax_money.
             </summary>
             <value>The total of all taxes applied to the payment. This is always the sum of inclusive_tax_money and additive_tax_money.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.TipMoney">
             <summary>
             The total of all tips applied to the payment.
             </summary>
             <value>The total of all tips applied to the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.DiscountMoney">
             <summary>
             The total of all discounts applied to the payment.
             </summary>
             <value>The total of all discounts applied to the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.TotalCollectedMoney">
             <summary>
             The total of all discounts applied to the payment.
             </summary>
             <value>The total of all discounts applied to the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.ProcessingFeeMoney">
             <summary>
             The total of all processing fees collected by Square for the payment.
             </summary>
             <value>The total of all processing fees collected by Square for the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.NetTotalMoney">
             <summary>
             The amount to be deposited into the merchant's bank account for the payment.
             </summary>
             <value>The amount to be deposited into the merchant's bank account for the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.RefundedMoney">
             <summary>
             The total of all refunds applied to the payment.
             </summary>
             <value>The total of all refunds applied to the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.SwedishRoundingMoney">
             <summary>
             The total of all sales, including any applicable taxes, rounded to the smallest legal unit of currency (e.g., the nearest penny in USD, the nearest nickel in CAD)
             </summary>
             <value>The total of all sales, including any applicable taxes, rounded to the smallest legal unit of currency (e.g., the nearest penny in USD, the nearest nickel in CAD)</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.GrossSalesMoney">
             <summary>
             The total of all sales, including any applicable taxes.
             </summary>
             <value>The total of all sales, including any applicable taxes.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.NetSalesMoney">
             <summary>
             The total of all sales, minus any applicable taxes.
             </summary>
             <value>The total of all sales, minus any applicable taxes.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.InclusiveTax">
             <summary>
             All of the inclusive taxes associated with the payment.
             </summary>
             <value>All of the inclusive taxes associated with the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.AdditiveTax">
             <summary>
             All of the additive taxes associated with the payment.
             </summary>
             <value>All of the additive taxes associated with the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.Tender">
             <summary>
             All of the additive taxes associated with the payment.
             </summary>
             <value>All of the additive taxes associated with the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.Refunds">
             <summary>
             All of the refunds applied to the payment.
             </summary>
             <value>All of the refunds applied to the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Payment.Itemizations">
             <summary>
             The items purchased in the payment.
             </summary>
             <value>The items purchased in the payment.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Payment.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Payment.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Payment.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Payment.Equals(Square.Connect.Model.V1Payment)">
             <summary>
             Returns true if V1Payment instances are equal
             </summary>
             <param name="other">Instance of V1Payment to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Payment.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1PaymentDiscount">
             <summary>
             V1PaymentDiscount
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentDiscount.#ctor(System.String,Square.Connect.Model.V1Money,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PaymentDiscount" /> class.
             </summary>
             <param name="Name">The discount's name..</param>
             <param name="AppliedMoney">The amount of money that this discount adds to the payment (note that this value is always negative or zero)..</param>
             <param name="DiscountId">The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID..</param>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentDiscount.Name">
             <summary>
             The discount's name.
             </summary>
             <value>The discount's name.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentDiscount.AppliedMoney">
             <summary>
             The amount of money that this discount adds to the payment (note that this value is always negative or zero).
             </summary>
             <value>The amount of money that this discount adds to the payment (note that this value is always negative or zero).</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentDiscount.DiscountId">
             <summary>
             The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID.
             </summary>
             <value>The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID.</value>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentDiscount.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentDiscount.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentDiscount.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentDiscount.Equals(Square.Connect.Model.V1PaymentDiscount)">
             <summary>
             Returns true if V1PaymentDiscount instances are equal
             </summary>
             <param name="other">Instance of V1PaymentDiscount to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentDiscount.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1PaymentItemDetail">
             <summary>
             V1PaymentItemDetail
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentItemDetail.#ctor(System.String,System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PaymentItemDetail" /> class.
             </summary>
             <param name="CategoryName">The name of the item's merchant-defined category, if any..</param>
             <param name="Sku"> The item's merchant-defined SKU, if any..</param>
             <param name="ItemId">The unique ID of the item purchased, if any..</param>
             <param name="ItemVariationId">The unique ID of the item variation purchased, if any..</param>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemDetail.CategoryName">
             <summary>
             The name of the item's merchant-defined category, if any.
             </summary>
             <value>The name of the item's merchant-defined category, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemDetail.Sku">
             <summary>
              The item's merchant-defined SKU, if any.
             </summary>
             <value> The item's merchant-defined SKU, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemDetail.ItemId">
             <summary>
             The unique ID of the item purchased, if any.
             </summary>
             <value>The unique ID of the item purchased, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemDetail.ItemVariationId">
             <summary>
             The unique ID of the item variation purchased, if any.
             </summary>
             <value>The unique ID of the item variation purchased, if any.</value>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentItemDetail.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentItemDetail.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentItemDetail.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentItemDetail.Equals(Square.Connect.Model.V1PaymentItemDetail)">
             <summary>
             Returns true if V1PaymentItemDetail instances are equal
             </summary>
             <param name="other">Instance of V1PaymentItemDetail to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentItemDetail.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1PaymentItemization">
             <summary>
             V1PaymentItemization
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1PaymentItemization.ItemizationTypeEnum">
             <summary>
             The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT
             </summary>
             <value>The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT</value>
            </member>
        <member name="F:Square.Connect.Model.V1PaymentItemization.ItemizationTypeEnum.ITEM">
             <summary>
             Enum ITEM for "ITEM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1PaymentItemization.ItemizationTypeEnum.CUSTOMAMOUNT">
             <summary>
             Enum CUSTOMAMOUNT for "CUSTOM_AMOUNT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1PaymentItemization.ItemizationTypeEnum.GIFTCARDACTIVATION">
             <summary>
             Enum GIFTCARDACTIVATION for "GIFT_CARD_ACTIVATION"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1PaymentItemization.ItemizationTypeEnum.GIFTCARDRELOAD">
             <summary>
             Enum GIFTCARDRELOAD for "GIFT_CARD_RELOAD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1PaymentItemization.ItemizationTypeEnum.GIFTCARDUNKNOWN">
             <summary>
             Enum GIFTCARDUNKNOWN for "GIFT_CARD_UNKNOWN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1PaymentItemization.ItemizationTypeEnum.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.ItemizationType">
             <summary>
             The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT
             </summary>
             <value>The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT</value>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentItemization.#ctor(System.String,System.Nullable{System.Decimal},System.Nullable{Square.Connect.Model.V1PaymentItemization.ItemizationTypeEnum},Square.Connect.Model.V1PaymentItemDetail,System.String,System.String,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,System.Collections.Generic.List{Square.Connect.Model.V1PaymentTax},System.Collections.Generic.List{Square.Connect.Model.V1PaymentDiscount},System.Collections.Generic.List{Square.Connect.Model.V1PaymentModifier})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PaymentItemization" /> class.
             </summary>
             <param name="Name">The item's name..</param>
             <param name="Quantity">The quantity of the item purchased. This can be a decimal value..</param>
             <param name="ItemizationType">The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT.</param>
             <param name="ItemDetail">Details of the item, including its unique identifier and the identifier of the item variation purchased..</param>
             <param name="Notes">Notes entered by the merchant about the item at the time of payment, if any..</param>
             <param name="ItemVariationName">The name of the item variation purchased, if any..</param>
             <param name="TotalMoney">The total cost of the item, including all taxes and discounts..</param>
             <param name="SingleQuantityMoney">The cost of a single unit of this item..</param>
             <param name="GrossSalesMoney">The total cost of the itemization and its modifiers, not including taxes or discounts..</param>
             <param name="DiscountMoney">The total of all discounts applied to the itemization. This value is always negative or zero..</param>
             <param name="NetSalesMoney">The sum of gross_sales_money and discount_money..</param>
             <param name="Taxes">All taxes applied to this itemization..</param>
             <param name="Discounts">All discounts applied to this itemization..</param>
             <param name="Modifiers">All modifier options applied to this itemization..</param>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.Name">
             <summary>
             The item's name.
             </summary>
             <value>The item's name.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.Quantity">
             <summary>
             The quantity of the item purchased. This can be a decimal value.
             </summary>
             <value>The quantity of the item purchased. This can be a decimal value.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.ItemDetail">
             <summary>
             Details of the item, including its unique identifier and the identifier of the item variation purchased.
             </summary>
             <value>Details of the item, including its unique identifier and the identifier of the item variation purchased.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.Notes">
             <summary>
             Notes entered by the merchant about the item at the time of payment, if any.
             </summary>
             <value>Notes entered by the merchant about the item at the time of payment, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.ItemVariationName">
             <summary>
             The name of the item variation purchased, if any.
             </summary>
             <value>The name of the item variation purchased, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.TotalMoney">
             <summary>
             The total cost of the item, including all taxes and discounts.
             </summary>
             <value>The total cost of the item, including all taxes and discounts.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.SingleQuantityMoney">
             <summary>
             The cost of a single unit of this item.
             </summary>
             <value>The cost of a single unit of this item.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.GrossSalesMoney">
             <summary>
             The total cost of the itemization and its modifiers, not including taxes or discounts.
             </summary>
             <value>The total cost of the itemization and its modifiers, not including taxes or discounts.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.DiscountMoney">
             <summary>
             The total of all discounts applied to the itemization. This value is always negative or zero.
             </summary>
             <value>The total of all discounts applied to the itemization. This value is always negative or zero.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.NetSalesMoney">
             <summary>
             The sum of gross_sales_money and discount_money.
             </summary>
             <value>The sum of gross_sales_money and discount_money.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.Taxes">
             <summary>
             All taxes applied to this itemization.
             </summary>
             <value>All taxes applied to this itemization.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.Discounts">
             <summary>
             All discounts applied to this itemization.
             </summary>
             <value>All discounts applied to this itemization.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentItemization.Modifiers">
             <summary>
             All modifier options applied to this itemization.
             </summary>
             <value>All modifier options applied to this itemization.</value>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentItemization.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentItemization.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentItemization.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentItemization.Equals(Square.Connect.Model.V1PaymentItemization)">
             <summary>
             Returns true if V1PaymentItemization instances are equal
             </summary>
             <param name="other">Instance of V1PaymentItemization to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentItemization.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1PaymentModifier">
             <summary>
             V1PaymentModifier
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentModifier.#ctor(System.String,Square.Connect.Model.V1Money,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PaymentModifier" /> class.
             </summary>
             <param name="Name">The modifier option's name..</param>
             <param name="AppliedMoney">The amount of money that this modifier option adds to the payment..</param>
             <param name="ModifierOptionId">TThe ID of the applied modifier option, if available. Modifier options applied in older versions of Square Register might not have an ID..</param>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentModifier.Name">
             <summary>
             The modifier option's name.
             </summary>
             <value>The modifier option's name.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentModifier.AppliedMoney">
             <summary>
             The amount of money that this modifier option adds to the payment.
             </summary>
             <value>The amount of money that this modifier option adds to the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentModifier.ModifierOptionId">
             <summary>
             TThe ID of the applied modifier option, if available. Modifier options applied in older versions of Square Register might not have an ID.
             </summary>
             <value>TThe ID of the applied modifier option, if available. Modifier options applied in older versions of Square Register might not have an ID.</value>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentModifier.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentModifier.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentModifier.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentModifier.Equals(Square.Connect.Model.V1PaymentModifier)">
             <summary>
             Returns true if V1PaymentModifier instances are equal
             </summary>
             <param name="other">Instance of V1PaymentModifier to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentModifier.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1PaymentTax">
             <summary>
             V1PaymentTax
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1PaymentTax.InclusionTypeEnum">
             <summary>
             Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
             </summary>
             <value>Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.</value>
            </member>
        <member name="F:Square.Connect.Model.V1PaymentTax.InclusionTypeEnum.ADDITIVE">
             <summary>
             Enum ADDITIVE for "ADDITIVE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1PaymentTax.InclusionTypeEnum.INCLUSIVE">
             <summary>
             Enum INCLUSIVE for "INCLUSIVE"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentTax.InclusionType">
             <summary>
             Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
             </summary>
             <value>Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.</value>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentTax.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error},System.String,Square.Connect.Model.V1Money,System.String,System.Nullable{Square.Connect.Model.V1PaymentTax.InclusionTypeEnum},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PaymentTax" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
             <param name="Name">The merchant-defined name of the tax..</param>
             <param name="AppliedMoney">The amount of money that this tax adds to the payment..</param>
             <param name="Rate">The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%..</param>
             <param name="InclusionType">Whether the tax is an ADDITIVE tax or an INCLUSIVE tax..</param>
             <param name="FeeId">The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID..</param>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentTax.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentTax.Name">
             <summary>
             The merchant-defined name of the tax.
             </summary>
             <value>The merchant-defined name of the tax.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentTax.AppliedMoney">
             <summary>
             The amount of money that this tax adds to the payment.
             </summary>
             <value>The amount of money that this tax adds to the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentTax.Rate">
             <summary>
             The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
             </summary>
             <value>The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PaymentTax.FeeId">
             <summary>
             The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.
             </summary>
             <value>The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.</value>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentTax.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentTax.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentTax.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentTax.Equals(Square.Connect.Model.V1PaymentTax)">
             <summary>
             Returns true if V1PaymentTax instances are equal
             </summary>
             <param name="other">Instance of V1PaymentTax to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PaymentTax.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1PhoneNumber">
             <summary>
             Represents a phone number.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1PhoneNumber.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PhoneNumber" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1PhoneNumber.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1PhoneNumber" /> class.
             </summary>
             <param name="CallingCode">The phone number's international calling code. For US phone numbers, this value is +1. (required).</param>
             <param name="Number">The phone number. (required).</param>
            </member>
        <member name="P:Square.Connect.Model.V1PhoneNumber.CallingCode">
             <summary>
             The phone number's international calling code. For US phone numbers, this value is +1.
             </summary>
             <value>The phone number's international calling code. For US phone numbers, this value is +1.</value>
            </member>
        <member name="P:Square.Connect.Model.V1PhoneNumber.Number">
             <summary>
             The phone number.
             </summary>
             <value>The phone number.</value>
            </member>
        <member name="M:Square.Connect.Model.V1PhoneNumber.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PhoneNumber.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PhoneNumber.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PhoneNumber.Equals(Square.Connect.Model.V1PhoneNumber)">
             <summary>
             Returns true if V1PhoneNumber instances are equal
             </summary>
             <param name="other">Instance of V1PhoneNumber to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1PhoneNumber.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1Refund">
             <summary>
             V1Refund
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Refund.TypeEnum">
             <summary>
             The type of refund 
             </summary>
             <value>The type of refund </value>
            </member>
        <member name="F:Square.Connect.Model.V1Refund.TypeEnum.FULL">
             <summary>
             Enum FULL for "FULL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Refund.TypeEnum.PARTIAL">
             <summary>
             Enum PARTIAL for "PARTIAL"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1Refund.Type">
             <summary>
             The type of refund 
             </summary>
             <value>The type of refund </value>
            </member>
        <member name="M:Square.Connect.Model.V1Refund.#ctor(System.Nullable{Square.Connect.Model.V1Refund.TypeEnum},System.String,Square.Connect.Model.V1Money,System.String,System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Refund" /> class.
             </summary>
             <param name="Type">The type of refund .</param>
             <param name="Reason">The merchant-specified reason for the refund..</param>
             <param name="RefundedMoney">The amount of money refunded. This amount is always negative..</param>
             <param name="CreatedAt">The time when the merchant initiated the refund for Square to process, in ISO 8601 format...</param>
             <param name="ProcessedAt">The time when Square processed the refund on behalf of the merchant, in ISO 8601 format..</param>
             <param name="PaymentId">The Square-issued ID of the payment the refund is applied to..</param>
             <param name="MerchantId">.</param>
            </member>
        <member name="P:Square.Connect.Model.V1Refund.Reason">
             <summary>
             The merchant-specified reason for the refund.
             </summary>
             <value>The merchant-specified reason for the refund.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Refund.RefundedMoney">
             <summary>
             The amount of money refunded. This amount is always negative.
             </summary>
             <value>The amount of money refunded. This amount is always negative.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Refund.CreatedAt">
             <summary>
             The time when the merchant initiated the refund for Square to process, in ISO 8601 format..
             </summary>
             <value>The time when the merchant initiated the refund for Square to process, in ISO 8601 format..</value>
            </member>
        <member name="P:Square.Connect.Model.V1Refund.ProcessedAt">
             <summary>
             The time when Square processed the refund on behalf of the merchant, in ISO 8601 format.
             </summary>
             <value>The time when Square processed the refund on behalf of the merchant, in ISO 8601 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Refund.PaymentId">
             <summary>
             The Square-issued ID of the payment the refund is applied to.
             </summary>
             <value>The Square-issued ID of the payment the refund is applied to.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Refund.MerchantId">
             <summary>
             
             </summary>
             <value></value>
            </member>
        <member name="M:Square.Connect.Model.V1Refund.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Refund.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Refund.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Refund.Equals(Square.Connect.Model.V1Refund)">
             <summary>
             Returns true if V1Refund instances are equal
             </summary>
             <param name="other">Instance of V1Refund to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Refund.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1Settlement">
             <summary>
             V1Settlement
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Settlement.StatusEnum">
             <summary>
             The settlement's current status.
             </summary>
             <value>The settlement's current status.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Settlement.StatusEnum.FAILED">
             <summary>
             Enum FAILED for "FAILED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Settlement.StatusEnum.SENT">
             <summary>
             Enum SENT for "SENT"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1Settlement.Status">
             <summary>
             The settlement's current status.
             </summary>
             <value>The settlement's current status.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Settlement.#ctor(System.String,System.Nullable{Square.Connect.Model.V1Settlement.StatusEnum},Square.Connect.Model.V1Money,System.String,System.String,System.Collections.Generic.List{Square.Connect.Model.V1SettlementEntry})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Settlement" /> class.
             </summary>
             <param name="Id">The settlement's unique identifier..</param>
             <param name="Status">The settlement's current status..</param>
             <param name="TotalMoney">The amount of money involved in the settlement. A positive amount indicates a deposit, and a negative amount indicates a withdrawal. This amount is never zero..</param>
             <param name="InitiatedAt">The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format..</param>
             <param name="BankAccountId">The Square-issued unique identifier for the bank account associated with the settlement..</param>
             <param name="Entries">The entries included in this settlement..</param>
            </member>
        <member name="P:Square.Connect.Model.V1Settlement.Id">
             <summary>
             The settlement's unique identifier.
             </summary>
             <value>The settlement's unique identifier.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Settlement.TotalMoney">
             <summary>
             The amount of money involved in the settlement. A positive amount indicates a deposit, and a negative amount indicates a withdrawal. This amount is never zero.
             </summary>
             <value>The amount of money involved in the settlement. A positive amount indicates a deposit, and a negative amount indicates a withdrawal. This amount is never zero.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Settlement.InitiatedAt">
             <summary>
             The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format.
             </summary>
             <value>The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Settlement.BankAccountId">
             <summary>
             The Square-issued unique identifier for the bank account associated with the settlement.
             </summary>
             <value>The Square-issued unique identifier for the bank account associated with the settlement.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Settlement.Entries">
             <summary>
             The entries included in this settlement.
             </summary>
             <value>The entries included in this settlement.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Settlement.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Settlement.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Settlement.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Settlement.Equals(Square.Connect.Model.V1Settlement)">
             <summary>
             Returns true if V1Settlement instances are equal
             </summary>
             <param name="other">Instance of V1Settlement to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Settlement.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1SettlementEntry">
             <summary>
             V1SettlementEntry
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1SettlementEntry.TypeEnum">
             <summary>
             The settlement's current status.
             </summary>
             <value>The settlement's current status.</value>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.ADJUSTMENT">
             <summary>
             Enum ADJUSTMENT for "ADJUSTMENT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.BALANCECHARGE">
             <summary>
             Enum BALANCECHARGE for "BALANCE_CHARGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.CHARGE">
             <summary>
             Enum CHARGE for "CHARGE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.FREEPROCESSING">
             <summary>
             Enum FREEPROCESSING for "FREE_PROCESSING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.HOLDADJUSTMENT">
             <summary>
             Enum HOLDADJUSTMENT for "HOLD_ADJUSTMENT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.PAIDSERVICEFEE">
             <summary>
             Enum PAIDSERVICEFEE for "PAID_SERVICE_FEE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.PAIDSERVICEFEEREFUND">
             <summary>
             Enum PAIDSERVICEFEEREFUND for "PAID_SERVICE_FEE_REFUND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.REDEMPTIONCODE">
             <summary>
             Enum REDEMPTIONCODE for "REDEMPTION_CODE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.REFUND">
             <summary>
             Enum REFUND for "REFUND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.RETURNEDPAYOUT">
             <summary>
             Enum RETURNEDPAYOUT for "RETURNED_PAYOUT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.SQUARECAPITALADVANCE">
             <summary>
             Enum SQUARECAPITALADVANCE for "SQUARE_CAPITAL_ADVANCE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.SQUARECAPITALPAYMENT">
             <summary>
             Enum SQUARECAPITALPAYMENT for "SQUARE_CAPITAL_PAYMENT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.SQUARECAPITALREVERSEDPAYMENT">
             <summary>
             Enum SQUARECAPITALREVERSEDPAYMENT for "SQUARE_CAPITAL_REVERSED_PAYMENT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.SUBSCRIPTIONFEE">
             <summary>
             Enum SUBSCRIPTIONFEE for "SUBSCRIPTION_FEE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.SUBSCRIPTIONFEEREFUND">
             <summary>
             Enum SUBSCRIPTIONFEEREFUND for "SUBSCRIPTION_FEE_REFUND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.INCENTEDPAYMENT">
             <summary>
             Enum INCENTEDPAYMENT for "INCENTED_PAYMENT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.RETURNEDACHENTRY">
             <summary>
             Enum RETURNEDACHENTRY for "RETURNED_ACH_ENTRY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.RETURNEDSQUARE275">
             <summary>
             Enum RETURNEDSQUARE275 for "RETURNED_SQUARE_275"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1SettlementEntry.TypeEnum.SQUARE275">
             <summary>
             Enum SQUARE275 for "SQUARE_275"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1SettlementEntry.Type">
             <summary>
             The settlement's current status.
             </summary>
             <value>The settlement's current status.</value>
            </member>
        <member name="M:Square.Connect.Model.V1SettlementEntry.#ctor(System.String,System.Nullable{Square.Connect.Model.V1SettlementEntry.TypeEnum},Square.Connect.Model.V1Money,Square.Connect.Model.V1Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1SettlementEntry" /> class.
             </summary>
             <param name="PaymentId">The settlement's unique identifier..</param>
             <param name="Type">The settlement's current status..</param>
             <param name="AmountMoney">The total amount of money this entry contributes to the total settlement amount..</param>
             <param name="FeeMoney">The amount of all Square fees associated with this settlement entry. This value is always negative or zero..</param>
            </member>
        <member name="P:Square.Connect.Model.V1SettlementEntry.PaymentId">
             <summary>
             The settlement's unique identifier.
             </summary>
             <value>The settlement's unique identifier.</value>
            </member>
        <member name="P:Square.Connect.Model.V1SettlementEntry.AmountMoney">
             <summary>
             The total amount of money this entry contributes to the total settlement amount.
             </summary>
             <value>The total amount of money this entry contributes to the total settlement amount.</value>
            </member>
        <member name="P:Square.Connect.Model.V1SettlementEntry.FeeMoney">
             <summary>
             The amount of all Square fees associated with this settlement entry. This value is always negative or zero.
             </summary>
             <value>The amount of all Square fees associated with this settlement entry. This value is always negative or zero.</value>
            </member>
        <member name="M:Square.Connect.Model.V1SettlementEntry.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1SettlementEntry.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1SettlementEntry.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1SettlementEntry.Equals(Square.Connect.Model.V1SettlementEntry)">
             <summary>
             Returns true if V1SettlementEntry instances are equal
             </summary>
             <param name="other">Instance of V1SettlementEntry to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1SettlementEntry.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1Tender">
             <summary>
             V1Tender
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Tender.TypeEnum">
             <summary>
             The type of tender.
             </summary>
             <value>The type of tender.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.TypeEnum.CREDITCARD">
             <summary>
             Enum CREDITCARD for "CREDIT_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.TypeEnum.CASH">
             <summary>
             Enum CASH for "CASH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.TypeEnum.THIRDPARTYCARD">
             <summary>
             Enum THIRDPARTYCARD for "THIRD_PARTY_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.TypeEnum.NOSALE">
             <summary>
             Enum NOSALE for "NO_SALE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.TypeEnum.SQUAREWALLET">
             <summary>
             Enum SQUAREWALLET for "SQUARE_WALLET"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.TypeEnum.SQUAREGIFTCARD">
             <summary>
             Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.TypeEnum.UNKNOWN">
             <summary>
             Enum UNKNOWN for "UNKNOWN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.TypeEnum.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Tender.CardBrandEnum">
             <summary>
             The brand of credit card provided.
             </summary>
             <value>The brand of credit card provided.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.OTHERBRAND">
             <summary>
             Enum OTHERBRAND for "OTHER_BRAND"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.VISA">
             <summary>
             Enum VISA for "VISA"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.MASTERCARD">
             <summary>
             Enum MASTERCARD for "MASTER_CARD"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.AMERICANEXPRESS">
             <summary>
             Enum AMERICANEXPRESS for "AMERICAN_EXPRESS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.DISCOVER">
             <summary>
             Enum DISCOVER for "DISCOVER"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.DISCOVERDINERS">
             <summary>
             Enum DISCOVERDINERS for "DISCOVER_DINERS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.JCB">
             <summary>
             Enum JCB for "JCB"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.CHINAUNIONPAY">
             <summary>
             Enum CHINAUNIONPAY for "CHINA_UNIONPAY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.CardBrandEnum.SQUAREGIFTCARD">
             <summary>
             Enum SQUAREGIFTCARD for "SQUARE_GIFT_CARD"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Tender.EntryMethodEnum">
             <summary>
             The tender's unique ID.
             </summary>
             <value>The tender's unique ID.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.EntryMethodEnum.MANUAL">
             <summary>
             Enum MANUAL for "MANUAL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.EntryMethodEnum.SCANNED">
             <summary>
             Enum SCANNED for "SCANNED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.EntryMethodEnum.SQUARECASH">
             <summary>
             Enum SQUARECASH for "SQUARE_CASH"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.EntryMethodEnum.SQUAREWALLET">
             <summary>
             Enum SQUAREWALLET for "SQUARE_WALLET"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.EntryMethodEnum.SWIPED">
             <summary>
             Enum SWIPED for "SWIPED"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.EntryMethodEnum.WEBFORM">
             <summary>
             Enum WEBFORM for "WEB_FORM"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Tender.EntryMethodEnum.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1Tender.Type">
             <summary>
             The type of tender.
             </summary>
             <value>The type of tender.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Tender.CardBrand">
             <summary>
             The brand of credit card provided.
             </summary>
             <value>The brand of credit card provided.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Tender.EntryMethod">
             <summary>
             The tender's unique ID.
             </summary>
             <value>The tender's unique ID.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Tender.#ctor(System.String,System.Nullable{Square.Connect.Model.V1Tender.TypeEnum},System.String,System.String,System.String,System.Nullable{Square.Connect.Model.V1Tender.CardBrandEnum},System.String,System.Nullable{Square.Connect.Model.V1Tender.EntryMethodEnum},System.String,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money,Square.Connect.Model.V1Money)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Tender" /> class.
             </summary>
             <param name="Id">The tender's unique ID..</param>
             <param name="Type">The type of tender..</param>
             <param name="Name">A human-readable description of the tender..</param>
             <param name="EmployeeId">The ID of the employee that processed the tender..</param>
             <param name="ReceiptUrl">The URL of the receipt for the tender..</param>
             <param name="CardBrand">The brand of credit card provided..</param>
             <param name="PanSuffix">The last four digits of the provided credit card's account number..</param>
             <param name="EntryMethod">The tender's unique ID..</param>
             <param name="PaymentNote">Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER..</param>
             <param name="TotalMoney">The total amount of money provided in this form of tender..</param>
             <param name="TenderedMoney">The amount of total_money applied to the payment..</param>
             <param name="ChangeBackMoney">The amount of total_money returned to the buyer as change..</param>
             <param name="RefundedMoney">The total of all refunds applied to this tender. This amount is always negative or zero..</param>
            </member>
        <member name="P:Square.Connect.Model.V1Tender.Id">
             <summary>
             The tender's unique ID.
             </summary>
             <value>The tender's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Tender.Name">
             <summary>
             A human-readable description of the tender.
             </summary>
             <value>A human-readable description of the tender.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Tender.EmployeeId">
             <summary>
             The ID of the employee that processed the tender.
             </summary>
             <value>The ID of the employee that processed the tender.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Tender.ReceiptUrl">
             <summary>
             The URL of the receipt for the tender.
             </summary>
             <value>The URL of the receipt for the tender.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Tender.PanSuffix">
             <summary>
             The last four digits of the provided credit card's account number.
             </summary>
             <value>The last four digits of the provided credit card's account number.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Tender.PaymentNote">
             <summary>
             Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER.
             </summary>
             <value>Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Tender.TotalMoney">
             <summary>
             The total amount of money provided in this form of tender.
             </summary>
             <value>The total amount of money provided in this form of tender.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Tender.TenderedMoney">
             <summary>
             The amount of total_money applied to the payment.
             </summary>
             <value>The amount of total_money applied to the payment.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Tender.ChangeBackMoney">
             <summary>
             The amount of total_money returned to the buyer as change.
             </summary>
             <value>The amount of total_money returned to the buyer as change.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Tender.RefundedMoney">
             <summary>
             The total of all refunds applied to this tender. This amount is always negative or zero.
             </summary>
             <value>The total of all refunds applied to this tender. This amount is always negative or zero.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Tender.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Tender.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Tender.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Tender.Equals(Square.Connect.Model.V1Tender)">
             <summary>
             Returns true if V1Tender instances are equal
             </summary>
             <param name="other">Instance of V1Tender to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Tender.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1Timecard">
             <summary>
             Represents a timecard for an employee.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1Timecard.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Timecard" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1Timecard.#ctor(System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Timecard" /> class.
             </summary>
             <param name="Id">The timecard's unique ID..</param>
             <param name="EmployeeId">The ID of the employee the timecard is associated with. (required).</param>
             <param name="Deleted">If true, the timecard was deleted by the merchant, and it is no longer valid..</param>
             <param name="ClockinTime">The clock-in time for the timecard, in ISO 8601 format..</param>
             <param name="ClockoutTime">The clock-out time for the timecard, in ISO 8601 format. Provide this value only if importing timecard information from another system..</param>
             <param name="ClockinLocationId">The ID of the location the employee clocked in from, if any..</param>
             <param name="ClockoutLocationId">The ID of the location the employee clocked out from. Provide this value only if importing timecard information from another system..</param>
             <param name="CreatedAt">The time when the timecard was created, in ISO 8601 format..</param>
             <param name="UpdatedAt">The time when the timecard was most recently updated, in ISO 8601 format..</param>
            </member>
        <member name="P:Square.Connect.Model.V1Timecard.Id">
             <summary>
             The timecard's unique ID.
             </summary>
             <value>The timecard's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Timecard.EmployeeId">
             <summary>
             The ID of the employee the timecard is associated with.
             </summary>
             <value>The ID of the employee the timecard is associated with.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Timecard.Deleted">
             <summary>
             If true, the timecard was deleted by the merchant, and it is no longer valid.
             </summary>
             <value>If true, the timecard was deleted by the merchant, and it is no longer valid.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Timecard.ClockinTime">
             <summary>
             The clock-in time for the timecard, in ISO 8601 format.
             </summary>
             <value>The clock-in time for the timecard, in ISO 8601 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Timecard.ClockoutTime">
             <summary>
             The clock-out time for the timecard, in ISO 8601 format. Provide this value only if importing timecard information from another system.
             </summary>
             <value>The clock-out time for the timecard, in ISO 8601 format. Provide this value only if importing timecard information from another system.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Timecard.ClockinLocationId">
             <summary>
             The ID of the location the employee clocked in from, if any.
             </summary>
             <value>The ID of the location the employee clocked in from, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Timecard.ClockoutLocationId">
             <summary>
             The ID of the location the employee clocked out from. Provide this value only if importing timecard information from another system.
             </summary>
             <value>The ID of the location the employee clocked out from. Provide this value only if importing timecard information from another system.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Timecard.CreatedAt">
             <summary>
             The time when the timecard was created, in ISO 8601 format.
             </summary>
             <value>The time when the timecard was created, in ISO 8601 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Timecard.UpdatedAt">
             <summary>
             The time when the timecard was most recently updated, in ISO 8601 format.
             </summary>
             <value>The time when the timecard was most recently updated, in ISO 8601 format.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Timecard.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Timecard.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Timecard.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Timecard.Equals(Square.Connect.Model.V1Timecard)">
             <summary>
             Returns true if V1Timecard instances are equal
             </summary>
             <param name="other">Instance of V1Timecard to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Timecard.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1TimecardEvent">
             <summary>
             V1TimecardEvent
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1TimecardEvent.EventTypeEnum">
             <summary>
             The ID of the timecard to list events for.
             </summary>
             <value>The ID of the timecard to list events for.</value>
            </member>
        <member name="F:Square.Connect.Model.V1TimecardEvent.EventTypeEnum.APICREATE">
             <summary>
             Enum APICREATE for "API_CREATE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1TimecardEvent.EventTypeEnum.APIEDIT">
             <summary>
             Enum APIEDIT for "API_EDIT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1TimecardEvent.EventTypeEnum.APIDELETE">
             <summary>
             Enum APIDELETE for "API_DELETE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1TimecardEvent.EventTypeEnum.REGISTERCLOCKIN">
             <summary>
             Enum REGISTERCLOCKIN for "REGISTER_CLOCKIN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1TimecardEvent.EventTypeEnum.REGISTERCLOCKOUT">
             <summary>
             Enum REGISTERCLOCKOUT for "REGISTER_CLOCKOUT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1TimecardEvent.EventTypeEnum.DASHBOARDSUPERVISORCLOSE">
             <summary>
             Enum DASHBOARDSUPERVISORCLOSE for "DASHBOARD_SUPERVISOR_CLOSE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1TimecardEvent.EventTypeEnum.DASHBOARDEDIT">
             <summary>
             Enum DASHBOARDEDIT for "DASHBOARD_EDIT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1TimecardEvent.EventTypeEnum.DASHBOARDDELETE">
             <summary>
             Enum DASHBOARDDELETE for "DASHBOARD_DELETE"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1TimecardEvent.EventType">
             <summary>
             The ID of the timecard to list events for.
             </summary>
             <value>The ID of the timecard to list events for.</value>
            </member>
        <member name="M:Square.Connect.Model.V1TimecardEvent.#ctor(System.String,System.Nullable{Square.Connect.Model.V1TimecardEvent.EventTypeEnum},System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1TimecardEvent" /> class.
             </summary>
             <param name="Id">The event's unique ID..</param>
             <param name="EventType">The ID of the timecard to list events for..</param>
             <param name="ClockinTime">The time the employee clocked in, in ISO 8601 format..</param>
             <param name="ClockoutTime">The time the employee clocked out, in ISO 8601 format..</param>
             <param name="CreatedAt">The time when the event was created, in ISO 8601 format..</param>
            </member>
        <member name="P:Square.Connect.Model.V1TimecardEvent.Id">
             <summary>
             The event's unique ID.
             </summary>
             <value>The event's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.V1TimecardEvent.ClockinTime">
             <summary>
             The time the employee clocked in, in ISO 8601 format.
             </summary>
             <value>The time the employee clocked in, in ISO 8601 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1TimecardEvent.ClockoutTime">
             <summary>
             The time the employee clocked out, in ISO 8601 format.
             </summary>
             <value>The time the employee clocked out, in ISO 8601 format.</value>
            </member>
        <member name="P:Square.Connect.Model.V1TimecardEvent.CreatedAt">
             <summary>
             The time when the event was created, in ISO 8601 format.
             </summary>
             <value>The time when the event was created, in ISO 8601 format.</value>
            </member>
        <member name="M:Square.Connect.Model.V1TimecardEvent.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1TimecardEvent.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1TimecardEvent.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1TimecardEvent.Equals(Square.Connect.Model.V1TimecardEvent)">
             <summary>
             Returns true if V1TimecardEvent instances are equal
             </summary>
             <param name="other">Instance of V1TimecardEvent to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1TimecardEvent.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1UpdateModifierListRequest">
             <summary>
             V1UpdateModifierListRequest
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1UpdateModifierListRequest.SelectionTypeEnum">
             <summary>
             Indicates whether multiple options from the modifier list can be applied to a single item.
             </summary>
             <value>Indicates whether multiple options from the modifier list can be applied to a single item.</value>
            </member>
        <member name="F:Square.Connect.Model.V1UpdateModifierListRequest.SelectionTypeEnum.SINGLE">
             <summary>
             Enum SINGLE for "SINGLE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1UpdateModifierListRequest.SelectionTypeEnum.MULTIPLE">
             <summary>
             Enum MULTIPLE for "MULTIPLE"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1UpdateModifierListRequest.SelectionType">
             <summary>
             Indicates whether multiple options from the modifier list can be applied to a single item.
             </summary>
             <value>Indicates whether multiple options from the modifier list can be applied to a single item.</value>
            </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierListRequest.#ctor(System.String,System.Nullable{Square.Connect.Model.V1UpdateModifierListRequest.SelectionTypeEnum})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateModifierListRequest" /> class.
             </summary>
             <param name="Name">The modifier list's name..</param>
             <param name="SelectionType">Indicates whether multiple options from the modifier list can be applied to a single item..</param>
            </member>
        <member name="P:Square.Connect.Model.V1UpdateModifierListRequest.Name">
             <summary>
             The modifier list's name.
             </summary>
             <value>The modifier list's name.</value>
            </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierListRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierListRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierListRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierListRequest.Equals(Square.Connect.Model.V1UpdateModifierListRequest)">
             <summary>
             Returns true if V1UpdateModifierListRequest instances are equal
             </summary>
             <param name="other">Instance of V1UpdateModifierListRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1UpdateModifierListRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1UpdateOrderRequest">
             <summary>
             V1UpdateOrderRequest
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1UpdateOrderRequest.ActionEnum">
             <summary>
             The action to perform on the order (COMPLETE, CANCEL, or REFUND).
             </summary>
             <value>The action to perform on the order (COMPLETE, CANCEL, or REFUND).</value>
            </member>
        <member name="F:Square.Connect.Model.V1UpdateOrderRequest.ActionEnum.COMPLETE">
             <summary>
             Enum COMPLETE for "COMPLETE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1UpdateOrderRequest.ActionEnum.CANCEL">
             <summary>
             Enum CANCEL for "CANCEL"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1UpdateOrderRequest.ActionEnum.REFUND">
             <summary>
             Enum REFUND for "REFUND"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1UpdateOrderRequest.Action">
             <summary>
             The action to perform on the order (COMPLETE, CANCEL, or REFUND).
             </summary>
             <value>The action to perform on the order (COMPLETE, CANCEL, or REFUND).</value>
            </member>
        <member name="M:Square.Connect.Model.V1UpdateOrderRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateOrderRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.V1UpdateOrderRequest.#ctor(System.Nullable{Square.Connect.Model.V1UpdateOrderRequest.ActionEnum},System.String,System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1UpdateOrderRequest" /> class.
             </summary>
             <param name="Action">The action to perform on the order (COMPLETE, CANCEL, or REFUND). (required).</param>
             <param name="ShippedTrackingNumber">The tracking number of the shipment associated with the order. Only valid if action is COMPLETE..</param>
             <param name="CompletedNote">A merchant-specified note about the completion of the order. Only valid if action is COMPLETE..</param>
             <param name="RefundedNote">A merchant-specified note about the refunding of the order. Only valid if action is REFUND..</param>
             <param name="CanceledNote">A merchant-specified note about the canceling of the order. Only valid if action is CANCEL..</param>
            </member>
        <member name="P:Square.Connect.Model.V1UpdateOrderRequest.ShippedTrackingNumber">
             <summary>
             The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.
             </summary>
             <value>The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.</value>
            </member>
        <member name="P:Square.Connect.Model.V1UpdateOrderRequest.CompletedNote">
             <summary>
             A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.
             </summary>
             <value>A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.</value>
            </member>
        <member name="P:Square.Connect.Model.V1UpdateOrderRequest.RefundedNote">
             <summary>
             A merchant-specified note about the refunding of the order. Only valid if action is REFUND.
             </summary>
             <value>A merchant-specified note about the refunding of the order. Only valid if action is REFUND.</value>
            </member>
        <member name="P:Square.Connect.Model.V1UpdateOrderRequest.CanceledNote">
             <summary>
             A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.
             </summary>
             <value>A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.</value>
            </member>
        <member name="M:Square.Connect.Model.V1UpdateOrderRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1UpdateOrderRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1UpdateOrderRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1UpdateOrderRequest.Equals(Square.Connect.Model.V1UpdateOrderRequest)">
             <summary>
             Returns true if V1UpdateOrderRequest instances are equal
             </summary>
             <param name="other">Instance of V1UpdateOrderRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1UpdateOrderRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.V1Variation">
             <summary>
             V1Variation
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Variation.PricingTypeEnum">
             <summary>
             Indicates whether the item variation's price is fixed or determined at the time of sale.
             </summary>
             <value>Indicates whether the item variation's price is fixed or determined at the time of sale.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Variation.PricingTypeEnum.FIXEDPRICING">
             <summary>
             Enum FIXEDPRICING for "FIXED_PRICING"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Variation.PricingTypeEnum.VARIABLEPRICING">
             <summary>
             Enum VARIABLEPRICING for "VARIABLE_PRICING"
             </summary>
            </member>
        <member name="T:Square.Connect.Model.V1Variation.InventoryAlertTypeEnum">
             <summary>
             Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its inventory_alert_threshold.
             </summary>
             <value>Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its inventory_alert_threshold.</value>
            </member>
        <member name="F:Square.Connect.Model.V1Variation.InventoryAlertTypeEnum.LOWQUANTITY">
             <summary>
             Enum LOWQUANTITY for "LOW_QUANTITY"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Variation.InventoryAlertTypeEnum.NONE">
             <summary>
             Enum NONE for "NONE"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Variation.InventoryAlertTypeEnum.INVESTMENT">
             <summary>
             Enum INVESTMENT for "INVESTMENT"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Variation.InventoryAlertTypeEnum.LOAN">
             <summary>
             Enum LOAN for "LOAN"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Variation.InventoryAlertTypeEnum.SAVINGS">
             <summary>
             Enum SAVINGS for "SAVINGS"
             </summary>
            </member>
        <member name="F:Square.Connect.Model.V1Variation.InventoryAlertTypeEnum.OTHER">
             <summary>
             Enum OTHER for "OTHER"
             </summary>
            </member>
        <member name="P:Square.Connect.Model.V1Variation.PricingType">
             <summary>
             Indicates whether the item variation's price is fixed or determined at the time of sale.
             </summary>
             <value>Indicates whether the item variation's price is fixed or determined at the time of sale.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Variation.InventoryAlertType">
             <summary>
             Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its inventory_alert_threshold.
             </summary>
             <value>Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its inventory_alert_threshold.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Variation.#ctor(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{Square.Connect.Model.V1Variation.PricingTypeEnum},Square.Connect.Model.V1Money,System.String,System.Nullable{System.Boolean},System.Nullable{Square.Connect.Model.V1Variation.InventoryAlertTypeEnum},System.Nullable{System.Int32},System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.V1Variation" /> class.
             </summary>
             <param name="Id">The item variation's unique ID..</param>
             <param name="Name">The item variation's name..</param>
             <param name="ItemId">The ID of the variation's associated item..</param>
             <param name="Ordinal">Indicates the variation's list position when displayed in Square Register and the merchant dashboard. If more than one variation for the same item has the same ordinal value, those variations are displayed in alphabetical order.</param>
             <param name="PricingType">Indicates whether the item variation's price is fixed or determined at the time of sale..</param>
             <param name="PriceMoney">The item variation's price, if any..</param>
             <param name="Sku">The item variation's SKU, if any..</param>
             <param name="TrackInventory">If true, inventory tracking is active for the variation..</param>
             <param name="InventoryAlertType">Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its inventory_alert_threshold..</param>
             <param name="InventoryAlertThreshold">If the inventory quantity for the variation is less than or equal to this value and inventory_alert_type is LOW_QUANTITY, the variation displays an alert in the merchant dashboard..</param>
             <param name="UserData">Arbitrary metadata associated with the variation. Cannot exceed 255 characters..</param>
            </member>
        <member name="P:Square.Connect.Model.V1Variation.Id">
             <summary>
             The item variation's unique ID.
             </summary>
             <value>The item variation's unique ID.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Variation.Name">
             <summary>
             The item variation's name.
             </summary>
             <value>The item variation's name.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Variation.ItemId">
             <summary>
             The ID of the variation's associated item.
             </summary>
             <value>The ID of the variation's associated item.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Variation.Ordinal">
             <summary>
             Indicates the variation's list position when displayed in Square Register and the merchant dashboard. If more than one variation for the same item has the same ordinal value, those variations are displayed in alphabetical order
             </summary>
             <value>Indicates the variation's list position when displayed in Square Register and the merchant dashboard. If more than one variation for the same item has the same ordinal value, those variations are displayed in alphabetical order</value>
            </member>
        <member name="P:Square.Connect.Model.V1Variation.PriceMoney">
             <summary>
             The item variation's price, if any.
             </summary>
             <value>The item variation's price, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Variation.Sku">
             <summary>
             The item variation's SKU, if any.
             </summary>
             <value>The item variation's SKU, if any.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Variation.TrackInventory">
             <summary>
             If true, inventory tracking is active for the variation.
             </summary>
             <value>If true, inventory tracking is active for the variation.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Variation.InventoryAlertThreshold">
             <summary>
             If the inventory quantity for the variation is less than or equal to this value and inventory_alert_type is LOW_QUANTITY, the variation displays an alert in the merchant dashboard.
             </summary>
             <value>If the inventory quantity for the variation is less than or equal to this value and inventory_alert_type is LOW_QUANTITY, the variation displays an alert in the merchant dashboard.</value>
            </member>
        <member name="P:Square.Connect.Model.V1Variation.UserData">
             <summary>
             Arbitrary metadata associated with the variation. Cannot exceed 255 characters.
             </summary>
             <value>Arbitrary metadata associated with the variation. Cannot exceed 255 characters.</value>
            </member>
        <member name="M:Square.Connect.Model.V1Variation.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Variation.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Variation.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Variation.Equals(Square.Connect.Model.V1Variation)">
             <summary>
             Returns true if V1Variation instances are equal
             </summary>
             <param name="other">Instance of V1Variation to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.V1Variation.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.VoidTransactionRequest">
             <summary>
             
             </summary>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.VoidTransactionRequest" /> class.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.Equals(Square.Connect.Model.VoidTransactionRequest)">
             <summary>
             Returns true if VoidTransactionRequest instances are equal
             </summary>
             <param name="other">Instance of VoidTransactionRequest to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionRequest.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
        <member name="T:Square.Connect.Model.VoidTransactionResponse">
             <summary>
             Defines the fields that are included in the response body of a request to the [CaptureTransaction](#endpoint-capturetransaction) endpoint.
             </summary>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.#ctor(System.Collections.Generic.List{Square.Connect.Model.Error})">
             <summary>
             Initializes a new instance of the <see cref="T:Square.Connect.Model.VoidTransactionResponse" /> class.
             </summary>
             <param name="Errors">Any errors that occurred during the request..</param>
            </member>
        <member name="P:Square.Connect.Model.VoidTransactionResponse.Errors">
             <summary>
             Any errors that occurred during the request.
             </summary>
             <value>Any errors that occurred during the request.</value>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.ToString">
             <summary>
             Returns the string presentation of the object
             </summary>
             <returns>String presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.ToJson">
             <summary>
             Returns the JSON string presentation of the object
             </summary>
             <returns>JSON string presentation of the object</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.Equals(System.Object)">
             <summary>
             Returns true if objects are equal
             </summary>
             <param name="obj">Object to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.Equals(Square.Connect.Model.VoidTransactionResponse)">
             <summary>
             Returns true if VoidTransactionResponse instances are equal
             </summary>
             <param name="other">Instance of VoidTransactionResponse to be compared</param>
             <returns>Boolean</returns>
            </member>
        <member name="M:Square.Connect.Model.VoidTransactionResponse.GetHashCode">
             <summary>
             Gets the hash code
             </summary>
             <returns>Hash code</returns>
            </member>
    </members>
</doc>
